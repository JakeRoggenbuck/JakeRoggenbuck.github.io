<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Julia on Jake Roggenbuck</title><link>/tags/julia/</link><description>Recent content in Julia on Jake Roggenbuck</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© 2025 Jake Roggenbuck</copyright><lastBuildDate>Wed, 14 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/julia/index.xml" rel="self" type="application/rss+xml"/><item><title>colorgradient-julia</title><link>/projects/colorgradient-julia/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><guid>/projects/colorgradient-julia/</guid><description> colorgradient-julia # Python version colorgradient Rust version colorgradient-rs Julia version colorgradient-julia C version colorgradient-c Go version colorgradient-go Clojure version colorgradient-clj # Find the slope of two point find_slope(x1, y1, x2, y2) = (y2 - y1) / (x2 - x1) # Find the closest whole numbers on both sides of a x neighbors(x) = round(x), ceil(x) # Find the predicted value of y given a value x function find_y(x, known_x) # Check if the given value is exactly one in the known list if round(x) == x return known_x[x] end left_x, right_x = neighbors(x) left_y = known_x[left_x] right_y = known_x[right_x] slope = find_slope(left_x, left_y, right_x, right_y) return left_y + (slope * (x - left_x)) end</description></item></channel></rss>