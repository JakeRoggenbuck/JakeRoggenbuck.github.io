<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>concept on JR0.org</title><link>https://jr0.org/tags/concept/</link><description>Recent content in concept on JR0.org</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jr0.org/tags/concept/index.xml" rel="self" type="application/rss+xml"/><item><title>Bloom filters in Rust</title><link>https://jr0.org/posts/bloom-filters/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://jr0.org/posts/bloom-filters/</guid><description>Intro A bloom filters is a data structure that allows you to quickly identify if some data has been previously added to the structure. What makes a bloom filter unique is that is that it gives up full accuracy for huge speed boost. A bloom filter has small false positive rate, and this rate can be decreased by using more memory and more hash algorithms, however you can find an optimal amount of memory and hash algorithm count to achieve great speed while still maintaining lower memory than a normal list.</description></item><item><title>Type safety in Rust</title><link>https://jr0.org/posts/type-safety-in-rust/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><guid>https://jr0.org/posts/type-safety-in-rust/</guid><description>Here is an interesting thing that shows why compiled languages are good, specifically why Rust is great.
Take this code example that checks an enum.
from enum import Enum class Mode(Enum): Easy = 0 Hard = 1 if mode == Mode.Easy: print(&amp;#34;It&amp;#39;s easy.&amp;#34;) elif mode == Mode.Hard: print(&amp;#34;Hard mode.&amp;#34;) What happens if mode is set to None, or 2 or &amp;quot;Anything&amp;quot;. If that&amp;rsquo;s the case, neither method will be executed.</description></item></channel></rss>