<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data-structures on Jake Roggenbuck</title><link>https://jr0.org/tags/data-structures/</link><description>Recent content in data-structures on Jake Roggenbuck</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 03 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jr0.org/tags/data-structures/index.xml" rel="self" type="application/rss+xml"/><item><title>Bloom filters in Rust</title><link>https://jr0.org/posts/bloom-filters/</link><pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate><guid>https://jr0.org/posts/bloom-filters/</guid><description>Intro A bloom filter is a data structure that allows you to quickly identify if some data has been previously added to the structure. What makes a bloom filter unique is that is that it gives up full accuracy for huge speed boost. A bloom filter has small false positive rate, and this rate can be decreased by using more memory and more hash algorithms, however you can find an optimal amount of memory and hash algorithm count to achieve great speed while still maintaining lower memory than a normal list.</description></item></channel></rss>