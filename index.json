[{"content":" SafeDrive AI # Here is my teams submission for a hackathon called HackDavis. We build lane detection, obstacle avoidance, driver alertness monitoring, and a hardware alert system.\nhttps://devpost.com/software/safe-drive-ai\nhttps://github.com/JakeRoggenbuck/hackdavis-2024\nLinear Regression in Rust # Linear regression from scratch in Rust.\nhttps://github.com/JakeRoggenbuck/linear-regression-rs\nJML # A machine learning library in C++ from scratch.\nhttps://github.com/JakeRoggenbuck/jml\n","date":"28 August 2024","permalink":"/ml/","section":"","summary":"SafeDrive AI # Here is my teams submission for a hackathon called HackDavis.","title":"Machine Learning"},{"content":"Student at UC Davis studying Computer Science.\nFavorite languages: C, Rust, Go, C++, Python\nTopics of interest # Here are some pages about topics I am interest in:\nMath, Space, Computer Science, Machine Learning\nContact # Email: me@jr0.org\nBug Reports: bug@jr0.org\nSoftware: opensource@jr0.org\nPublic GPG Key: 309BBC9\n","date":"21 June 2024","permalink":"/","section":"","summary":"Student at UC Davis studying Computer Science.","title":""},{"content":"","date":"21 June 2024","permalink":"/tags/commands/","section":"Tags","summary":"","title":"commands"},{"content":"","date":"21 June 2024","permalink":"/tags/git/","section":"Tags","summary":"","title":"git"},{"content":"Here are git commands I used very frequently when I was TPM for Clubly. I still use these commands very frequently for other collaborative git projects and I provide these commands to TPMs that I train at AggieWorks. This was originally written January 10th of 2024.\nEditors Note: This guide uses HTTP git remotes but SSH remotes are what I use and are what I prefer.\nTesting someone else\u0026rsquo;s PR locally # # Fetch the PR where \u0026lt;NUMBER\u0026gt; can be changed to the number that the PR is git fetch upstream pull/\u0026lt;NUMBER\u0026gt;/head git checkout FETCH_HEAD # Test locally Pushing to someone\u0026rsquo;s PR - Here Be Dragons # # \u0026lt;DEV\u0026#39;s Branch Name\u0026gt; can be changed to their branch name (ex. fix-bugs) git switch -c \u0026lt;DEV\u0026#39;s Branch Name\u0026gt; # \u0026lt;DEV\u0026#39;s Name\u0026gt; can be changed to the name of the developer (ex. jake) # This name is set when you add the remote of the developer. # See the next section for how to add a name (remote). git pull \u0026lt;DEV\u0026#39;s Name\u0026gt; \u0026lt;DEV\u0026#39;s Branch Name\u0026gt; # Make changes - Be careful here git push \u0026lt;DEV\u0026#39;s Name\u0026gt; \u0026lt;DEV\u0026#39;s Branch Name\u0026gt; Adding a remote for a dev # # Add the URL - \u0026lt;NAME\u0026gt; is their name (ex. jake), \u0026lt;USERNAME\u0026gt; is their github username (ex. jakeroggenbuck) git remote add \u0026lt;NAME\u0026gt; https://github.com/\u0026lt;USERNAME\u0026gt;/Clubly.git Pushing to preview - Here Be Dragons # # Update your local main git swicth origin main git pull origin main # Test locally # Pushing to preview git push origin preview # Go to github and create a pull request # Review the pull request and merge after checks pass # Check clubly.dev to see changes worked Pushing to production - Here Be Dragons # # Update your local main git swicth origin main git pull origin main # Test locally # Pushing to production git push origin production # Go to github and create a pull request # Review the pull request and merge after checks pass # Check clubly.org to see changes worked ","date":"21 June 2024","permalink":"/posts/git-for-technical-leadership/","section":"Posts","summary":"Here are git commands I used very frequently when I was TPM for Clubly.","title":"Git for Technical Leadership"},{"content":"","date":"21 June 2024","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"21 June 2024","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" About the article # This is an updated version of the original article from April of 2023 found here originally made for the Clubly team. This resource may be helpful for other teams. This article is also shows the use of Circular Development.\nCircular Development Setting up a project # Fork the project Clone the fork Use git clone git@github.com:JakeRoggenbuck/clubly.git Add the upstream remote Use git remote add upstream git@github.com:aggieworks/clubly.git What your setup should look like (git remote -v) # origin\tgit@github.com:JakeRoggenbuck/clubly.git (fetch) origin\tgit@github.com:JakeRoggenbuck/clubly.git (push) upstream\tgit@github.com:aggieworks/clubly.git (fetch) upstream\tgit@github.com:aggieworks/clubly.git (push) Getting information # # list the remotes git remote -v # check your staging area git status # check commits git log Update from latest # # make sure you are on your own main and don\u0026#39;t have any current changes git switch main git pull upstream main Before a feature/assignment/change # This should be done before the start of any distinct feature or large change.\ngit switch main git pull upstream main git switch -c feature-name Submitting a feature/assignment/change # # add all changed but prevously staged files git add -u git commit git push origin feature-name ","date":"20 June 2024","permalink":"/posts/updated-helpful-git-commands/","section":"Posts","summary":"About the article # This is an updated version of the original article from April of 2023 found here originally made for the Clubly team.","title":"Helpful Git Commands (Updated)"},{"content":"I enjoy studying and learning math.\nMath research # Here is the first math paper I wrote with Adam Hutchings about the Thue-Morse Sequence.\nEarlier Math Research # On Logs Research # Github: https://github.com/JakeRoggenbuck/on-logs-research\nPascals Triangle # Github: https://github.com/JakeRoggenbuck/pascals-triangle\nDerivative Solver in C # https://github.com/JakeRoggenbuck/derive\nCalculate the integral of a function in C # https://github.com/JakeRoggenbuck/integrate\nNewtons method in C # https://github.com/JakeRoggenbuck/newtons-method\nApproximate Pi # https://github.com/JakeRoggenbuck/approximate-pi\n","date":"4 June 2024","permalink":"/math/","section":"","summary":"I enjoy studying and learning math.","title":"Math"},{"content":"Space has always interested me. Here are a collection of projects that relate to space.\nSatellite Code # I am currently in the Space and Satellite Systems club at UC Davis. We are writing code for a Cube Sat in C.\nIntelliSat # https://github.com/JakeRoggenbuck/IntelliSat\nIntelliSat_Prototype # https://github.com/JakeRoggenbuck/IntelliSat_Prototype\nSatellite-c # https://github.com/JakeRoggenbuck/satellite-c\nOther Code # Cosmic Ray Detector # https://github.com/JakeRoggenbuck/cosmic-ray-detector\nFuture project ideas # Build a reflecting telescope ","date":"4 June 2024","permalink":"/space/","section":"","summary":"Space has always interested me.","title":"Space"},{"content":"A collection of monthly summaries comprised of particular projects, progress, and discoveries I\u0026rsquo;ve found to be noteworthy.\n","date":"20 May 2024","permalink":"/devlogs/","section":"Dev Logs","summary":"A collection of monthly summaries comprised of particular projects, progress, and discoveries I\u0026rsquo;ve found to be noteworthy.","title":"Dev Logs"},{"content":" Machine Dependent Programming # All of this code is private because it was homework.\nI got to use x86-64 Assembly and RISC-V. I learned so much from this class and I will continue to write lots of Assembly.\nMore to add here later.\n","date":"20 May 2024","permalink":"/devlogs/may-2024/","section":"Dev Logs","summary":"Machine Dependent Programming # All of this code is private because it was homework.","title":"May 2024"},{"content":"These are the top 5 most useful git commands that I use almost every day. Out of the 30+ git command aliases I have, these are the for sure the best 5! Please let me know in the comments which ones you like the best!\nHere is the post on my dev.to page.\nIf you have a favorite command of your own, please share in the comments! I\u0026rsquo;ll highlight my favorite ones!\n1. Git List (GLS) # View a super short summary of the most recent commits. Instead of filling the page with just a few commits, view each commit in a single line.\ngit log --pretty=oneline --abbrev-commit I have this aliased to gls with\nalias gls=\u0026#39;git log --pretty=oneline --abbrev-commit\u0026#39; 2. Push Origin (PUSHO) # Push to the current default branch. This one is simple, but I use this one the most.\ngit push origin $(git symbolic-ref --short HEAD) I have this aliases to pusho in my .bashrc with\nalias pusho=\u0026#39;git push origin $(git symbolic-ref --short HEAD)\u0026#39; 3. Git logg (LOGG) # View an ascii art history of all of the branches.\ngit log --graph --decorate --all I have this aliased to logg with\nalias logg=\u0026#39;git log --graph --decorate --all\u0026#39; 4. Git Diff Precise (GDP) # Have you ever been looking at a git diff and it just tells you the whole line is different? Well, this command tells you exactly what characters have changed. Extremely helpful for catching issues in review or remembering exactly what you changed in a large line.\nBefore # After # This is a simple example and it\u0026rsquo;s easy to see what has changed, but if you had a really complicated line with a few different changes in different places, it can be hard to catch. Say an SQL command or similar.\nHere is how to do it!\ngit diff --word-diff=color --word-diff-regex=. I have this aliased to gdp with\nalias gdp=\u0026#39;git diff --word-diff=color --word-diff-regex=.\u0026#39; 5. The MOST useful of all (lookz) # Have you ever tried looking through a whole git history to try to find where you added or removed something? Has a line gone missing or a type changed that has caused an issue in production that you need to fix ASAP! Looking through each commit for a single line may take hours with a big repository. This allows you to search through every commit and use FZF to do it.\nThis does require you to have fzf installed, but I recommend having that anyway. It\u0026rsquo;s super useful for this type of thing.\ngit remote \u0026amp;\u0026amp; git log --pretty=oneline --abbrev-commit \\ | awk \u0026#39;{print $1}\u0026#39; \\ | xargs -I {} git show {} | fzf I have this aliased to lookz with\nalias lookz=\u0026#39;git remote \u0026amp;\u0026amp; git log --pretty=oneline --abbrev-commit | awk \u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39;{print $1}\u0026#39;\u0026#34;\u0026#39;\u0026#34;\u0026#39; | xargs -I {} git show {} | fzf\u0026#39; Note the single quotes having to be escaped with '\u0026quot;'\u0026quot;' in the bash alias version but not the one directly for the shell.\nI need help making this command more useful. It lets you find a specific name of something that can then be used to search, but once it\u0026rsquo;s selected, you can\u0026rsquo;t find the commit. If anyone knows how to do this, please leave a comment!\n","date":"5 May 2024","permalink":"/posts/5-best-bash-commands/","section":"Posts","summary":"These are the top 5 most useful git commands that I use almost every day.","title":"5 BEST Git Commands"},{"content":" HackDavis - Hackathon # HackDavis is hosts a yearly hackathon at UC Davis.\nWhat my team built # Safe Drive AI - Make three different OpenCV models for lane detection, human obstacle detection, and driver alertness detection.\nGithub\nHere is our DevPost too.\nClubly Speed Improvements # I reduced the amount of data sent on each search and this resulted in a statistically significant speed improvement of 0.02 seconds, so 20 milliseconds on production which is 120% improvement for free.\nhttps://api.clubly.org/api/v1/clubs 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [00:16\u0026lt;00:00, 3.06it/s] 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 50/50 [00:14\u0026lt;00:00, 3.53it/s] current.std()=0.0757401695006395 reduced.std()=0.009859827712916693 current.mean()=0.24328888000000004 reduced.mean()=0.20660545999999996 t_stat=3.361959534140494 p_value=0.001104776517782507 Here is the code to test this.\n# ... def current_prod_test(): data = { \u0026#34;keywords\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;limit\u0026#34;: 100, } times = [] for x in tqdm(range(50)): res = requests.post(URL, data=data) time = res.elapsed.total_seconds() times.append(time) return times def reduced_prod_test(): data = { \u0026#34;keywords\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;limit\u0026#34;: 100, \u0026#34;reduced\u0026#34;: True } times = [] for x in tqdm(range(50)): res = requests.post(URL, data=data) time = res.elapsed.total_seconds() times.append(time) return times # ... def prod_experiment(): print(URL) current_data = current_prod_test() reduced_data = reduced_prod_test() current = np.array(current_data) reduced = np.array(reduced_data) print(f\u0026#34;{current.std()=}\u0026#34;) print(f\u0026#34;{reduced.std()=}\u0026#34;) print(f\u0026#34;{current.mean()=}\u0026#34;) print(f\u0026#34;{reduced.mean()=}\u0026#34;) t_stat, p_value = stats.ttest_ind(current, reduced) print(f\u0026#34;{t_stat=} {p_value=}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: prod_experiment() all-the-NaN-floats # Write all of the NaN floats from IEEE 754 32 bit floats to disk.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { FILE *fp; fp = fopen(\u0026#34;all-the-nan-floats\u0026#34;, \u0026#34;wb\u0026#34;); // This is first number where all the exponent bits are set, but nothing // else is set except the first bit, otherwise it would be infinity or zero unsigned int start = (0b011111111 \u0026lt;\u0026lt; 23) + 1; // This is number where all the bits have been set except the sign bit unsigned int end = (1 \u0026lt;\u0026lt; 31) - 1u; int counter = 0; do { // Write the positive value fwrite(\u0026amp;start, sizeof(unsigned int), 1, fp); start = -start; // Write the negative value fwrite(\u0026amp;start, sizeof(unsigned int), 1, fp); start = -start; start++; // Count twice for the two writes counter++; counter++; } while (start \u0026lt; end); printf(\u0026#34;Wrote %d NaN floats\\n\u0026#34;, counter); } This was for fun and to learn more about IEEE floating point numbers.\nLots of leetcode! # I got to 400 problems solved!\nVector C # Vector math in C\nGithub\n","date":"30 April 2024","permalink":"/devlogs/april-2024/","section":"Dev Logs","summary":"HackDavis - Hackathon # HackDavis is hosts a yearly hackathon at UC Davis.","title":"April 2024"},{"content":"","date":"23 March 2024","permalink":"/tags/none/","section":"Tags","summary":"","title":"None"},{"content":"\n🥨 Pretzel # Live deployed build: https://pretzelai.github.io\nPretzel is an open-source, offline browser-based tool for fast and intuitive data exploration and visualization. It can handle large data files, runs locally in your browser, and requires no backend setup. Pretzel makes it easy to manipulate data via visual chained data transform blocks. It\u0026rsquo;s also reactive - chaging an tranform block in the chain automatically updates all transform blocks and charts that follow.\nFeatures # 🚀 Blazing-fast performance with WebAssembly-based DuckDB and PRQL 🔍 Intuitive data exploration with a visual, top-down pipeline of data transformations and visualizations 🧠 AI-powered transformation block to help with fast data manipulation 🔒 Privacy-first design: run Pretzel AI locally or host it yourself for full control over your data 📊 Upcoming features: Local LLM support, API calls, in-browser Python support with Pyodide, save and share workflows securely and canvas based table rendering Table of Contents # Demo video Getting started Website (Easiest) Offline standalone app Developers Run locally Host Pretzel Optional Configuration Implemented Transformation Blocks Known Bugs Contact Demo video # https://github.com/pretzelai/pretzelai/assets/161899563/cb5b0f00-4add-40e8-b0c8-f59a0186e3ff\nGetting Started # Website (Easiest) # The easiest way to use Pretzel is to visit https://pretzelai.github.io\nOffline standalone app # Since Pretzel doesn\u0026rsquo;t have a backend you can easily install it as a Chrome app and it will work even without internet (for those long flights!)\nVisit https://pretzelai.github.io in Chrome\nClick the install app icon Now you can launch Pretzel as a standalone app. It will also work offline, it may error if you try to use some internet feature (like the AI Block), just close it and open it again to fix it Developers # Run locally # To run Pretzel locally, follow these steps:\nClone the repository:\ngit clone https://github.com/pretzelai/pretzelai.git Install dependencies:\ncd pretzelai npm install Start the development server:\nnpm run start Open your browser and navigate to http://localhost:3000\nHost Pretzel # To host Pretzel, follow these steps (it\u0026rsquo;s just a static website!):\nBuild the app npm run build Upload the contents of the dist folder to your hosting. This is what you can find live at https://pretzelai.github.io Optional configuration # Bug report box: Update /src/lib/config.ts with your PostHog config to let users report bugs directly on the website AI Endpoint: Deploy a cloud function to provide an AI endpoint for users without an OpenAI API key. Check the cloud folder for instructions. Implemented transformation blocks # Upload: accepts CSV / Excel (XLSX) files Filter: string/number/date filtering including nested filters Ask AI: connects to OpenAI to transform user command to SQL Pivot: to create a pivot table (you can also go group-by using this - only use the Rows and Values fields) Sort: sorts ascending or descending on multiple columns Chart: supports line (including multi-line) charts, bar charts (grouped and stacked) and scatter plot Create column: make a new column with basic math or use PRQL functions Remove columns: easily add/remove columns with visual toggles Table: add a table in the middle of your workflow to visualize data in a intermediate step Download: export your transformed data in CSV Known Bugs # Dates are sometimes parsed incorrectly - existing GH issue here Table panel is slow for large datasets. We\u0026rsquo;re planning on moving to a canvas based table [Rare] Charts axes can sometimes not be ordered correctly Please report any bugs you find in GitHub issues.\nContact # You can email us at founders [at] withpretzel [dot] com.\nWe also read all the feedback and bugs you report at the top left of https://pretzelai.github.io\n","date":"23 March 2024","permalink":"/projects/pretzelai/","section":"Projects","summary":"","title":"pretzelai"},{"content":"","date":"23 March 2024","permalink":"/projects/","section":"Projects","summary":"","title":"Projects"},{"content":"\nlinear-regression-rs # Super simple linear regression library in Rust ( 🦀 ).\nInstallation # Add this to your Cargo.toml:\n[dependencies] linear_regression_rs = { path = \u0026#34;../linear-regression-rs\u0026#34; } Usage # Here\u0026rsquo;s a quick example to get you started:\nuse linear_regression_rs::{LinearFrame, Regression}; fn main() { let mut frame = LinearFrame { x: vec![1.0, 2.0, 3.0, 4.0, 5.0], y: vec![1.0, 2.0, 4.0, 4.0, 5.0], verbose: true, }; let (slope, b) = frame.regression(1000, 0.01); println!(\u0026#34;Model: y = {}x + {}\u0026#34;, slope, b); } API # fn squared_error(\u0026amp;mut self, f: \u0026amp;dyn Fn(f64) -\u0026gt; f64) -\u0026gt; f64; fn mean_squared_error(\u0026amp;mut self, f: \u0026amp;dyn Fn(f64) -\u0026gt; f64) -\u0026gt; f64; fn gradient_descent(\u0026amp;mut self, slope: f64, b: f64, learning_rate: f64) -\u0026gt; (f64, f64); fn regression(\u0026amp;mut self, epoch: i32, learning_rate: f64) -\u0026gt; (f64, f64); Contributing # Contributions are welcome! Please feel free to submit a pull request or open an issue if you have suggestions or find a bug.\nLicense # This library is released under the MIT License. See the LICENSE file for more details.\n","date":"9 March 2024","permalink":"/projects/linear-regression-rs/","section":"Projects","summary":"","title":"linear-regression-rs"},{"content":"","date":"9 March 2024","permalink":"/tags/rust/","section":"Tags","summary":"","title":"rust"},{"content":"\nFormat filename # Format filenames to a command-line friendly format\nWhy? # I often find myself in the command-line running programs like Neovim (aliased to v) on text files or Zathura on PDF files. I usually name files with underscores, as it\u0026rsquo;s easier to type out than a space when using the command-line. Similarly, I often don\u0026rsquo;t use slashes, parentheses, or any other character that needs to be excaped for the reason of not having to type out more than needed. However, not all files are named this way by default, so this program makes it easier to change it quickly. It\u0026rsquo;s also a good excuse to write something in Rust ( 🦀 ).\nUsage # formatfilename 0.1.0 Format filenames to a command-line friendly format USAGE: formatfilename \u0026lt;filename\u0026gt; FLAGS: -h, --help Prints help information -V, --version Prints version information ARGS: \u0026lt;filename\u0026gt; Input file ","date":"17 January 2024","permalink":"/projects/format-filename/","section":"Projects","summary":"","title":"format-filename"},{"content":"","date":"24 December 2023","permalink":"/tags/javascript/","section":"Tags","summary":"","title":"javascript"},{"content":"\nTrig Function Viewer # Create a visualization of the Sine and Cosine functions on the Unit Circle using p5.js\n","date":"24 December 2023","permalink":"/projects/trig-function-viewer/","section":"Projects","summary":"","title":"trig-function-viewer"},{"content":"\nBasis (math language) # A math console language with a bunch of useful functions and constants\nInterpreter Progress # The lexer has been completed. Next up is the parser and code gen.\nSyntax # Note: The \u0026gt; at the start of the line is the prompt. This prompt will evaluate the line and then display the value of the console attribute.\nExpressions # Basis supports simple expressions like addition through the summation function (See more about functions below), which takes exactly two arguments on the left.\n\u0026gt; 1 1 + int: 2 Note: 1 1 + is called an anonymous expression because it is not given a name.\nBasis supports fraction representation as the default for rational numbers. Rationals stay as fractions until you convert to a float (See more below).\n\u0026gt; 2 3 / ratio: 2 / 3 Basis allows you to convert fractions to decimal with the decimal . function which operates on one rational to the left.\n\u0026gt; (2 5 /) . dec: 0.4 The precision of rations can be specified, they default to 32 bit max, but can be set with the tilde function. The shorthand prec will show the precision of the ratio in the console.\n\u0026gt; (1 3 /) ~ ratio (prec 1): 1 / 3 \u0026gt; (1 3 /) ~ . dec: 0.3 Variables # Number types # There are many types along with the number type which cannot be instantiated but which gets derived from by every type listed below called the \u0026ldquo;number types\u0026rdquo;\nint ratio real dec complex imaginary size \u0026gt; a int 5 = a = int: 5 \u0026gt; b ratio (3 4 /) = b = ratio: 3 / 4 Zero in any number type, when cast to a bool is false\nMethods on number types # Every number type, has a method to turn each number type into any other number type. If this method is called, is saves the value of the newly casted value into it\u0026rsquo;s own data so that it can be called again with no expense. This is a speed vs memory tradeoff.\nLiteral # Literal can wrap the number type and other types. It essentially is like a normal variable, but instead of being included in the expression execution, it stays a literal.\n\u0026gt; mynum literal (3 4 /) = literal: mynum \u0026gt; mynum unwrap ratio: 3 / 4 Why have a literal like this? Sometimes you may want to apply functions to an expression but not get a specific decimal or other numeric output, you may want another expression with the literals still persisting. Say if you wanted to take an expression 0 cos and multiply it by pi, instead of getting 3.14... you would get pi (because 0 cos is 1), the literal is not evaluated until you unwrap it by doing 0 cos pi * unwrap to get some decimal representation of pi.\nStrings # \u0026gt; \u0026#34;hello\u0026#34; string: \u0026#34;hello\u0026#34; -\u0026gt; \u0026#34;size: 6\u0026#34; Size # The size type is a special type around the real type that denotes that it is a size of another type\n\u0026gt; 4 size size: 4 Why is the size in double quotes? The tuple syntax and it\u0026rsquo;s console attribute has its size in the tuple parentheses, so it seems only natural that the console attribute for string would also be have its size in the characters that surround its instantiation.\nLate initialization # \u0026gt; a int = a = late: int The late type # The late type is a wrapper around the option type, making any late initialization not of the type of the vairable, but of type late, which is just a wrapper for the option type, so late initialized types are all basically options (but technically of type late).\nAfter adding a value to a variable defined as a late type, it just becomes the type that late was given as a genetic. E.g. a int = is a late type passed int as a generic.\nProvided Constants (of type literal) # A few constants are provided such as g (Gravity of Earth), e (Euler\u0026rsquo;s number), pi (Pi), h (Planck constant)\n\u0026gt; e literal: e \u0026gt; pi literal: pi \u0026gt; pi 0 ~ literal (prec 0): 3 \u0026gt; pi 0 ~ . dec: 3 \u0026gt; pi 1 ~ . dec: 3.1 \u0026gt; pi desc \u0026#34;Ratio of a circle\u0026#39;s circumference to it\u0026#39;s radius\u0026#34; \u0026gt; e . dec: 2.718281828459045 Bool # The bool type is either true or false\n\u0026gt; a bool true = a = bool: true Nil type # The nil type is a type of type nil\nWhen cast to a bool, it becomes false later referred to as a fasle type\nMore math functions # Multiplication # Used with *.\nMultiplication can be applied to a vector as a scalar)\nI/O functions # print # The print function operated on the type type\n\u0026gt; a int 1 = a = int: 1 \u0026gt; a print 1 input # \u0026gt; a int = a = nil \u0026gt; a input = a = \u0026lt;value provided by input\u0026gt; ~ or more concisely ~ \u0026gt; a int input = Comments # Comments are done like the following with a space before and after any text inside the comment as an homage to Cruz Lang and later Planck Lang and Z-Flat along with many more.\n\u0026gt; ~~ hello world ~~ comment: ~~ hello world ~~ Comments are the comment type and can be converted into the string type\nFunctions # Functions in basis can be created with the following syntax\n\u0026gt; f (x int) =: x 1 + function: f (int) -\u0026gt; int \u0026gt; 1 f 2 Option # The option type is a wrapper for any type which has an attribute exists which is a bool.\nThere are two methods specific to option, some and none inspired by Rust. The some method is equivalent to comparing the exists attribute to true and the none method is evaluated to comparing the exists to false.\nThe option type has an attribute called value which is of type type and is defined generically as seen in the section about generic types.\nThe option type will return the exists bool when cast into a bool\nClosures # The function syntax may seem weird at first, but when given the closure syntax, it makes slightly more sense.\nSingle line closure # The following is a new closure (scope) that is evaluated as an expression\n\u0026gt; : (1 1 +) closure: 1 1 + \u0026gt; : (1 1 +) unwrap int: 2 Multi-line closure # The following is a new multi-line closure (scope) that is evaluated as an expression as well\n\u0026gt; { 1 1 + } closure: 1 1 + \u0026gt; { 1 1 + } unwrap int: 2 The unwrap function # Many types are wrappers, like literal, closure, option. The unwrap function takes a type of type (i.e. any type) and unwraps the type to its inner type.\nGeneric Types # Since number cannot be initialized, if we want to write a function that works for any number, we must write a function using the generic syntax that allows any of the types specified by the syntax to operate on. Generic types are only allowed in function and can only be initialized as parameters.\n\u0026gt; f (x \u0026lt;number\u0026gt;) x \u0026lt;1\u0026gt; + function: f (\u0026lt;number\u0026gt;) -\u0026gt; \u0026lt;number\u0026gt; Do types have attributes or method or both? # All attributes are actually functions (lazily loaded when specified to be so)\n\u0026gt; (3 4 /) . ~ create a ratio of 3 / 4 and then call the . function to cast it into a decimal type ~ dec: 0.75 \u0026gt; a (3 4 /) = a = ratio: 3 / 4 \u0026gt; a . ~ cast a into a decimal type, also stores the decimal representation of a into a ~ dec: 0.75 \u0026gt; a . ~ load the existing decimal cast of value a ~ dec: 0.75 Note: a . would be called an anonymous expression because it is not given a name.\nAny use of the generic type in the type declaration must be wrapped in \u0026lt; \u0026gt; and any actual creation of data must also be wrapped in \u0026lt; \u0026gt;, which when evaluated will be cast into the type provided to the function. (E.g. 2 f where 2 is an int, will return 3 because internally the \u0026lt;1\u0026gt; was cast to an int with 1 int)\nMaking custom types # TODO Deriving from types # TODO Vectors # Vectors in basis are like mathematical vectors by default but can also be used as containers\n\u0026gt; [1 2 3] vector[int]: [1 2 3] -\u0026gt; [size: 1x3] Multidimensional vectors\n\u0026gt; [1 2 3; 2 3 4; 3 4 5] vector[int]: [[1 2 3] [2 3 4] [3 4 5]] -\u0026gt; [size: 3x3] Vector operations + and -\n\u0026gt; [1 2] [2 3] + vector[int]: [3 5] -\u0026gt; [size: 1x2] \u0026gt; [1 2] [2 3] - vector[int]: [-1 -1] -\u0026gt; [size: 1x2] Dot product in basis\n\u0026gt; [1 2 3] [2 3 4] . vector[int]: [2 6 12] -\u0026gt; [size: 1x3] Containers # The vector type is a type of container, but basis also has support for tuple and set, both of which are derived from container.\n\u0026gt; [2 3 4 5 5] vector[int]: [2 3 4 5 5] -\u0026gt; [size: 1x5] \u0026gt; (2 3 4 5 5) tuple[int]: (2 3 4 5 5) -\u0026gt; (size: 5) \u0026gt; {2 3 4 5 5} set[int]: (2 3 4 5) -\u0026gt; {size: 4} There are more containers like sample and population for statistics described below.\nStatistics # Mean of a vector, tuple, or set. For simplicity, this function is shown described with only the ratio type, but the real definition would be written for the number type with the generic type syntax.\n\u0026gt; mean (c container[ratio]) =: sum: ratio = 0 count: int = 0 for x: ratio in c { sum x += count 1 + count += } \u0026gt; [1 2 3] mean ratio: 2 \u0026gt; (1 2 3) mean ration: 2 Sample and Population # The sample and population types are very similar in that they wrap the tuple type. They are useful because the statistical functions (as described in this section) apply to both of them differently.\nStatistical tests\n\u0026gt; a (1 2 3) sample = ~ creates a tuple, casts it to a sample type, assign it to a ~ a = sample: (1 2 3) -\u0026gt; (size: 3) \u0026gt; b (1 2 4) sample = ~ creates a tuple, casts it to a sample type, assign it to b ~ b = sample: (1 2 4) -\u0026gt; (size: 3) \u0026gt; test a b ttest = test = ttestresult: (pvalue: 0.768) (t: -0.316) \u0026gt; test pvalue dec: 0.768 Scripting in basis # Entire scripts can be written outside of the REPL to be saved and run.\nminecraft_coord_convert.basis\noverworld_to_neither(coords vector[int]) =: 8 coords * neither_to_overworld(coords vector[int]) =: coords 8 / out_coords [100, 40, 10] overworld_to_neither = out_coords print Magic # You may have noticed that the previous examples all have a console. How does the console know what to display below each line? Well, it is[1] lazily computed when any type is created. Any type derived from type have a few common attributes that are either lazily loaded if they are specific to the instance (e.g. like the representation for the console (console representation), or the printable representation). Other attributes like desc are pointers to a constant shared description that is the same for in instance of any type. This might be something like the desc for int, \u0026ldquo;Integer numeric type that stores whole positive and negative numbers\u0026rdquo;. The console attribute is actually a function and may use the printable attribute (which is also a function). For example, printable for an int might be \u0026ldquo;1\u0026rdquo;, and the console will be \u0026quot;int: {}\u0026quot; printable, which in full form will look like console (): \u0026quot;int: {}\u0026quot; printable\n[1] Note: This is just the document outlining the implementation, the implementation is not yet written, so technically it isn\u0026rsquo;t lazily loaded yet, but will be when the implementation is written in it\u0026rsquo;s entirety. Other instances of \u0026ldquo;is\u0026rdquo; statements may be the same case.\n","date":"16 December 2023","permalink":"/projects/basis/","section":"Projects","summary":"","title":"basis"},{"content":"\ncolor-valgrind # Highlight important information from the already great valgrind\nWhy? # I often switch quickly between valgrind output and code. This leads to me lossing my place often. I also re-run valgrind many times in s short period of time, leading to me having to find what I was looking at previously to compare. All of this is a bit easier with colorful out.\nNew # Previously # Install # git clone https://github.com/JakeRoggenbuck/color-valgrind.git cd color-valgrind cargo install --path . ","date":"12 November 2023","permalink":"/projects/color-valgrind/","section":"Projects","summary":"","title":"color-valgrind"},{"content":"","date":"1 October 2023","permalink":"/tags/frontend/","section":"Tags","summary":"","title":"frontend"},{"content":" Preface # React is extremely popular and has become ubiquitous in frontend development. There are many reasons you would want to learn React. It\u0026rsquo;s used in industry, it\u0026rsquo;s a required skill in many applications for job, and it\u0026rsquo;s a great tool to use to build amazing projects. Here is a simple list of tips and resources to help you understand React. If you\u0026rsquo;ve used the terminal before, you can safely jump into Starting my project otherwise the next section will guide you threw it.\nFirst steps # The first step is to jump right in an make a project! For this, you\u0026rsquo;re going to have to use the terminal. When you first open your terminal, you should be in your \u0026ldquo;home\u0026rdquo; folder. It\u0026rsquo;s usually named after your username.\nOpen your terminal and navigate (using cd and ls) to the place where you keep all of your code. If you don\u0026rsquo;t have a specific place, make a folder in your Documents folder, and call it Code. You can do this by running cd Documents then running mkdir Code\nNavigate into the Code folder using cd Code\nStarting my project # You may need to install npx. Now it comes with npm, so make sure you have that installed along with node. That\u0026rsquo;s a lot to keep track of, so if you\u0026rsquo;re just starting out, you can just install node and everything should be installed with it. If you are on linux, you can use your package manager to install node if it\u0026rsquo;s not included, if you do not use linux, you can use this link https://nodejs.org/en/download.\nI highly recommend learning by doing. Let\u0026rsquo;s start a small learning project to test out React. To start, type out the following command in the directory you save coding projects in. This will create a basic template for us to add to. It will name the folder \u0026ldquo;my-app\u0026rdquo;. It may take some time (a few minutes).\nThe following will run the program called create-react-app, which creates the app. Here is their website about it create-react-app.dev. Do note, that it\u0026rsquo;s no longer recommended by the React team [1].\nnpx create-react-app my-app Now that it\u0026rsquo;s done, cd my-app into the project to start coding!\nRun the command cd src to see the main source code for your new project.\nIf you run ls, you should see the following files.\nApp.css App.js App.test.js index.css index.js logo.svg reportWebVitals.js setupTests.js You can safely ignore everything but App.js.\nOpen App.js in your favorite text editor.\nYou should see the following.\nimport logo from \u0026#39;./logo.svg\u0026#39;; import \u0026#39;./App.css\u0026#39;; function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;header className=\u0026#34;App-header\u0026#34;\u0026gt; \u0026lt;img src={logo} className=\u0026#34;App-logo\u0026#34; alt=\u0026#34;logo\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Edit \u0026lt;code\u0026gt;src/App.js\u0026lt;/code\u0026gt; and save to reload. \u0026lt;/p\u0026gt; \u0026lt;a className=\u0026#34;App-link\u0026#34; href=\u0026#34;https://reactjs.org\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; \u0026gt; Learn React \u0026lt;/a\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; This is the basic source code. There are three main parts to it.\nFirst, the imports. These tell the interpreter where resources are located, like our CSS files and images, but also other javascript files.\nimport logo from \u0026#39;./logo.svg\u0026#39;; import \u0026#39;./App.css\u0026#39;; Secondly, the function in jsx. Here I have removed all of the html-like code and just kept the function. These two parts are the basis for all of it.\nfunction App() { return ( // ... ); } export default App; Before we look at the third part, let\u0026rsquo;s add a simple text field.\nfunction App() { return ( \u0026lt;p\u0026gt;Hello!\u0026lt;/p\u0026gt; ); } export default App; The third part is the html-like code we removed in the second example (where the ellipsis is). Here is what that looks like.\n\u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;header className=\u0026#34;App-header\u0026#34;\u0026gt; \u0026lt;img src={logo} className=\u0026#34;App-logo\u0026#34; alt=\u0026#34;logo\u0026#34; /\u0026gt; \u0026lt;p\u0026gt; Edit \u0026lt;code\u0026gt;src/App.js\u0026lt;/code\u0026gt; and save to reload. \u0026lt;/p\u0026gt; \u0026lt;a className=\u0026#34;App-link\u0026#34; href=\u0026#34;https://reactjs.org\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener noreferrer\u0026#34; \u0026gt; Learn React \u0026lt;/a\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; One common point of confusion is that this is HTML. It close, but not exactly. It\u0026rsquo;s called jsx. It\u0026rsquo;s kinda like a combination of JS and HTML. It makes it really easy to write frontend.\nNow that we have looked at the code, go back to that App.js and try to predict what you will see when we open the page.\nLet\u0026rsquo;s open the page. Go back to your terminal, navigate back to the my-app folder, run the following command to install the needed requirements.\nnpm install Note: you can do npm i for short.\nNext is to run it! Do so by running the following\nnpm run start The page should now automatically open in your browser!\nYou should see this the React logo with some text that says Edit src/App.js and save to reload..\nYou\u0026rsquo;ve created a project!\nNext level # It\u0026rsquo;s now your chance to take this to the next level. Make something interesting! Try things out!\nHere are some resoruces to help on your journey.\nReact # Getting started with React React Quick Start React.js Cheatsheet JavaScript # MDN Docs Basics Typescript # Handbook (New Programmers) Handbook (For JS Programmers) Learn Typescript ","date":"1 October 2023","permalink":"/posts/learning-react/","section":"Posts","summary":"Preface # React is extremely popular and has become ubiquitous in frontend development.","title":"Learning React"},{"content":"","date":"1 October 2023","permalink":"/tags/react/","section":"Tags","summary":"","title":"react"},{"content":"\njml # JABACAT-created machine learning library from scratch.\n","date":"18 September 2023","permalink":"/projects/jml/","section":"Projects","summary":"","title":"jml"},{"content":"\nTaxonomy Search # Taxonomy search using SolidJS, FastAPI, Tailwind, and the full ITIS database\nImage # ","date":"22 July 2023","permalink":"/projects/taxonomy-search/","section":"Projects","summary":"","title":"taxonomy-search"},{"content":"","date":"12 July 2023","permalink":"/tags/c/","section":"Tags","summary":"","title":"C"},{"content":"\nComputer Systems Oribtal # Welcome to code respository for the Space And Systems Satellite Club\u0026rsquo;s REALOP 1 Flight Software! The code here will be run on our flight computer, the Orbital Platform, which will be responsible for controlling and monitoring the CubeSat\u0026rsquo;s various subsystems. Details regarding the Orbital Platform are available on this github repository: uwu64/orbital-platform.\nNOTE: Several images of the board or connectors aren\u0026rsquo;t attached yet since the Orbital Platform is back in Davis. Wait a few weeks and the images will be here.\nREALOP 1 # NEEDS TO BE FILLED OUT\nGetting Started # To get started with our code, you\u0026rsquo;ll need to have a basic understanding of C programming and the tools we\u0026rsquo;re using. You\u0026rsquo;ll need to follow the instructions listed in the following sections:\nPrerequisites \u0026amp; Requirements Setting up the Intellisat Project Developing on the Physical Board Resources # The folder Reference_Manuals contains pdf copies of the reference manuals, datasheets, and programming guides of the various chips on the Platform.\nEGit Tutorial DoxyGen API Doc (NOT ADDED YET) ","date":"12 July 2023","permalink":"/projects/intellisat/","section":"Projects","summary":"","title":"IntelliSat"},{"content":"\nmore-than-half # Given an array of slightly less than half random numbers and slightly more than half of one specific number, find the the number that makes up slightly more than half. Below are the speeds of multiple different algorithms to do this.\nResults # find_more_than_half_naive_hashmap_approach:\tμ: 367376311.2 nanos, σ: 68236547.97368439, n: 30, reps: 100 find_more_than_half_array_index_approach:\tμ: 9152388.3 nanos, σ: 1705146.465021606, n: 30, reps: 100 find_more_than_half_array_index_approach_iter_max:\tμ: 9270903.3 nanos, σ: 1726418.191527093, n: 30, reps: 100 find_more_than_half_probability_approach:\tμ: 313865.73333333334 nanos, σ: 59295.28083972807, n: 30, reps: 100 ","date":"10 July 2023","permalink":"/projects/more-than-half/","section":"Projects","summary":"","title":"more-than-half"},{"content":" HackDavis - Hackathon # HackDavis is a hackathon group on UC Davis campus and organizes coding events.\nAggieWorks Presentation - Workshop # I presented a workshop with a group of other AggieWorks Product Managers about Product Management. I specifically talked about software development practices, agile, using git collaboratively, and other high level technical product manager topics and advice.\nMy hackdavis project # I didn\u0026rsquo;t have much time to write my project so I allocated an hour to work on it. My project slogan is Send a positive message to an Aggie! Simple can be powerful. It takes no effort to share kindness.. I am very proud of the idea here and I really liked experimenting with the OpenAI API to moderate messages.\nProjects # sxbsbamdws # The backlight brightness changing has not been working on my Arch Linux laptop and no tools could change the brightness, so I built my own tool. I have it the over-the-top acronym sxbsbamdws.\nOpenAI projects # So far, I have just experimented with the API to see how it can be used in the future. These are a lot of great tools to use here. I am very impressed. I remember using GPT2 when it came out on github in 2019 and running the docker for some text completion. It has come a long long way. I currently haven\u0026rsquo;t released any open source projects that include the use of the API but those are soon to be released.\n","date":"31 May 2023","permalink":"/devlogs/may-2023/","section":"Dev Logs","summary":"HackDavis - Hackathon # HackDavis is a hackathon group on UC Davis campus and organizes coding events.","title":"May 2023"},{"content":"","date":"21 May 2023","permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"\nUpLiftAggie # Send a positive message to an Aggie! Simple can be powerful. It takes no effort to share kindness.\nTechnical # Use OpenAI\u0026rsquo;s gpt-3.5-turbo model to determine if messages are positive for content moderation Use FastAPI to receive and store messages FastAPI Backend # Docs # ","date":"21 May 2023","permalink":"/projects/upliftaggie-hackdavis-2023/","section":"Projects","summary":"","title":"UpLiftAggie-HackDavis-2023"},{"content":"\nsxbsbamdws Simple X Backlight Substitute Because AMD Wasn\u0026rsquo;t Supported # At least not for me when I tried it a few months ago and have had none functioning backlight since.\nTODO # check if path exists and give error if not ","date":"6 May 2023","permalink":"/projects/sxbsbamdws/","section":"Projects","summary":"","title":"sxbsbamdws"},{"content":"\n404: Not Found\n","date":"2 May 2023","permalink":"/projects/gcovr/","section":"Projects","summary":"","title":"gcovr"},{"content":"\nComputer Systems Oribtal # Welcome to the GitHub repository for the Space And Systems Satellite Club\u0026rsquo;s Computer Systems Team! Our goal is to design and build a CubeSat that will be launched into space. This repository contains the code for our team\u0026rsquo;s computer systems, which will be responsible for controlling and monitoring the CubeSat\u0026rsquo;s various subsystems.\nGetting Started # To get started with our code, you\u0026rsquo;ll need to have a basic understanding of programming and the tools we\u0026rsquo;re using. We\u0026rsquo;re primarily using C++ for our code. You\u0026rsquo;ll also need to follow the instructions listed in the following sections:\nPrerequisites Running Locally Developing on the board Prerequisites # A list of software that must be installed before hand:\nSTM32CubeIDE:\nhttps://www.st.com/en/development-tools/stm32cubeide.html#get-software STM32 ST-LINK Utility:\nhttps://www.st.com/en/development-tools/stsw-link004.html Contributing # Contributions are always welcome!\nSee contributing.md for ways to get started.\nPlease adhere to this project\u0026rsquo;s code of conduct.\nRunning Locally # Create a personal access token # Go to\nhttps://github.com/settings/tokens Select\nGenerate new token-\u0026gt; Generate new token(classic) Under the \u0026ldquo;Select Scopes\u0026rdquo; check the boxes\nrepo gist After you will be given a randomly generated token MAKE SURE TO SAVE THE KEY.\nInstall EGit # Setup EGit in STM32CubeIDE\nNavigate to\nHelp-\u0026gt;Eclipse Marketplace In the \u0026ldquo;find:\u0026rdquo; search bar type\nEGit - Git Integration for Eclipse Hit install and restart STM32CubeIDE when complete.\nCloning the repository # Right click on \u0026ldquo;Project Explorer\u0026rdquo; and navigate to Import-\u0026gt;Git-\u0026gt;Projects from Git-\u0026gt;Clone URL. Enter in the \u0026ldquo;URL:\u0026rdquo; field\nhttps://github.com/rbretmounet/CS-Ortibal.git Enter in your github username under user and your github token under password. Click next until the project is imported.\nSetting up the project properties # The project properties must be configured so a .bin file is generated when the project is built. In order to so you must right click orbital_r1 and select properties at the bottom of the list. A new window should open and you must navigate to C/C++ Builds-\u0026gt;Settings-\u0026gt;MCU Post build outputs. Tick the boxe that says `Convert to binary file (-O binary).\nDeveloping on the board # Connecting the board # Connect the board to your computer\u0026rsquo;s USB port and open up STM32 ST-LINK Utility.exe. Navigate to Target -\u0026gt; Connect the device memory should popluate with addresses if successful.\nFlashing the board # Navigate to Target-\u0026gt;Program. The application with ask your for a file that ends in .bin,.srec, or .hex. If STM32CubeIDE is correctly configured See how to configure. These files are generated in the projects Debug folder. Navigate to the project directory ~/orbital_r1/Debug/ and select the file that ends in the correct file format.\n","date":"1 May 2023","permalink":"/projects/cs-ortibal/","section":"Projects","summary":"","title":"CS-Ortibal"},{"content":" Classes # Classes have been very great. I am currently taking an Assembly class, Discrete math, Calculus, and another student lead CS course about linux. These classes have been super helpful and fun and I\u0026rsquo;m learning a lot!\nMy favorite topic in my Assembly class is implementing algorithms with bitwise operations.\nMy favorite part of Discrete math is set theory and number theory. I also really like proofs. I foresee proof writing being really helpful for math research in the future.\nI really like Calculus. I am currently taking integral calculus and it\u0026rsquo;s been wonderful. My favorite topic is using integrals to calculate areas of shapes.\nMy student lead CS course has been great as well. I have been getting to use regex and unix tools more and that\u0026rsquo;s been helpful. I also learn about CUnit and it\u0026rsquo;s super great!\nClubly - AggieWorks # For the past few months, I have been leading a team of 10 software engineers as TPM to build a club discovery app called Clubly. Our code is currently closed source and will likely remain that way, but I can share the stack we are using.\nThis experience has been so amazing and I cannot say enough good things about AggieWorks as a whole. I have learned so much from my peers, they have been absolutely amazing.\nFor the backend, we are using Go and a framework called Fiber. For the frontend, we are using Svelte and Typescript. For the database, we are using postgresql.\nThese are all design decisions I am very happy about.\nI have used a Go + Svelte stack twice before and it\u0026rsquo;s really nice. The first time was a trial run to test the stack. This project is called Best Next Step and can be found at BestNextStep.org. The second was a project I made for the company I worked at over the summer of 2022 but I cannot share more detail than that.\nThere are a few learning takeaways from the early development of this project I would like to reflect on.\nFirstly, planning out your architecture and design in the start saves massive amounts of time in the mid/end development stages. We started with our database design first. Answering the question of \u0026ldquo;What data do we have\u0026rdquo; and \u0026ldquo;How do we store it\u0026rdquo;. This lead us to designing the backend routes. This was the first month of development.\nAfter this, we were able to move at light speed because we had confidence in our design and architecture. We have had no breaking changes in our design since, only small addendums. However, we remain able to change our data if it\u0026rsquo;s requested by shareholders.\nIn the last two months especially, we have been moving really quickly, getting tons of work done and I am so proud of the whole team. We have been deploying and testing since we started but our first publicly facing deployment will be on Clubly.dev and Clubly.org in the next few weeks. (Now released!)\nUsing Git Post # I wrote a post about Git for my AggieWorks/Clubly team to reference. I may turn some of these ideas into a full post.\nFuture projects # I got the domain afternow.dev for a project I have been thinking about for a few weeks. So far, it\u0026rsquo;s a landing page with a simple design I made, but expect some updates sometime in the next few months. I think this will be a tool I use all of the time. I will start to pretotype this to see if it\u0026rsquo;s something I will use and if it\u0026rsquo;s something other people will use. I don\u0026rsquo;t foresee this being super popular with the general public, but it may be a tool for the people who use tools like notion to keep themselves organized.\n","date":"30 April 2023","permalink":"/devlogs/april-2023/","section":"Dev Logs","summary":"Classes # Classes have been very great.","title":"April 2023"},{"content":" What your setup should look like (git remote -v) # origin\tgit@github.com:JakeRoggenbuck/ClubApp.git (fetch) origin\tgit@github.com:JakeRoggenbuck/ClubApp.git (push) upstream\tgit@github.com:aggieworks/ClubApp.git (fetch) upstream\tgit@github.com:aggieworks/ClubApp.git (push) Getting information # # list the remotes git remote -v # check your staging area git status # check commits git log Update from latest # # make sure you are on your own main and don\u0026#39;t have any current changes git switch main git pull upstream main Before a feature/assignment/change # This should be done before the start of any distinct feature or large change.\ngit switch main git pull upstream main git switch -c feature-name Submitting a feature/assignment/change # # add all changed but prevously staged files git add -u git commit git push origin feature-name ","date":"27 April 2023","permalink":"/posts/helpful-git-commands/","section":"Posts","summary":"What your setup should look like (git remote -v) # origin\tgit@github.","title":"Helpful Git Commands"},{"content":"\n404: Not Found\n","date":"25 April 2023","permalink":"/projects/random-idea-spinner/","section":"Projects","summary":"","title":"random-idea-spinner"},{"content":"\nexample-go-project-waves # Calculate wavelength from frequency or frequency from wavelength. This is an example for project for go learning after the hello world project.\nImage # This image actually shows that a frequency of 140Mhz is on the 2 Meter radio band.\n","date":"18 April 2023","permalink":"/projects/example-go-project-waves/","section":"Projects","summary":"","title":"example-go-project-waves"},{"content":"","date":"18 April 2023","permalink":"/tags/go/","section":"Tags","summary":"","title":"Go"},{"content":" Coming Soon - Devious Code Contest # I started the website for the soon to come Devious Code Contest found at deviouscc.org. This contest will happen sometime in the next year. The problems have been chosen and written but other details are still being decided.\nsatellite-c - Practice for writing satellite subsystems in C [link] # This was a super interesting project that is still in development. I join a club called Space and Satellite Systems and we will be writing code for a satellite in C.\n/* Build the task list and alloc the first chunk for the internal array */ struct TaskList *build_tasklist() { struct TaskList *l = malloc(sizeof(struct TaskList)); l-\u0026gt;size = 8; alloc_list(l); l-\u0026gt;index = 0; return l; } /* Allocate the internal array with the size */ void alloc_list(struct TaskList *l) { l-\u0026gt;task_list = malloc(l-\u0026gt;size * sizeof(struct Task)); } /* Add 8 to the size so that the alloc_list do so in chunks */ void add_list_chunk(struct TaskList *l) { l-\u0026gt;size += 8; } /* Add a task to the end of the internal array */ void add(struct TaskList *l, struct Task *t) { if (l-\u0026gt;index == l-\u0026gt;size) { add_list_chunk(l); alloc_list(l); } l-\u0026gt;task_list[l-\u0026gt;index] = t; l-\u0026gt;index++; } /* Get a task from the end of the internal array */ struct Task *pop(struct TaskList *l) { if (l-\u0026gt;index == 0) { return NULL; } l-\u0026gt;index--; return l-\u0026gt;task_list[l-\u0026gt;index]; } int empty(struct TaskList *l) { return l-\u0026gt;index == 0; } Updating the LocalList [link] # I added some small UI changes to give it a more modern look. New more centered logo and better borders around the elements and below the search bar.\nNew on left - Old on right\nreadme - Create readme files with one command [link] # void create_readme(char *fname) { char cwd[PATH_MAX]; if (getcwd(cwd, sizeof(cwd)) != NULL) { char *dirname = last_dir(cwd); FILE *f; f = fopen(\u0026#34;README.md\u0026#34;, \u0026#34;w\u0026#34;); if (f == NULL) { printf(\u0026#34;Unable to create file.\\n\u0026#34;); exit(1); } fputs(\u0026#34;# \u0026#34;, f); fputs(dirname, f); fputs(\u0026#34;\\n\u0026#34;, f); } else { perror(\u0026#34;getcwd() error.\\n\u0026#34;); } } # ","date":"31 March 2023","permalink":"/devlogs/march-2023/","section":"Dev Logs","summary":"Coming Soon - Devious Code Contest # I started the website for the soon to come Devious Code Contest found at deviouscc.","title":"March 2023"},{"content":"\nnobuild # Header only library for writing build recipes in C.\nMain idea # The idea is that you should not need anything but a C compiler to build a C project. No make, no cmake, no shell, no cmd, no PowerShell etc. Only C compiler. So with the C compiler you bootstrap your build system and then you use the build system to build everything else.\nTry it out right here:\n$ cc ./nobuild.c -o nobuild $ ./nobuild Explore nobuild.c file and the examples folder to learn more.\nThis is an Experimental Project # I\u0026rsquo;m not sure if this is even a good idea myself. This is why I\u0026rsquo;m implementing it. This is a research project. I\u0026rsquo;m not making any claims about suitability of this approach to any project.\nRight now I\u0026rsquo;m actively using nobuild only in bm. It works quite well for me there.\nIt\u0026rsquo;s likely Not Suitable for Your Project # If you are using cmake with tons of modules to manage and find tons of dependencies you probably don\u0026rsquo;t want to use this tool. nobuild is more like writting shell scripts but in C.\nAdvantages of nobuild # Extremely portable builds across variety of systems including (but not limited to) Linux, MacOS, Windows, FreeBSD, etc. This is achieved by reducing the amount of dependencies to just a C compiler, which exists pretty much for any platform these days. You end up using the same language for developing and building your project. Which may enable some interesting code reusage strategies. The build system can use the code of the project itself directly and the project can use the code of the build system also directly. You get to use C more. \u0026hellip; Disadvantages of nobuild # You need to be comfortable with C and implementing things yourself. As mentioned above this is like writing shell scripts but in C. It probably does not make any sense outside of C/C++ projects. You get to use C more. \u0026hellip; Why is it called \u0026ldquo;nobuild\u0026rdquo; when it\u0026rsquo;s clearly a build tool? # You know all these BS movements that supposedly remove the root cause of your problems? Things like NoSQL, No-code, Serverless, etc. This is the same logic. I had too many problems with the process of building C projects. So there is nobuild anymore.\nHow to use the library in your own project # Keep in mind that nobuild.h is an stb-style header-only library. That means that just including it does not include the implementations of the functions. You have to #define NOBUILD_IMPLEMENTATION before the include. See our nobuild.c for an example.\nCopy nobuild.h to your project Create nobuild.c in your project with the build recipe. See our nobuild.c for an example. Bootstrap the nobuild executable: $ cc nobuild.c -o nobuild on POSIX systems $ cl.exe nobuild.c on Windows with MSVC Run the build: $ ./nobuild If you enable the Go Rebuild Urself™ Technology the nobuild executable will try to rebootstrap itself every time you modify its source code.\n","date":"15 March 2023","permalink":"/projects/nobuild/","section":"Projects","summary":"","title":"nobuild"},{"content":"\nreadme # Create readme files with one command\ntodo # add cli flags for verbose and force write ","date":"12 March 2023","permalink":"/projects/readme/","section":"Projects","summary":"","title":"readme"},{"content":"\nsatellite-c # Practice for writing satellite subsystems in C\nImportant Things # Manage a task list TaskList that is a queue of Tasks TODO # Make struct Message ","date":"12 March 2023","permalink":"/projects/satellite-c/","section":"Projects","summary":"","title":"satellite-c"},{"content":"This month I was working a lot on school and clubs I am associated with so I didn’t have a bunch of time to work on personal projects, but I do have some highlights to share.\npowerd [link] # power(d)aemon - check battery capacity efficiently using the inotify library written in C\nfd = inotify_init(); if (fd \u0026lt; 0) { print_and_exit(\u0026#34;Couldn\u0026#39;t initialize inotify.\\n\u0026#34;); } char filepath[200]; sprintf(filepath, \u0026#34;/sys/class/power_supply/%s\u0026#34;, filename); wd = inotify_add_watch(fd, filepath, IN_CREATE | IN_MODIFY | IN_DELETE); if (wd == -1) { printf(\u0026#34;Couldn\u0026#39;t add watch to \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, filepath); exit(1); } else { printf(\u0026#34;Watching \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, filepath); } manyrepr - view input in multiple formats at once [link] # I got to use std::map in C++ and other interesting concepts. This project is very early in development but I plan to make it useful. I often have base64 or binary that I need to turn into ascii or I have a text I need to urlencode. This tool doesn\u0026rsquo;t even ask what option you want, it just does it all and the use can copy what they want. The value of being able to have it convert input into \u0026ldquo;all of the above\u0026rdquo; make the use of this tool really fast,\nvoid get_opt(std::string intype, enum Options \u0026amp;opt) { std::map\u0026lt;std::string, enum Options\u0026gt; argmap; std::map\u0026lt;std::string, enum Options\u0026gt;::iterator it; argmap[\u0026#34;--text\u0026#34;] = TEXT; argmap[\u0026#34;--hex\u0026#34;] = HEX; argmap[\u0026#34;--bin\u0026#34;] = BIN; argmap[\u0026#34;--base64\u0026#34;] = BASE64; argmap[\u0026#34;--dec\u0026#34;] = DEC; argmap[\u0026#34;--rot13\u0026#34;] = ROT13; argmap[\u0026#34;--urlenc\u0026#34;] = URLENC; it = argmap.find(intype); if (it != argmap.end()) { opt = it-\u0026gt;second; } } New Draft.vim features [link] # I also added features to my project from 3 years ago draft.vim\nhttps://github.com/JakeRoggenbuck/draft.vim/releases/tag/0.6\n","date":"28 February 2023","permalink":"/devlogs/february-2023/","section":"Dev Logs","summary":"This month I was working a lot on school and clubs I am associated with so I didn’t have a bunch of time to work on personal projects, but I do have some highlights to share.","title":"Febuary 2023"},{"content":"","date":"7 February 2023","permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++"},{"content":"\ncalplusplus # The cal tool written in C++. Still a work in progress.\nFuture plans # /* void display_whole_month() { */ /* Month month = Month::now(); */ /* month += 1; */ /* std::cout \u0026lt;\u0026lt; month.full() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; */ /* /1* Su Mo Tu We Th Fr Sa */ /* 1 2 3 4 */ /* 5 6 7 8 9 10 11 */ /* 12 13 14 15 16 17 18 */ /* 19 20 21 22 23 24 25 */ /* 26 27 28 29 30 31 */ /* *1/ */ /* } */ ","date":"7 February 2023","permalink":"/projects/calplusplus/","section":"Projects","summary":"","title":"calplusplus"},{"content":"I joined AggieWorks as a Technical Product Manager for a new project. I spent a lot of time working on AggieWorks and School. I didn’t do as much for personal projects but I still have some interesting things to share for this month.\nI started implementing different data structures in C. Then I started incorporating these into a handful of projects.\nths - local thesaurus in C [link] # Use of djb2 hash and a binary tree\nvoid insert(struct Node *base, struct Word *word) { if (word-\u0026gt;id \u0026lt; base-\u0026gt;id) { if (base-\u0026gt;left == NULL) { base-\u0026gt;left = build_node(word); } else { insert(base-\u0026gt;left, word); } } if (word-\u0026gt;id \u0026gt; base-\u0026gt;id) { if (base-\u0026gt;right == NULL) { base-\u0026gt;right = build_node(word); } else { insert(base-\u0026gt;right, word); } } } mountain - lightweight tool to auto mount drives with inotify [link] # This uses the sys/inotify library for linux to create a callback for when files are created on the system. It checks specifically for files in /dev with a certain name pattern.\nfor (int i = 1; i \u0026lt; argc; ++i) { if (argv[i][0] == \u0026#39;-\u0026#39;) { if (!has_option) { if (does_match(argv[i], \u0026#34;-v\u0026#34;, \u0026#34;--version\u0026#34;)) { args.option = VERSION; has_option = 1; } else if (does_match(argv[i], \u0026#34;-h\u0026#34;, \u0026#34;--help\u0026#34;)) { args.option = HELP; has_option = 1; } } if (does_match(argv[i], \u0026#34;-V\u0026#34;, \u0026#34;--verbose\u0026#34;)) { args.verbose = 1; } if (does_match(argv[i], \u0026#34;-m\u0026#34;, \u0026#34;--mount\u0026#34;)) { args.mount = 1; } if (does_match(argv[i], \u0026#34;-n\u0026#34;, \u0026#34;--notify\u0026#34;)) { args.notify = 1; } } else { // Only accept the first non-flag as a file if (!has_file) { size_t len = strlen(argv[i]); args.filename = malloc(len * sizeof(char)); strcpy(args.filename, argv[1]); has_file = 1; } } } one-time-pad-gen [link] # Generate one time pads for use in simple manual ciphers. This project was interesting because learning to generate a bunch of new random numbers is an interesting problem.\n$ otpg 10 L M K J S J Y O D C S E M V E T W Y W J B A Z D C C B W T W I E K U O D D O T G S L N H H T A F U Z O V B Q A D U E B N A K S N G G Q M W J S P W H W D B Y I V X Z S A R S D L Y F Y B R Q O Z Y E L V P E K L N I R O G Z L G A D I R Y O C W V B X M T N L S R X N I D Z U S J L H R M S Z P Y I G W W J U R M U F F H S X B R M J W N F P Y S Y Q H S R W S Z C O X N L Q Z H V F O Q E R J T B G I I X H B V X I P O E I Q I Y P W J G X Q D E H T L Y D E B L M K I T N F S V U J B C B L B Q J K W H D C N M void generate(int rows) { for (int i = 0; i \u0026lt; rows; ++i) { for (int j = 0; j \u0026lt; COLS; ++j) { for (int k = 0; k \u0026lt; WORDS; ++k) { int v = rand() % 26; printf(\u0026#34;%c \u0026#34;, tochar(v)); } printf(\u0026#34; \u0026#34;); } printf(\u0026#34;\\n\u0026#34;); } } void ref_pad() { for (int i = 0; i \u0026lt; 26; ++i) { printf(\u0026#34;%c: \u0026#34;, tochar(i)); for (int j = 0; j \u0026lt; 26; ++j) { printf(\u0026#34;%c \u0026#34;, tochar(j)); } printf(\u0026#34;\\n\u0026#34;); printf(\u0026#34; \u0026#34;); for (int j = 0; j \u0026lt; 26; ++j) { printf(\u0026#34;%c \u0026#34;, tochar((j + i) % 26)); } printf(\u0026#34;\\n\u0026#34;); printf(\u0026#34;\\n\u0026#34;); } } int get_seed() { int val; FILE *fp; fp = fopen(\u0026#34;/dev/urandom\u0026#34;, \u0026#34;rb\u0026#34;); fread(\u0026amp;val, sizeof(int), 1, fp); fclose(fp); return val; } ","date":"31 January 2023","permalink":"/devlogs/january-2023/","section":"Dev Logs","summary":"I joined AggieWorks as a Technical Product Manager for a new project.","title":"January 2023"},{"content":"\ndarktable # darktable is an open source photography workflow application and non-destructive raw developer - a virtual lighttable and darkroom for photographers. It manages your digital negatives in a database, lets you view them through a zoomable lighttable and enables you to develop raw images, enhance them and export them to local or remote storage.\ndarktable is not a free Adobe® Lightroom® replacement.\nhttps://www.darktable.org/\nTable of Contents # Documentation Website Requirements Supported platforms Hardware Installing Latest release Development snapshot Updating from older versions Obtaining extensions Building Dependencies Get the source Get submodules Compile Further reading Using Test/unstable version Regular/stable version Contributing FAQ Why is my camera not detected when plugged-in ? Why is my lens not detected/corrected in darkroom ? Why do the thumbnails in the lighttable view look different to the preview in the darkroom view ? Wiki Mailing lists Documentation # The darktable user manual is maintained in the dtdocs repository.\nLua API documentation is maintained in the luadocs repository.\nWebsite # The website ( https://www.darktable.org/) is maintained in the dtorg repository.\nRequirements # Supported platforms # Linux (64-bit) FreeBSD (64-bit) Windows (64-bit), 8.1 w/ UCRT and later macOS Big-endian platforms are not supported.\n32-bit platforms are not officially supported - they might or might not work.\nWindows support is still young and suffers from bugs that do not affect Linux. If possible, prefer using darktable on Linux.\nHardware # (workable minimum / recommended minimum):\nRAM: 4 GB / 8 GB CPU: Intel Pentium 4 (Core 2 for Windows) / Intel Core i5 4×2.4 GHz GPU: none / Nvidia with 1024 CUDA cores, 4 GB, OpenCL 1.2 compatible free disk space: 250 MB / 1 GB darktable can run on lightweight configurations (even on a Raspberry Pi), but expect modules like denoise, local contrast, contrast equalizer, retouch or liquify to be slow beyond usable.\nA GPU is not mandatory but is strongly recommended for a smoother experience. Nvidia GPUs are recommended for safety because some AMD drivers behave unreliably with some modules (e.g. local contrast).\nInstalling # If the latest release is still not available as a pre-built package for your distribution, you can build the software yourself following the instructions below.\nLatest release # 4.2.0 (stable)\nDownload executable for Windows Download executable for macOS on Intel Download executable for macOS on Apple Silicon Install native packages and repositories for Linux Install Flatpak package for Linux More information about installing darktable on any system When using a pre-built package, ensure that it has been built with Lua, OpenCL, OpenMP and Colord support. These are optional and will not prevent darktable from running if missing, but their absence will degrade the user experience. Notably, some Flatpak, Snap and Appimage packages lack OpenCL and Lua support.\nDevelopment snapshot # The development snapshot reflects the current state of the master branch. It is intended for testing and is generally not safe. See the notes below for warnings and precautions about using the master branch.\nInstall native packages and repositories for Linux (one snapshot per day). No pre-compiled packages are provided for the master branch on macOS and Windows. See how to build it manually below. Updating from older versions # When updating darktable from an older release, you only need install the newest version. Existing files will be preserved.\nHowever, newer releases occasionally need to change the structure of the library database (containing the whole list of images known to darktable, with their editing history). If this happens you will be prompted with a request to either upgrade the database or close the software.\nMigration to a newer database structure/newer release means that your edits (both new and old) will no longer be compatible with older versions of darktable. Upgrades are definitive. Newer versions are always compatible with older edits, but newer edits are generally not compatible with older versions.\ndarktable automatically backs up the library database when a new version causes it to be upgraded (in ~/.config/darktable/library.db-pre-3.0.0 for example), so you can revert to the previous release by restoring this backup if needed (simply rename it to library.db).\nIf you try to open a newer database with an older version of the software, any portions of your edits that were undertaken with new features will be discarded and you will lose them. This also applies to the sidecar XMP files.\nIf you plan to move regularly between two versions (new/unstable and old/stable) see below for details of how to do it safely.\nObtaining extensions # Extensions and plugins use the Lua scripting language and can be downloaded here. Lua support is optional in darktable, so make sure you have the lua interpreter and its development files (package lua-dev or lua-devel, depending on distributions) installed on your system while building or ensure the package you are using has been built with this library.\nExtensions allow exporting for various media and websites, merge/stack/blend HDR, panoramas or focus bracketing, apply AI-based facial recognition, manage tags and GPS data, etc.\nBuilding # Dependencies # Compatible compilers:\nClang: 8 and later GCC: 8 and later MinGW-w64: 6 and later Required dependencies (minimum version):\nCMake 3.18 GTK 3.24.15 GLib 2.40 SQLite 3.15 (but 3.24 or newer strongly recommended) Exiv2 0.24 (but at least 0.27.4 built with ISO BMFF support needed for Canon CR3 raw import) Required dependencies (no version requirement):\nLensfun (for automatic lens correction) (Note: alpha 0.3.95 and git master branch are not supported) Little CMS 2 Optional dependencies (minimum version):\nOpenMP 4.5 (for CPU multi-threading and SIMD vectorization) LLVM 3.9 (for OpenCL checks at compilation time) OpenCL 1.2 (for GPU-accelerated computing) Lua 5.4 (for plugins and extension scripting) libgphoto2 2.5 (for camera tethering) Imath 3.1.0 (for 16-bit \u0026ldquo;half\u0026rdquo; float TIFF export and faster import) libavif 0.8.2 (for AVIF import \u0026amp; export) libheif 1.13.0 (for HEIF/HEIC/HIF import; also for AVIF import if no libavif) libjxl 0.7.0 (for JPEG XL import \u0026amp; export) WebP 0.3.0 (for WebP import \u0026amp; export) Optional dependencies (no version requirement):\ncolord, Xatom (for fetching the system display color profile) G\u0026rsquo;MIC (for .gmz compressed LUT support) PortMidi (for MIDI input support) SDL2 (for gamepad input support) CUPS (for print mode support) OpenEXR (for EXR import \u0026amp; export) OpenJPEG (for JPEG 2000 import \u0026amp; export) GraphicsMagick or ImageMagick (for misc image format import) To install all the dependencies on Linux systems, you may use the source repositories of your distribution (provided they are up-to-date):\nFedora and RHEL # sudo dnf builddep darktable OpenSuse # sudo zypper si -d darktable Ubuntu # sed -e \u0026#39;/^#\\sdeb-src /s/^# *//;t;d\u0026#39; \u0026#34;/etc/apt/sources.list\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/darktable-sources-tmp.list \u0026gt; /dev/null \\ \u0026amp;\u0026amp; ( sudo apt-get update sudo apt-get build-dep darktable ) sudo rm /etc/apt/sources.list.d/darktable-sources-tmp.list Debian # sudo apt-get build-dep darktable Install missing dependencies # If mandatory dependencies are missing on your system, the software build will fail with errors like Package XXX has not been found or Command YYY has no provider on this system. If you see one of these errors you should find out which package provides the missing package/command in your distribution, then install it. This can usually be done in your package manager (not the application manager customarily provided by default in your distribution) or from the internet with a search engine. You may need to install a package manager first (like APT on Debian/Ubuntu, or DNF on Fedora/RHEL).\nThis process might be tedious but you only need to do it once. See this page on building darktable for one-line commands that will install most dependencies on the most common Linux distributions.\nGet the source # Master branch (unstable) # The master branch contains the latest version of the source code and is intended:\nas a working base for developers, for beta-testers to chase bugs, for users willing to sacrifice stability for new features without waiting for the next release. The master branch comes with no guarantee of stability and might corrupt your database and XMP files, result in loss of data and edit history or temporarily break compatibility with previous versions and commits.\nHow dangerous is it? Most of the time, it is fairly stable. As with any rolling-release kind of deployment, bugs appear more often but are fixed faster too. Sometimes, though, these bugs can result in losses or inconsistencies in the editing history of your pictures. This is fine if you don\u0026rsquo;t need to open your edits again in the future, but maybe not if you manage an estate.\nAfter backing up your ~/.config/darktable directory and the sidecar .XMP files of any pictures you intend to open with the master branch, you may obtain the source as follows:\ngit clone --recurse-submodules --depth 1 https://github.com/darktable-org/darktable.git cd darktable See below (in \u0026ldquo;Using\u0026rdquo;) how to start a test install of the unstable version without damaging your regular stable install and files.\nLatest stable release # 4.2.0\nThe darktable project releases two major versions every year, on Summer and Winter Solstices, tagged with even numbers (e.g. 4.0, 4.2, 4.4, 4.6). Minor revisions are tagged with a third digit (e.g. 4.0.1, 4.0.2) and mostly provide bug fixes and camera support. You may want to compile these stable releases yourself to get better performance for your particular computer:\ngit clone --recurse-submodules --depth 1 https://github.com/darktable-org/darktable.git cd darktable git fetch --tags git checkout tags/release-4.2.0 Get submodules # Note that libxcf, OpenCL, RawSpeed, whereami and LibRaw are tracked via git submodules, so after checking-out darktable, you need to update/checkout the submodules too:\ngit submodule update --init Compile # Easy way # WARNING: If you have previously built darktable, don\u0026rsquo;t forget to first completely remove (rm -R) the build and /opt/darktable directories to avoid conflicting files from different versions. Many weird behaviours and transient bugs have been reported that can be traced to the build cache not properly invalidating the changed dependencies, so the safest way is to completely remove previously built binaries and start again from scratch.\ndarktable provides a shell script that automatically takes care of building on Linux and macOS for classic cases in a single command.\n./build.sh --prefix /opt/darktable --build-type Release --install --sudo If you want to install a test version alongside your regular/stable version, change the install prefix:\n./build.sh --prefix /opt/darktable-test --build-type Release --install --sudo This builds the software for your architecture only, with:\n-O3 optimization level, SSE/AVX support if detected, OpenMP support (multi-threading and vectorization) if detected, OpenCL support (GPU offloading) if detected, Lua scripting support if detected. If you want to have dartkable displayed along your other applications, you only need to add a symbolic link:\nln -s /opt/darktable/share/applications/org.darktable.darktable.desktop /usr/share/applications/org.darktable.darktable.desktop Now, your custom-built darktable is ready to be used just like any pre-packaged software.\nManual way # Alternatively, you can use a manual build to pass custom arguments.\nLinux/macOS # mkdir build/ cd build/ cmake -DCMAKE_INSTALL_PREFIX=/opt/darktable/ .. make sudo make install Windows # See https://github.com/darktable-org/darktable/tree/master/packaging/windows\nUsing # Test/unstable version # To use a test version of darktable without damaging your regular/stable version\u0026rsquo;s files and database, start darktable in a terminal with:\n/opt/darktable-test/bin/darktable --configdir \u0026#34;~/.config/darktable-test\u0026#34; and ensure that you set the option \u0026ldquo;write sidecar file for each image\u0026rdquo; to \u0026ldquo;never\u0026rdquo; in preferences -\u0026gt; storage -\u0026gt; XMP. This way, your regular/stable version will save its configuration files in ~/.config/darktable, as usual, the test/unstable one will save in ~/.config/darktable-test, and the two versions will not produce database conflicts.\nRegular/stable version # Simply launch it from your desktop application menu or, from a terminal, run darktable or /opt/darktable/bin/darktable. If the installation did not create a launcher in your applications menu, run:\nsudo ln -s /opt/darktable/share/applications/org.darktable.darktable.desktop /usr/share/applications/org.darktable.darktable.desktop You may find darktable configuration files in ~/.config/darktable. If you experience crashes at startup, try launching darktable from a terminal with OpenCL disabled using darktable --disable-opencl.\nFurther reading # There is a comprehensive list of build instructions for Ubuntu/Debian related distributions or for Fedora and related distributions. These build instructions can be easily adapted to many other Linux distributions.\nContributing # There are many ways you can contribute to the darktable project:\nWrite a blog about darktable Create a tutorial for darktable Help expand the user wiki or user manual Answer questions on the user mailing list or the pixls.us forums Share your ideas on the developer mailing list Test releases Review pull requests Start hacking on darktable and see developer\u0026rsquo;s guide FAQ # Why is my camera not detected when plugged-in ? # Check that you have the latest gphoto2 library installed in order to support the newest cameras.\nWhy is my lens not detected/corrected in darkroom ? # Lens correction profiles are provided by Lensfun, which has 2 parts: a program and a database. Most Linux distributions provide a recent enough version of the program, but provide an outdated version of the database. If Lensfun is correctly installed, then update its database in a terminal by running:\nlensfun-update-data or alternatively\n/usr/bin/g-lensfun-update-data Why do the thumbnails in the lighttable view look different to the preview in the darkroom view ? # For RAW files that have never been edited in darktable (when you have just imported them), the lighttable view, by default, shows the JPEG preview placed into the RAW file by your camera. Loading this JPEG file is faster and makes the lighttable view more responsive when importing large collections of images.\nHowever, this JPEG thumbnail is processed by the firmware of the camera, with proprietary algorithms, and colors, sharpness and contrast that might not look the same as darktable processing (which is what you see when opening the image in the darkroom view). Camera manufacturers don\u0026rsquo;t publish details of the pixel processing they perform in their firmware so their look is not exactly or easily reproducible by other software.\nHowever, once RAW images have been edited in darktable, the lighttable thumbnail should exactly match the darkroom preview, as they are processed in the same way.\nIf you never want to see the embedded JPEG thumbnail in the lighttable view, for RAW files, you should set the option \u0026ldquo;use raw file instead of embedded JPEG from size\u0026rdquo; to \u0026ldquo;never\u0026rdquo; in preferences -\u0026gt; lighttable.\nWiki # GitHub wiki Developer wiki Mailing lists # User\u0026rsquo;s [ subscribe | archive] Developer\u0026rsquo;s [ subscribe | archive] ","date":"30 January 2023","permalink":"/projects/darktable/","section":"Projects","summary":"","title":"darktable"},{"content":"\nmountain - lightweight tool to auto mount drives with inotify # Use sys/inotify to listen for new files in /dev/ Notify the user that such file has been created Mount the drive listed ","date":"24 January 2023","permalink":"/projects/mountain/","section":"Projects","summary":"","title":"mountain"},{"content":"\ntimer-cli # ","date":"24 January 2023","permalink":"/projects/timer-cli/","section":"Projects","summary":"","title":"timer-cli"},{"content":"\none-time-pad-gen # Generate one time pads for use in simple manual ciphers written in C.\n$ otpg 10 L M K J S J Y O D C S E M V E T W Y W J B A Z D C C B W T W I E K U O D D O T G S L N H H T A F U Z O V B Q A D U E B N A K S N G G Q M W J S P W H W D B Y I V X Z S A R S D L Y F Y B R Q O Z Y E L V P E K L N I R O G Z L G A D I R Y O C W V B X M T N L S R X N I D Z U S J L H R M S Z P Y I G W W J U R M U F F H S X B R M J W N F P Y S Y Q H S R W S Z C O X N L Q Z H V F O Q E R J T B G I I X H B V X I P O E I Q I Y P W J G X Q D E H T L Y D E B L M K I T N F S V U J B C B L B Q J K W H D C N M ","date":"2 January 2023","permalink":"/projects/one-time-pad-gen/","section":"Projects","summary":"","title":"one-time-pad-gen"},{"content":"\nloader-test # Testing the hyper-minimal-loaders project.\nWhat is hyper-minimal-loaders? # It\u0026rsquo;s just a simple percentage loader\n","date":"1 January 2023","permalink":"/projects/loader-test/","section":"Projects","summary":"","title":"loader-test"},{"content":" New projects # I created a program to learn linearization.\nSalt is another project (Symbol And Lexer Toolkit). Salt aims to lex and tokenize c source code for three reasons.\nMake auto include suggestions for file and libraries Check where every imported symbol is from and warn if imports aren\u0026rsquo;t needed Generate documentation of a library in a c file School # I spent a lot of time this month working on school projects and preparing for finals.\nI try to overlap coding and my school as much as possible, so before finals I spent a few hours working on projects that reinforce my understanding in Math.\nI made this diagram for find-slope-with-secant recently.\nI also made this diagram for newtons-method.\n","date":"31 December 2022","permalink":"/devlogs/december-2022/","section":"Dev Logs","summary":"New projects # I created a program to learn linearization.","title":"December 2022"},{"content":"\nSniper # Overview # Sniper is a very simple game where you run from an adversary which tries to shoot you, but you can collect the bullets and fire them back to gain score.\nBuild # Dependencies # Make sure you have GLFW installed:\nGLFW Install Instructions Arch Linux # sudo pacman -S glfw-x11 Debian/Ubuntu # sudo apt install libglfw3 libglfw3-dev Windows # Download a pre-compiled binary from the GLFW website.\nmacOS # Install from Homebrew:\nbrew install glfw Or download a pre-compiled binary from the GLFW website.\nFrom source # See the instructions on the GLFW website.\nThen check that OpenGL 4.1 or above is installed. You can download OpenGL from here.\nRun build script # To build, run ./scripts/build.sh (or .\\scripts\\build.bat on Windows).\n","date":"31 December 2022","permalink":"/projects/sniper/","section":"Projects","summary":"","title":"sniper"},{"content":"\nCryptography? # The methodology of concealing the content of messages. Originates from the Greek root word kryptos, which means hidden. The modern scientific study of crytography is sometimes referred to as cryptology1.\nCiphers? # A function that encrypts some plaintext into an unreadable ciphertext.\ndef cipher(plaintext) -\u0026gt; str: ... return ciphertext Codebreaking? # The analysis and attack of classical cryptosystems. In the context of modern cryptography, codebreaking refers to the exploitation of modern encryption systems.\nProject progress # (python only + no codebreaker required yet)\nTable substitution cipher Digraph substitution cipher Playfair cipher Shift cipher Vigenere cipher Affine cipher Steganography Xor One-time pad + proof of perfect secrecy Information theory: entropy analysis Information theory: wordle solver Block cipher Stream cipher Data encryption standard Padding oracle attack Hashing MACs Rainbow table attack RSA Diffie-Hellman key exchange ElGamal Complexity theory Abstract algebra review Factorization Discrete log Decisional Diffie-Hellman assumption Primality testing Elliptic-curve cryptography Lenstra\u0026rsquo;s elliptic-curve factorization Elliptic-curve digital signature algorithm RSA signature ElGamal signature Existential forgery Shortest Vector Problem (bounds) Fundamental domain of lattices Reduction of Closest Vector Problem to SVP Subset sum of cryptosystem NTRU encryption algorithm Ring Learning With Errors The first third is mainly symmetric cryptography. The rest is assymetric cryptography.\nTable substitution cipher # This substitution cipher looks up each plaintext letter in an encryption table and writes the corresponding ciphertext letter in its place. Evidently, the decryption table is the inverse of the encryption table\ndecryption_table = {v: k for k, v in encryption_table.items()} In a table substitution cipher, the ciphertext alphabet is a randomly chosen permutation of the 26 alphabet letters. The random permutation for this cipher is both lowercase and capital alphabet letters\nRandom permutation example: OaTyqwGerPSApdfghjXUIlzxcZLMVWKuZvbCRnmYNoQBkisFDtJH\nplaintext ciphertext a O b a c T plaintext to ciphertext values like O, a, and T are chosen randomly (or by using a generator).\nDigraph substitution cipher # Similar to the monoalphabetic table substitution cipher, this is another substitution cipher. Unlike the monoalphabetic table cipher, this cipher replaces every plaintext digraph with its corresponding ciphertext digraph instead of replacing every plaintext letter with its corresponding ciphertext letter. Each ciphertext digraph is located by position given a row index and column index determined by the plaintext digraph\nshift_row = 4 shift_column = 17 alpha = \u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34; # Shifts the alphabet over by `shift` amount. Loops overflow values to start. def shift_alpha(alpha, shift) -\u0026gt; str: return alpha[shift:len(alpha)] + alpha[:shift] sbox = [[shift_alpha(alpha, shift_column)[i] + (shift_alpha(alpha, shift_row)[j]) for j in range(len(alpha))] for i in range(len(alpha))] plaintext ciphertext aa re ab se he vl For an explanation of how plaintext turns into ciphertext, visit the title link.\nPlayfair cipher # The playfair cipher! This one is sort of like the digraph substitution cipher in utilizing a table (this one\u0026rsquo;s is 5x5) and multiple digraph substitutions, but this cipher has a few more rules. Unlike the digraph substitution cipher mentioned above, this one does not have a ciphertext digraph intersection value based on two inputted label points from a plaintext digraph. The playfair cipher instead shifts isolated digraph characters up, down, or diagonally in the matrix according to the digraph classification.\nAdditionally, this cipher has a key! See more about keys and about the playfair encryption method at the title link.\nkey = \u0026#34;shadow\u0026#34; 625 s h a d o w ⠀ ⠀ ⠀ s h a d o w b c e f g i j k l m n p q r t u v y z Shift Cipher # Otherwise known as a caesar cipher, the shift cipher takes each letter in a plaintext message and shifts it by n indexes in the looping alphabet.\nHOFFSTEIN, JEFFREY. Mathematical Cryptography. SPRINGER-VERLAG NEW YORK, 2016.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"24 December 2022","permalink":"/projects/cryptography/","section":"Projects","summary":"","title":"cryptography"},{"content":"\nautoignore # Overview # autoignore automatically adds all untracked files to your .gitignore file so you won\u0026rsquo;t ever have to worry about them again.\nInstall # If path/to/autoignore/ is the directory containing this file, add the following line:\nalias autoignore=\u0026#39;python3 path/to/autoignore/src/main.py\u0026#39; to your bash profile (which is located at ~/.bash_profiles on macOS and at ~/.bash_profile on Linux), and then restart your terminal.\nUninstall # Remove the line you added during the install step.\nUsage # Navigate to the directory with the git repository in question and run the command autoignore.\n","date":"14 December 2022","permalink":"/projects/autoignore/","section":"Projects","summary":"","title":"autoignore"},{"content":"\nSalt (Symbol And Lexer Toolkit) # ","date":"12 December 2022","permalink":"/projects/salt/","section":"Projects","summary":"","title":"salt"},{"content":"\nlinearization # double lin(double (*func)(double), double a) { int x = round(a); return func(a) + derivative(func, a) * (x - a); } l(x) = f(a) + f\u0026#39;(a) * (x - a) for a value of a near x lin(16.10): 4.003599 f(16.10): 4.012481 |Δ|: 0.008882 ","date":"8 December 2022","permalink":"/projects/linearization/","section":"Projects","summary":"","title":"linearization"},{"content":"\nDescription # bspwm is a tiling window manager that represents windows as the leaves of a full binary tree.\nIt only responds to X events, and the messages it receives on a dedicated socket.\nbspc is a program that writes messages on bspwm\u0026rsquo;s socket.\nbspwm doesn\u0026rsquo;t handle any keyboard or pointer inputs: a third party program (e.g. sxhkd) is needed in order to translate keyboard and pointer events to bspc invocations.\nThe outlined architecture is the following:\nPROCESS SOCKET sxhkd --------\u0026gt; bspc \u0026lt;------\u0026gt; bspwm Configuration # The default configuration file is $XDG_CONFIG_HOME/bspwm/bspwmrc: this is simply a shell script that calls bspc.\nAn argument is passed to that script to indicate whether is was executed after a restart ($1 -gt 0) or not ($1 -eq 0).\nKeyboard and pointer bindings are defined with sxhkd.\nExample configuration files can be found in the examples directory.\nMonitors, desktops and windows # bspwm holds a list of monitors.\nA monitor is just a rectangle that contains desktops.\nA desktop is just a pointer to a tree.\nMonitors only show the tree of one desktop at a time (their focused desktop).\nThe tree is a partition of a monitor\u0026rsquo;s rectangle into smaller rectangular regions.\nEach node in a tree either has zero or two children.\nEach internal node is responsible for splitting a rectangle in half.\nA split is defined by two parameters: the type (horizontal or vertical) and the ratio (a real number r such that 0 \u0026lt; r \u0026lt; 1).\nEach leaf node holds exactly one window.\nInsertion modes # When bspwm receives a new window, it inserts it into a window tree at the specified insertion point (a leaf) using the insertion mode specified for that insertion point.\nThe insertion mode tells bspwm how it should alter the tree in order to insert new windows on a given insertion point.\nBy default the insertion point is the focused window and its insertion mode is automatic.\nManual mode # The user can specify a region in the insertion point where the next new window should appear by sending a node -p|\u0026ndash;presel-dir DIR message to bspwm.\nThe DIR argument allows to specify how the insertion point should be split (horizontally or vertically) and if the new window should be the first or the second child of the new internal node (the insertion point will become its brother).\nAfter doing so the insertion point goes into manual mode.\nLet\u0026rsquo;s consider the following scenario:\na a a / \\ / \\ / \\ 1 b ---\u0026gt; c b ---\u0026gt; c b ^ / \\ / \\ / \\ / \\ / \\ 2 3 4 1 2 3 d 1 2 3 ^ / \\ 5 4 ^ +-----------------------+ +-----------------------+ +-----------------------+ | | | | | | | | | | | | 2 | | 4 | 2 | | 5 | 4 | 2 | | | | | ^ | | | ^ | | | | 1 |-----------| |-----------|-----------| |-----------|-----------| | ^ | | | | | | | | | | 3 | | 1 | 3 | | 1 | 3 | | | | | | | | | | +-----------------------+ +-----------------------+ +-----------------------+ X Y Z In state X, the insertion point is 1.\nWe send the following message to bspwm: node -p north.\nThen add a new window: 4, this leads to state Y: the new internal node, c becomes a\u0026rsquo;s first child.\nFinally we send another message: node -p west and add window 5.\nThe ratio of the preselection (that ends up being the ratio of the split of the new internal node) can be changed with the node -o|\u0026ndash;presel-ratio message.\nAutomatic mode # The automatic mode, as opposed to the manual mode, doesn\u0026rsquo;t require any user choice. The way the new window is inserted is determined by the value of the automatic scheme and the initial polarity settings.\nLongest side scheme # When the value of the automatic scheme is longest_side, the window will be attached as if the insertion point was in manual mode and the split direction was chosen based on the dimensions of the tiling rectangle and the initial polarity.\nLet\u0026rsquo;s consider the following scenario, where the initial polarity is set to second_child:\n1 a a ^ / \\ / \\ ---\u0026gt; 1 2 ---\u0026gt; 1 b ^ / \\ 2 3 ^ +-----------------------+ +-----------------------+ +-----------------------+ | | | | | | | | | | | | | | | 2 | | | | | | | | | | 1 | | 1 | 2 | | 1 |-----------| | ^ | | | ^ | | | | | | | | | | | 3 | | | | | | | | ^ | +-----------------------+ +-----------------------+ +-----------------------+ X Y Z In state X, a new window is added.\nSince 1 is wide, it gets split vertically and 2 is added as a\u0026rsquo;s second child given the initial polarity.\nThis leads to Y where we insert window 3. 2 is tall and is therefore split horizontally. 3 is once again added as b\u0026rsquo;s second child.\nAlternate scheme # When the value of the automatic scheme is alternate, the window will be attached as if the insertion point was in manual mode and the split direction was chosen based on the split type of the insertion point\u0026rsquo;s parent and the initial polarity. If the parent is split horizontally, the insertion point will be split vertically and vice versa.\nSpiral scheme # When the value of the automatic scheme is spiral, the window will take the space of the insertion point.\nLet\u0026rsquo;s dive into the details with the following scenario:\na a a / \\ / \\ / \\ 1 b ---\u0026gt; 1 c ---\u0026gt; 1 d / \\ / \\ / \\ 2 3 4 b 5 c ^ ^ / \\ ^ / \\ 3 2 b 4 / \\ 3 2 +-----------------------+ +-----------------------+ +-----------------------+ | | | | | | | | | | | 2 | | | 4 | | | 5 | | | ^ | | | ^ | | | ^ | | 1 |-----------| | 1 |-----------| | 1 |-----------| | | | | | | | | | 3 | | | | 3 | | | 3 | 2 | | |-----| 4 | | | | | | | | | | 2 | | +-----------------------+ +-----------------------+ +-----------------------+ X Y Z In state X, the insertion point, 2 is in automatic mode.\nWhen we add a new window, 4, the whole tree rooted at b is reattached, as the second child of a new internal node, c.\nThe splitting parameters of b (type: horizontal, ratio: ½) are copied to c and b is rotated by 90° clockwise.\nThe tiling rectangle of 4 in state Y is equal to the tiling rectangle of 2 in state X.\nThen the insertion of 5, with 4 as insertion point, leads to Z.\nThe spiral automatic scheme generates window spirals that rotate clockwise (resp. anti-clockwise) if the insertion point is the first (resp. second) child of its parent.\nSupported protocols and standards # The RandR and Xinerama protocols. A subset of the EWMH and ICCCM standards. Community # Want to get in touch with other bspwm users or you need help? Join us on our:\nSubreddit at r/bspwm. IRC channel at #bspwm on irc.libera.chat (maintained by @dannycolin / sdk on IRC). Matrix room at https://matrix.to/#/#bspwm:matrix.org ","date":"4 December 2022","permalink":"/projects/bspwm/","section":"Projects","summary":"","title":"bspwm"},{"content":"","date":"3 December 2022","permalink":"/tags/algorithms/","section":"Tags","summary":"","title":"algorithms"},{"content":" Intro # A bloom filter is a data structure that allows you to quickly identify if some data has been previously added to the structure. What makes a bloom filter unique is that is that it gives up full accuracy for huge speed boost. A bloom filter has small false positive rate, and this rate can be decreased by using more memory and more hash algorithms, however you can find an optimal amount of memory and hash algorithm count to achieve great speed while still maintaining lower memory than a normal list. This specific implementation uses three different hashing algorithms.\nUse cases # Bloom filters are very convenient for many different use cases.\nMy favorite application is for checking if a username or unique id exists somewhere. Bloom filters have very low memory usage as well as being fast, so for a solution that doesn\u0026rsquo;t need 100% accuracy and can get away with something close to 99%, then a bloom filter might be the correct structure.\nImplementation # We will define a structure in Rust to represent the bloom filter.\nstruct BloomFilter { size: usize, hash_count: i8, bitvector: BitVec, } Bloom filters usually have two traits (methods) associated with the structure.\nadd an item to the structure fn add(\u0026amp;mut self, value: String); check if an item likely exists in the structure fn check(\u0026amp;self, value: String) -\u0026gt; bool; We define these traits for the structure by \u0026ldquo;Implementing them like this\u0026rdquo;.\ntrait Filter { fn add(\u0026amp;mut self, value: String); fn check(\u0026amp;self, value: String) -\u0026gt; bool; fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32; } impl Filter for BloomFilter { fn add(\u0026amp;mut self, value: String) { // ... } fn check(\u0026amp;self, value: String) -\u0026gt; bool { // ... } fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32 { // ... } } For the add trait, we need to call each hash function for the value given to get a likely unique set of keys for the value.\nfn add(\u0026amp;mut self, value: String) { for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; self.bitvector.set(k, true); } } We need to do something similar to check if a value has been added.\nfn check(\u0026amp;self, value: String) -\u0026gt; bool { let mut acc = 0; for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; if self.bitvector.get(k).unwrap_or(false) { acc += 1; } } return acc \u0026gt;= self.hash_count; } The hash function is just a collection of the other hash functions.\nfn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32 { let functions: [\u0026amp;dyn Fn(String) -\u0026gt; i32; 3] = [\u0026amp;hash_1, \u0026amp;hash_2, \u0026amp;hash_3]; return functions[i](s); } Here are the other hash functions.\nfn hash_1(s: String) -\u0026gt; i32 { let mut hash = 0; let size = s.len(); for i in 0..size { hash = hash + (s.chars().nth(i)).unwrap() as i32 - 0x30; } hash } fn hash_2(s: String) -\u0026gt; i32 { let mut hash = 7; let size = s.len(); for i in 0..size { hash = (hash * 31 + (s.chars().nth(i)).unwrap() as i32 - 0x30) % size as i32; } hash % size as i32 } fn hash_3(s: String) -\u0026gt; i32 { (hash_2(s) + 7) * 3 } All together, it should look like this.\nfn hash_1(s: String) -\u0026gt; i32 { let mut hash = 0; let size = s.len(); for i in 0..size { hash = hash + (s.chars().nth(i)).unwrap() as i32 - 0x30; } hash } fn hash_2(s: String) -\u0026gt; i32 { let mut hash = 7; let size = s.len(); for i in 0..size { hash = (hash * 31 + (s.chars().nth(i)).unwrap() as i32 - 0x30) % size as i32; } hash % size as i32 } fn hash_3(s: String) -\u0026gt; i32 { (hash_2(s) + 7) * 3 } struct BloomFilter { size: usize, hash_count: i8, bitvector: BitVec, } trait Filter { fn add(\u0026amp;mut self, value: String); fn check(\u0026amp;self, value: String) -\u0026gt; bool; fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32; } impl Filter for BloomFilter { fn add(\u0026amp;mut self, value: String) { for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; self.bitvector.set(k, true); } } fn check(\u0026amp;self, value: String) -\u0026gt; bool { let mut acc = 0; for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; if self.bitvector.get(k).unwrap_or(false) { acc += 1; } } return acc \u0026gt;= self.hash_count; } fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32 { let functions: [\u0026amp;dyn Fn(String) -\u0026gt; i32; 3] = [\u0026amp;hash_1, \u0026amp;hash_2, \u0026amp;hash_3]; return functions[i](s); } } Other types of searches # For testing purposes, we can use two different types of searches to compare against the bloom filter.\nLinear Search # Linear search iterates through the array, checking if it exists. This has a linear time complexity O(n) and is not ideal for this and many other use cases.\n/// Search for the term using linear search fn linear_search(array: \u0026amp;[String], term: String) -\u0026gt; bool { for c in array { if c == term.as_str() { return true; } } return false; } Bogo Search # Bogo search is an algorithm that was designed to be purposefully bad. This algorithm has a time complexity of factorial time O(n!). This algorithm should never ever be used.\nIt essentially picks a random number to use at an index to check if the item is at that index. If it\u0026rsquo;s not, it repeats.\n/// Search for the term using the worst search algorithm, bogo search fn bogo_search(array: \u0026amp;[String], term: String) -\u0026gt; bool { let mut num: usize; loop { num = thread_rng().gen_range(0..array.len()); if array[num] == term.as_str() { return true; } } } Testing and Setup # The rest of the code in the project is for setting up the data to be searched and testing of the search algorithms.\nfn fill_array_and_bloom_filter(num_vec: \u0026amp;mut [String], bf: \u0026amp;mut BloomFilter) -\u0026gt; Result\u0026lt;()\u0026gt; { let file = File::open(\u0026#34;english-words/words.txt\u0026#34;)?; let reader = BufReader::new(file); let mut index = 0; for line in reader.lines() { if index \u0026lt; num_vec.len() { let l = line?; // Add word to array num_vec[index] = l.clone(); // Add word to bloom filter bf.add(l); } index += 1; } Ok(()) } fn main() { // Set up bloom filter let mut bf = BloomFilter { bitvector: BitVec::from_elem(10000, false), hash_count: 3, size: 10000, }; // Set up num vec let mut num_vec: Vec\u0026lt;String\u0026gt; = vec![String::new(); 17000]; fill_array_and_bloom_filter(\u0026amp;mut num_vec, \u0026amp;mut bf).unwrap(); num_vec.shuffle(\u0026amp;mut thread_rng()); let length = num_vec.len(); // Pick random term let mut rng = rand::thread_rng(); let x: usize = rng.gen_range(0..num_vec.len()); let term: String = num_vec[x].clone(); println!(\u0026#34;The randomly selected term is \u0026#39;{term}\u0026#39;\u0026#34;); // Calculate all of the hashes for the term let one = hash_1(term.clone()); let two = hash_2(term.clone()); let three = hash_3(term.clone()); println!(\u0026#34;The hashes for \u0026#39;{term}\u0026#39; are {one}, {two}, {three}\\n\u0026#34;); println!( \u0026#34;This will test how fast the word \u0026#39;{term}\u0026#39; can be found in the array of {length} words.\u0026#34; ); // Test the time it takes for linear search let before = Instant::now(); for _ in 0..100 { linear_search(\u0026amp;mut num_vec, term.clone()); } println!(\u0026#34;Elapsed time for linear_search: {:.2?}\u0026#34;, before.elapsed()); // Test the time it takes for bloom filter check let before = Instant::now(); for _ in 0..100 { bf.check(term.clone()); } println!( \u0026#34;Elapsed time for bloom filter check: {:.2?}\u0026#34;, before.elapsed() ); // Test the time is takes for bogo search let before = Instant::now(); for _ in 0..100 { bogo_search(\u0026amp;mut num_vec, term.clone()); } println!(\u0026#34;Elapsed time for bogo_search: {:.2?}\u0026#34;, before.elapsed()); } Results # The randomly selected term is \u0026#39;amicabilities\u0026#39; The hashes for \u0026#39;amicabilities\u0026#39; are 736, 11, 54 This will test how fast the word \u0026#39;amicabilities\u0026#39; can be found in the array of 17000 words. Elapsed time for linear_search: 220.81ms Elapsed time for bloom filter check: 3.61ms Elapsed time for bogo_search: 4.64s The randomly selected term is \u0026#39;Aldermaston\u0026#39; The hashes for \u0026#39;Aldermaston\u0026#39; are 618, 0, 21 This will test how fast the word \u0026#39;Aldermaston\u0026#39; can be found in the array of 17000 words. Elapsed time for linear_search: 245.29ms Elapsed time for bloom filter check: 2.69ms Elapsed time for bogo_search: 5.53s The randomly selected term is \u0026#39;Achille\u0026#39; The hashes for \u0026#39;Achille\u0026#39; are 354, 1, 24 This will test how fast the word \u0026#39;Achille\u0026#39; can be found in the array of 17000 words. Elapsed time for linear_search: 273.41ms Elapsed time for bloom filter check: 1.30ms Elapsed time for bogo_search: 6.68s Setting up the project # Cloning # git clone https://github.com/JakeRoggenbuck/bloom-filter-rs.git cd bloom-filter-rs Words Submodule # git submodule init git submodule update ","date":"3 December 2022","permalink":"/posts/bloom-filters/","section":"Posts","summary":"Intro # A bloom filter is a data structure that allows you to quickly identify if some data has been previously added to the structure.","title":"Bloom filters in Rust"},{"content":"","date":"3 December 2022","permalink":"/tags/concept/","section":"Tags","summary":"","title":"concept"},{"content":"","date":"3 December 2022","permalink":"/tags/data-structures/","section":"Tags","summary":"","title":"data-structures"},{"content":"","date":"3 December 2022","permalink":"/tags/language/","section":"Tags","summary":"","title":"language"},{"content":"\nnewtons-method # Implementation of newtons method of zero approximation and more generally equation solution approximation.\ndouble newtons_method(double (*func)(double), double n) { // Question... where does func(x) = n? // func(x) - n = 0 double f(double x) { return func(x) - n; } // initial arbitrary guess double guess = 0.5; printf(\u0026#34;Guess for func(x) - %.2lf = 0\\n\u0026#34;, n); printf(\u0026#34;%lf\\n\u0026#34;, guess); for (int i = 0; i \u0026lt; 7; ++i) { // update guess for next iteration // x_1 = x_0 - f(x_0) / f\u0026#39;(x_0) // (x_n+1) = x_n - f(x_n) / f\u0026#39;(x_n) guess = guess - (f(guess) / derivative(f, guess)); printf(\u0026#34;%lf\\n\u0026#34;, guess); } } ","date":"30 November 2022","permalink":"/projects/newtons-method/","section":"Projects","summary":"","title":"newtons-method"},{"content":"This month, I did 191 commits in 37 repos. I also opened 31 pull requests.\nResearch # I started a new paper that will be added to research when it\u0026rsquo;s done.\nTap # I worked on my program called Tap. This tool helps you quickly tap basic files into existence. Similar to snippets, tap generates full boiler plate files like simple make files, python with argparse setup, etc.\nFlamegraph # I started using flamegraph for auto-clock-speed\nHere is an example from Optimize read_lid_state function call #465\nMore with C # I have been continuing with using C for a handful of projects as well as my homework for a class.\nnewtons-method derive cutil jimbot c-data-structures Local List # I worked on the Inventory Management system for Local List.\n","date":"30 November 2022","permalink":"/devlogs/november-2022/","section":"Dev Logs","summary":"This month, I did 191 commits in 37 repos.","title":"November 2022"},{"content":"\npicom # picom is a compositor for X, and a fork of Compton.\nThis is a development branch, bugs to be expected\nYou can leave your feedback or thoughts in the discussion tab.\nChange Log # See Releases\nBuild # Dependencies # Assuming you already have all the usual building tools installed (e.g. gcc, python, meson, ninja, etc.), you still need:\nlibx11 libx11-xcb libXext xproto xcb xcb-damage xcb-xfixes xcb-shape xcb-renderutil xcb-render xcb-randr xcb-composite xcb-image xcb-present xcb-xinerama xcb-glx pixman libdbus (optional, disable with the -Ddbus=false meson configure flag) libconfig (optional, disable with the -Dconfig_file=false meson configure flag) libGL, libEGL (optional, disable with the -Dopengl=false meson configure flag) libpcre (optional, disable with the -Dregex=false meson configure flag) libev uthash On Debian based distributions (e.g. Ubuntu), the needed packages are\nlibxext-dev libxcb1-dev libxcb-damage0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-randr0-dev libxcb-composite0-dev libxcb-image0-dev libxcb-present-dev libxcb-xinerama0-dev libxcb-glx0-dev libpixman-1-dev libdbus-1-dev libconfig-dev libgl-dev libegl-dev libpcre2-dev libpcre3-dev libevdev-dev uthash-dev libev-dev libx11-xcb-dev meson On Fedora, the needed packages are\ndbus-devel gcc git libconfig-devel libdrm-devel libev-devel libX11-devel libX11-xcb libXext-devel libxcb-devel libGL-devel libEGL-devel meson pcre-devel pixman-devel uthash-devel xcb-util-image-devel xcb-util-renderutil-devel xorg-x11-proto-devel To build the documents, you need asciidoc\nTo build # $ git submodule update --init --recursive $ meson --buildtype=release . build $ ninja -C build Built binary can be found in build/src\nIf you have libraries and/or headers installed at non-default location (e.g. under /usr/local/), you might need to tell meson about them, since meson doesn\u0026rsquo;t look for dependencies there by default.\nYou can do that by setting the CPPFLAGS and LDFLAGS environment variables when running meson. Like this:\n$ LDFLAGS=\u0026#34;-L/path/to/libraries\u0026#34; CPPFLAGS=\u0026#34;-I/path/to/headers\u0026#34; meson --buildtype=release . build As an example, on FreeBSD, you might have to run meson with:\n$ LDFLAGS=\u0026#34;-L/usr/local/lib\u0026#34; CPPFLAGS=\u0026#34;-I/usr/local/include\u0026#34; meson --buildtype=release . build $ ninja -C build To install # $ ninja -C build install Default install prefix is /usr/local, you can change it with meson configure -Dprefix=\u0026lt;path\u0026gt; build\nHow to Contribute # Code # You can look at the Projects page, and see if there is anything that interests you. Or you can take a look at the Issues.\nNon-code # Even if you don\u0026rsquo;t want to contribute code, you can still contribute by compiling and running this branch, and report any issue you can find.\nContributions to the documents and wiki will also be appreciated.\nContributors # See CONTRIBUTORS\nThe README for the original Compton project can be found here.\nLicensing # picom is free software, made available under the MIT and MPL-2.0 software licenses. See the individual source files for details.\n","date":"30 November 2022","permalink":"/projects/picom/","section":"Projects","summary":"","title":"picom"},{"content":"\nRTC with DS1307 # Get current time with Real Time Clock using the Elegoo DS1307 Module\nResources # https://www.youtube.com/watch?v=6fSgAO36IfI https://pypi.org/project/smbus2/ https://microdigisoft.com/interfacing-rtc-ds1307-module-with-raspberry-pi-using-python/ https://datasheets.maximintegrated.com/en/ds/DS1307.pdf TODO # how to read data using i2c (using smbus2) where to read data from (from datasheet) ","date":"20 November 2022","permalink":"/projects/ds1307_rtc/","section":"Projects","summary":"","title":"DS1307_RTC"},{"content":"\nc-data-structures # A collection of data structures implemented in C.\nBuilding # gcc nobuild.c -o nobuild Running the following will put all of the executables in ./build/\n./nobuild ","date":"17 November 2022","permalink":"/projects/c-data-structures/","section":"Projects","summary":"","title":"c-data-structures"},{"content":"\n404: Not Found\n","date":"17 November 2022","permalink":"/projects/minimal-perfect-hash-gen/","section":"Projects","summary":"","title":"minimal-perfect-hash-gen"},{"content":"\nEfficiency First Color Library (EFCL) # The most simple, small, and fast terminal color text library.\nPriorities # Runtime speed Dependency size Quickstart # efcl = \u0026#34;0.1.2\u0026#34; use efcl::{color, Color, bold}; fn main() { println!(\u0026#34;{}!\u0026#34;, bold!(\u0026amp;color!(Color::RED, \u0026#34;EFCL\u0026#34;).to_string())); println!(\u0026#34;Hello, {}!\u0026#34;, color!(Color::BLUE, \u0026#34;world\u0026#34;)); } Why? # Here is a flamegraph of the auto-clock-speed project. In green is the time it takes for colored text to render. That is just over 9% of runtime cpu is taken by color formatting.\nThis is way too long for what we need it for. In auto-clock-speed, color is used sparingly and only a few default colors on top of that.\nThis library is for the most basic text coloring for the terminal and only includes the default terminal colors, no background color or text styles other than bold. This library is for speed.\n","date":"11 November 2022","permalink":"/projects/efcl/","section":"Projects","summary":"","title":"efcl"},{"content":"Here is an interesting thing that shows why compiled languages are good, specifically why Rust is great.\nTake this code example that checks an enum.\nfrom enum import Enum class Mode(Enum): Easy = 0 Hard = 1 if mode == Mode.Easy: print(\u0026#34;It\u0026#39;s easy.\u0026#34;) elif mode == Mode.Hard: print(\u0026#34;Hard mode.\u0026#34;) What happens if mode is set to None, or 2 or \u0026quot;Anything\u0026quot;. If that\u0026rsquo;s the case, neither method will be executed.\nif mode == Mode.Easy: print(\u0026#34;It\u0026#39;s easy.\u0026#34;) elif mode == Mode.Hard: print(\u0026#34;Hard mode.\u0026#34;) else: print(\u0026#34;Error?\u0026#34;) In languages like this, you will usually find a comment like this # This should never happen and like this Why? What went wrong? Time to debug to find the line that broke this.\nIn compiled languages, specifically a feature of statically typed language evaluated at compile time, mode would have a type, most likely int. This means that the options of a None type or a string cannot be represented in a variable of that type. This is cool and this happens in languages like C/C++, Java, etc. but this isn\u0026rsquo;t as good as it can get.\nIn Rust, We make invalid types unrepresentable. Here is a Rust example no more complex than the Python example, yet it insures safety that Python does not.\nThis code compiles because mode can only be Easy or Hard. The evaluation is between the same types. mode == Mode::EASY =\u0026gt; \u0026lt;Mode\u0026gt; == \u0026lt;Mode\u0026gt; =\u0026gt; type valid.\n#[derive(PartialEq)] enum Mode { EASY = 0, HARD = 1, } fn main() { let mode = Mode::EASY; if mode == Mode::EASY { println!(\u0026#34;It\u0026#39;s easy.\u0026#34;); } else if mode == Mode::HARD { println!(\u0026#34;Hard mode.\u0026#34;) } } However, if you accidentally what mode out for a string\u0026hellip;\nlet mode = \u0026#34;This is a string\u0026#34;; if mode == Mode::EASY { println!(\u0026#34;It\u0026#39;s easy.\u0026#34;); } else if mode == Mode::HARD { println!(\u0026#34;Hard mode.\u0026#34;) } You get many helpful compiler errors, like can't compare '\u0026amp;str' with 'Mode' so you know exactly what is wrong.\nAny even when C/C++ would fail, Rust gives an error letting you know what is wrong early.\nlet mode = 3; if mode == Mode::EASY { println!(\u0026#34;It\u0026#39;s easy.\u0026#34;); } else if mode == Mode::HARD { println!(\u0026#34;Hard mode.\u0026#34;) } =\u0026gt; can't compare '{integer}' with 'Mode'\n","date":"5 November 2022","permalink":"/posts/type-safety-in-rust/","section":"Posts","summary":"Here is an interesting thing that shows why compiled languages are good, specifically why Rust is great.","title":"Type safety in Rust"},{"content":" Update # In October I did 146 commits and created 9 repositories. I have been using C a lot this months because my class I am currently taking is in C. This has inspired me to write a lot of my new side projects in C. At least the ones where C makes sense as a language.\nThis month, I made an October themed fetch program. JakeRoggenbuck/spookyfetch\nAuto Clock Speed 0.1.10 # In this release, we closed and completed 76 issues. This was a relatively large release with tons of new features and lots of bug fixes.\nRelease can be found here\nAlgorithms # A friend challenged me to make a program to find anagrams in a list of words that has a better time complexity than quadratic.\nMy project can be found here in both python and rust.\nThe algorithm is most definitely better than quadratic O(n^2)\nIt loops over each word once. (Linear) and sorts the characters in the word. (Does not effect complexity) It then checks if this sorted string is a key in a dictionary. (get is O(1)) If it didn\u0026rsquo;t exist, it creates a new key value, with the word as the value and the sorted string as the key. (insert is O(1)) If it did exist, it appends the new word that matches the sorted value. (insert is O(1)) Because the only thing in the program that effects complexity is the linear loop over the words. This code has linear time complexity.\nTested with wordlist of 172787 lines long from - https://github.com/dwyl/english-words ============================================== Starting Rust real\t0m0.153s user\t0m0.133s sys\t0m0.020s ----------------- Starting Python real\t0m0.197s user\t0m0.176s sys\t0m0.020s ----------------- ","date":"31 October 2022","permalink":"/devlogs/october-2022/","section":"Dev Logs","summary":"Update # In October I did 146 commits and created 9 repositories.","title":"October 2022"},{"content":"\nclib-redef # A rewrite of the standard libraries in C for learning purposes.\nFunctions # strcmp strcpy ","date":"21 October 2022","permalink":"/projects/clib-redef/","section":"Projects","summary":"","title":"clib-redef"},{"content":"\nhomepage # Simple firefox homepage\n","date":"4 October 2022","permalink":"/projects/homepage/","section":"Projects","summary":"","title":"homepage"},{"content":"\nspookyfetch # Fetch tool but spooky for hacktoberfest\nInstall # go install github.com/jakeroggenbuck/spookyfetch@latest ","date":"4 October 2022","permalink":"/projects/spookyfetch/","section":"Projects","summary":"","title":"spookyfetch"},{"content":"\nAnagram finder # Method of finding anagrams\nTested with wordlist of 172787 lines long from - https://github.com/dwyl/english-words ============================================== Starting Rust real\t0m0.153s user\t0m0.133s sys\t0m0.020s ----------------- Starting Python real\t0m0.197s user\t0m0.176s sys\t0m0.020s ----------------- ","date":"3 October 2022","permalink":"/projects/anagram/","section":"Projects","summary":"","title":"anagram"},{"content":" T3 research # I finished the first draft of my collaborative paper, titled Observations on Every Third Digit of the Thue-Morse Sequence. It is still waiting peer review, but all of the content is finished.\nAbstract # We investigate some interesting properties of the sequence made up of every third term of the Thue-Morse sequence, and consider other similar sequences.\nThe paper can be found at jr0.org/research/t3.\nFollow up paper # The same people involved in t3 will continue to work on a follow up paper that takes a similar problems into consideration. This paper will likely be published in 4 or 5 months.\nAuto Clock Speed # This month, I fixed 7 issues in auto clock speed\nStarting college # This month, I started my freshman year at UC Davis. I am taking a Math class, CS class, and a Philosophy class.\nIn the CS class, we will be using C, so I will probably do a lot of personal projects in C for the next few months.\nOne of those such projects is jimbot - a discord bot written in C.\nI will keep doing what is now undergraduate research in the areas of mathematics, computer science, and computational biology.\n","date":"30 September 2022","permalink":"/devlogs/september-2022/","section":"Dev Logs","summary":"T3 research # I finished the first draft of my collaborative paper, titled Observations on Every Third Digit of the Thue-Morse Sequence.","title":"September 2022"},{"content":"\njimbot # Discord bot written in C to track milestones\n","date":"29 September 2022","permalink":"/projects/jimbot/","section":"Projects","summary":"","title":"jimbot"},{"content":"\nfind-slope-with-secant # Find the slope at a point of a function with the secant method\n","date":"28 September 2022","permalink":"/projects/find-slope-with-secant/","section":"Projects","summary":"","title":"find-slope-with-secant"},{"content":"\nDay # A daily screen that shows the date and tasks for the day\nBackend # Using Gin-Gonic and Go\nFrontend # Using Yew and Rust\nColor Scheme # black: #000000; oxford-blue: #14213d; orange-web: #fca311; platinum: #e5e5e5; white: #ffffff; ","date":"19 September 2022","permalink":"/projects/day/","section":"Projects","summary":"","title":"day"},{"content":"","date":"7 September 2022","permalink":"/tags/clojure/","section":"Tags","summary":"","title":"Clojure"},{"content":"\ncolorgradient-clj # Make a color gradient in Clojure!\nPython version colorgradient Rust version colorgradient-rs Julia version colorgradient-julia C version colorgradient-c Go version colorgradient-go Clojure version colorgradient-clj ","date":"7 September 2022","permalink":"/projects/colorgradient-clj/","section":"Projects","summary":"","title":"colorgradient-clj"},{"content":"\njr0.org # Currently, Hugo to make this static website.\nNew # Recently (March 2022), I added a page for my new Dev Log, jr0.org/devlogs.\nHistory # This website has been up since May 26, 2019 in some form or another.\nCurrent # Prior # Prior # First # ","date":"7 September 2022","permalink":"/projects/jr0-source/","section":"Projects","summary":"","title":"jr0-source"},{"content":"","date":"7 September 2022","permalink":"/tags/shell/","section":"Tags","summary":"","title":"Shell"},{"content":"\nPredict places that will likely have forest fires!\nFrontend (HTML/JS) # Backend (FastAPI) # ","date":"4 September 2022","permalink":"/projects/future-fire-finder/","section":"Projects","summary":"","title":"future-fire-finder"},{"content":"\nbloom-filter-rs # View blog post at jr0.org/posts/bloom-filters\nIntro # A bloom filter is a data structure that allows you to quickly identify if some data has been previously added to the structure. What makes a bloom filter unique is that is that it gives up full accuracy for huge speed boost. A bloom filter has small false positive rate, and this rate can be decreased by using more memory and more hash algorithms, however you can find an optimal amount of memory and hash algorithm count to achieve great speed while still maintaining lower memory than a normal list. This specific implementation uses three different hashing algorithms.\nUse cases # Bloom filters are very convenient for many different use cases.\nMy favorite application is for checking if a username or unique id exists somewhere. Bloom filters have very low memory usage as well as being fast, so for a solution that doesn\u0026rsquo;t need 100% accuracy and can get away with something close to 99%, then a bloom filter might be the correct structure.\nImplementation # We will define a structure in Rust to represent the bloom filter.\nstruct BloomFilter { size: usize, hash_count: i8, bitvector: BitVec, } Bloom filters usually have two traits (methods) associated with the structure.\nadd an item to the structure fn add(\u0026amp;mut self, value: String); check if an item likely exists in the structure fn check(\u0026amp;self, value: String) -\u0026gt; bool; We define these traits for the structure by \u0026ldquo;Implementing them like this\u0026rdquo;.\ntrait Filter { fn add(\u0026amp;mut self, value: String); fn check(\u0026amp;self, value: String) -\u0026gt; bool; fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32; } impl Filter for BloomFilter { fn add(\u0026amp;mut self, value: String) { // ... } fn check(\u0026amp;self, value: String) -\u0026gt; bool { // ... } fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32 { // ... } } For the add trait, we need to call each hash function for the value given to get a likely unique set of keys for the value.\nfn add(\u0026amp;mut self, value: String) { for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; self.bitvector.set(k, true); } } We need to do something similar to check if a value has been added.\nfn check(\u0026amp;self, value: String) -\u0026gt; bool { let mut acc = 0; for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; if self.bitvector.get(k).unwrap_or(false) { acc += 1; } } return acc \u0026gt;= self.hash_count; } The hash function is just a collection of the other hash functions.\nfn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32 { let functions: [\u0026amp;dyn Fn(String) -\u0026gt; i32; 3] = [\u0026amp;hash_1, \u0026amp;hash_2, \u0026amp;hash_3]; return functions[i](s); } Here are the other hash functions.\nfn hash_1(s: String) -\u0026gt; i32 { let mut hash = 0; let size = s.len(); for i in 0..size { hash = hash + (s.chars().nth(i)).unwrap() as i32 - 0x30; } hash } fn hash_2(s: String) -\u0026gt; i32 { let mut hash = 7; let size = s.len(); for i in 0..size { hash = (hash * 31 + (s.chars().nth(i)).unwrap() as i32 - 0x30) % size as i32; } hash % size as i32 } fn hash_3(s: String) -\u0026gt; i32 { (hash_2(s) + 7) * 3 } All together, it should look like this.\nfn hash_1(s: String) -\u0026gt; i32 { let mut hash = 0; let size = s.len(); for i in 0..size { hash = hash + (s.chars().nth(i)).unwrap() as i32 - 0x30; } hash } fn hash_2(s: String) -\u0026gt; i32 { let mut hash = 7; let size = s.len(); for i in 0..size { hash = (hash * 31 + (s.chars().nth(i)).unwrap() as i32 - 0x30) % size as i32; } hash % size as i32 } fn hash_3(s: String) -\u0026gt; i32 { (hash_2(s) + 7) * 3 } struct BloomFilter { size: usize, hash_count: i8, bitvector: BitVec, } trait Filter { fn add(\u0026amp;mut self, value: String); fn check(\u0026amp;self, value: String) -\u0026gt; bool; fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32; } impl Filter for BloomFilter { fn add(\u0026amp;mut self, value: String) { for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; self.bitvector.set(k, true); } } fn check(\u0026amp;self, value: String) -\u0026gt; bool { let mut acc = 0; for x in 0..self.hash_count { let v = self.hash(value.clone(), x.try_into().unwrap()); let k = v as usize % self.size; if self.bitvector.get(k).unwrap_or(false) { acc += 1; } } return acc \u0026gt;= self.hash_count; } fn hash(\u0026amp;self, s: String, i: usize) -\u0026gt; i32 { let functions: [\u0026amp;dyn Fn(String) -\u0026gt; i32; 3] = [\u0026amp;hash_1, \u0026amp;hash_2, \u0026amp;hash_3]; return functions[i](s); } } Other types of searches # For testing purposes, we can use two different types of searches to compare against the bloom filter.\nLinear Search # Linear search iterates through the array, checking if it exists. This has a linear time complexity O(n) and is not ideal for this and many other use cases.\n/// Search for the term using linear search fn linear_search(array: \u0026amp;[String], term: String) -\u0026gt; bool { for c in array { if c == term.as_str() { return true; } } return false; } Bogo Search # Bogo search is an algorithm that was designed to be purposefully bad. This algorithm has a time complexity of factorial time O(n!). This algorithm should never ever be used.\nIt essentially picks a random number to use at an index to check if the item is at that index. If it\u0026rsquo;s not, it repeats.\n/// Search for the term using the worst search algorithm, bogo search fn bogo_search(array: \u0026amp;[String], term: String) -\u0026gt; bool { let mut num: usize; loop { num = thread_rng().gen_range(0..array.len()); if array[num] == term.as_str() { return true; } } } Testing and Setup # The rest of the code in the project is for setting up the data to be searched and testing of the search algorithms.\nfn fill_array_and_bloom_filter(num_vec: \u0026amp;mut [String], bf: \u0026amp;mut BloomFilter) -\u0026gt; Result\u0026lt;()\u0026gt; { let file = File::open(\u0026#34;english-words/words.txt\u0026#34;)?; let reader = BufReader::new(file); let mut index = 0; for line in reader.lines() { if index \u0026lt; num_vec.len() { let l = line?; // Add word to array num_vec[index] = l.clone(); // Add word to bloom filter bf.add(l); } index += 1; } Ok(()) } fn main() { // Set up bloom filter let mut bf = BloomFilter { bitvector: BitVec::from_elem(10000, false), hash_count: 3, size: 10000, }; // Set up num vec let mut num_vec: Vec\u0026lt;String\u0026gt; = vec![String::new(); 17000]; fill_array_and_bloom_filter(\u0026amp;mut num_vec, \u0026amp;mut bf).unwrap(); num_vec.shuffle(\u0026amp;mut thread_rng()); let length = num_vec.len(); // Pick random term let mut rng = rand::thread_rng(); let x: usize = rng.gen_range(0..num_vec.len()); let term: String = num_vec[x].clone(); println!(\u0026#34;The randomly selected term is \u0026#39;{term}\u0026#39;\u0026#34;); // Calculate all of the hashes for the term let one = hash_1(term.clone()); let two = hash_2(term.clone()); let three = hash_3(term.clone()); println!(\u0026#34;The hashes for \u0026#39;{term}\u0026#39; are {one}, {two}, {three}\\n\u0026#34;); println!( \u0026#34;This will test how fast the word \u0026#39;{term}\u0026#39; can be found in the array of {length} words.\u0026#34; ); // Test the time it takes for linear search let before = Instant::now(); for _ in 0..100 { linear_search(\u0026amp;mut num_vec, term.clone()); } println!(\u0026#34;Elapsed time for linear_search: {:.2?}\u0026#34;, before.elapsed()); // Test the time it takes for bloom filter check let before = Instant::now(); for _ in 0..100 { bf.check(term.clone()); } println!( \u0026#34;Elapsed time for bloom filter check: {:.2?}\u0026#34;, before.elapsed() ); // Test the time is takes for bogo search let before = Instant::now(); for _ in 0..100 { bogo_search(\u0026amp;mut num_vec, term.clone()); } println!(\u0026#34;Elapsed time for bogo_search: {:.2?}\u0026#34;, before.elapsed()); } Results # The randomly selected term is \u0026#39;amicabilities\u0026#39; The hashes for \u0026#39;amicabilities\u0026#39; are 736, 11, 54 This will test how fast the word \u0026#39;amicabilities\u0026#39; can be found in the array of 17000 words. Elapsed time for linear_search: 220.81ms Elapsed time for bloom filter check: 3.61ms Elapsed time for bogo_search: 4.64s The randomly selected term is \u0026#39;Aldermaston\u0026#39; The hashes for \u0026#39;Aldermaston\u0026#39; are 618, 0, 21 This will test how fast the word \u0026#39;Aldermaston\u0026#39; can be found in the array of 17000 words. Elapsed time for linear_search: 245.29ms Elapsed time for bloom filter check: 2.69ms Elapsed time for bogo_search: 5.53s The randomly selected term is \u0026#39;Achille\u0026#39; The hashes for \u0026#39;Achille\u0026#39; are 354, 1, 24 This will test how fast the word \u0026#39;Achille\u0026#39; can be found in the array of 17000 words. Elapsed time for linear_search: 273.41ms Elapsed time for bloom filter check: 1.30ms Elapsed time for bogo_search: 6.68s Setting up the project # Cloning # git clone https://github.com/JakeRoggenbuck/bloom-filter-rs.git cd bloom-filter-rs Words Submodule # git submodule init git submodule update ","date":"3 September 2022","permalink":"/projects/bloom-filter-rs/","section":"Projects","summary":"","title":"bloom-filter-rs"},{"content":"\nDataframe Function Speed Analysis # Testing a bunch of ways to apply a function to each item in a dataframe.\nGoal # Find the optimal way to apply different types of functions to a large dataframe.\nResults # Each test has been run 5 times, timed and averaged with the functions time_function, and time_average respectively.\nError bars are present, however they are very small (in the hundredths of seconds).\n","date":"3 September 2022","permalink":"/projects/dataframe-function-speed-analysis/","section":"Projects","summary":"","title":"dataframe-function-speed-analysis"},{"content":"","date":"3 September 2022","permalink":"/tags/jupyter-notebook/","section":"Tags","summary":"","title":"Jupyter Notebook"},{"content":" Work # I just finished a month of work at Lucid Automation. I have been working with Go using Gin-Gonic and React JS. I have also been working with Keras and Tensorflow in Python. It has been an amazing experience and I have learned tons already.\nHackathons # In this month, I also did two hackathons, Plant Here and Future Fire Finder.\n1. Plant Here 🌿 # The first was a project called Plant here. Its goal is to help with food insecuritis by finding the best places on a map to plant certain types of food, ones with the correct amount of rain and soil pH.\nThe website can be found at https://PlantHere.org\n2. Future Fire Finder 🔥 # Predict places that will likely have forest fires.\n","date":"31 August 2022","permalink":"/devlogs/august-2022/","section":"Dev Logs","summary":"Work # I just finished a month of work at Lucid Automation.","title":"August 2022"},{"content":"\nbloom-filters # Bloom filter written in C\nView the blog post! https://jr0.org/posts/bloom-filters/\nIntro # A bloom filter is a data structure that allows you to quickly identify if some data has been previously added to the structure. What makes a bloom filter unique is that is that it gives up full accuracy for huge speed boost. A bloom filter has small false positive rate, and this rate can be decreased by using more memory and more hash algorithms, however you can find an optimal amount of memory and hash algorithm count to achieve great speed while still maintaining lower memory than a normal list. This specific implementation uses three different hashing algorithms.\nUse cases # Bloom filters are very convenient for many different use cases.\nMy favorite application is for checking if a username or unique id exists somewhere. Bloom filters have very low memory usage as well as being fast, so for a solution that doesn\u0026rsquo;t need 100% accuracy and can get away with something close to 99%, then a bloom filter might be the correct structure.\n\u0026hellip;\nView the rest of the post at https://jr0.org/posts/bloom-filters/\n","date":"25 August 2022","permalink":"/projects/bloom-filters/","section":"Projects","summary":"","title":"bloom-filters"},{"content":"\nPlant Here! # This simple web application (our submission to the 2022 Amazon Sustainability Data Initiaitve Hackathon) allows users to determine what crops would thrive best in their region based on rainfall data and soil pH analyzed with a simple machine learning model.\nFrontend (ReactJS) # Frontend is a very lightweight single webpage built with HTML/CSS, Vanilla JS, and Petite Vue.\nBackend (FastAPI) # Backend is written in FastAPI (more details soon).\nSetup Instructions # Install the required Python packages pip install -r requirements.txt Run the server inside the backend directory python3 main.py And you will see this! INFO: Started server process [18369] INFO: Waiting for application startup. INFO: Application startup complete. INFO: Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit) Additional Credits # Floating plant icon created by Andinur on www.flaticon.com.\n","date":"23 August 2022","permalink":"/projects/asdi-global-hackathon/","section":"Projects","summary":"","title":"ASDI-Global-Hackathon"},{"content":"\nAmazon Sustainability Data Initiative\n","date":"23 August 2022","permalink":"/projects/aws-asdi-fire-finder-backed/","section":"Projects","summary":"","title":"aws-asdi-fire-finder-backed"},{"content":"","date":"16 August 2022","permalink":"/tags/assembly/","section":"Tags","summary":"","title":"Assembly"},{"content":"\none-time-pad-generator-asm # ","date":"16 August 2022","permalink":"/projects/one-time-pad-generator-asm/","section":"Projects","summary":"","title":"one-time-pad-generator-asm"},{"content":"\nRust Command Line Chat (RCLC) # Structure # Install # The ~/.rclc/ dir needs to be created. So do the two FIFOs. Do this by running the following.\n./scripts/install.sh Uninstall # ./scripts/uninstall.sh ","date":"8 August 2022","permalink":"/projects/rclc/","section":"Projects","summary":"","title":"rclc"},{"content":"\nhyper-minimal-loaders # A hyper minimal loader bar only 1.9 KB source.\nuse hyper_minimal_loaders::{Count, Counter}; use std::{thread, time}; fn main() { let mut counter = Count::default(); loop { counter.show(); counter.tick(); if counter.finished() { break; } thread::sleep(time::Duration::from_millis(100)); } } What is hyper-minimal-loaders? # It\u0026rsquo;s just a simple percentage loader\nWhy? # Sometimes you are making a program that will take hours to run, say you are computing large values of PI or something similar, and you want to know how long a certain operation will take. You may not necessarily want to print a bunch of info about the progress, especially every operation, because that would slow down the computation. You simply want to know if it\u0026rsquo;s going to take days, weeks, or months to complete. This was the type of thing that I needed when doing math research for t3 paper.\nHere is an example of me implementing one of these super simple loaders written directly in the code to compute these large numbers. I later decided to make this library so that I could abstract the logic outside of the math computation code, and instead use my own library.\nlet one_percent = MAX / 100; let mut percents_done = 0; loop { if t_location \u0026gt; one_percent * percents_done { percents_done += 1; print!(\u0026#34;\\x1b[1A\\x1b[2K\u0026#34;); println!(\u0026#34;{percents_done}%\u0026#34;); } // -- snip -- source found at https://github.com/JakeRoggenbuck/T3-Paper-Code/blob/main/rl-3-ratio/src/main.rs if t_location \u0026gt; MAX { break; } last = x; } print!(\u0026#34;\\x1b[1A\\x1b[2K\u0026#34;); println!(\u0026#34;{percents_done}%\u0026#34;); } ","date":"6 August 2022","permalink":"/projects/hyper-minimal-loaders/","section":"Projects","summary":"","title":"hyper-minimal-loaders"},{"content":"\nJEC-rs # Jabacat\u0026rsquo;s Easy Config\nJEC-py | JEC-rs | JEC-go | JEC-c | JEC-c++ | JEC-zig | JEC-ts\nAPI # ConfigFile - exists - remove - create - from_home ConfigDir - exists - remove - create - from_home Usage # let conf = ConfigFile { path: \u0026#34;./test.yml\u0026#34;.to_string(), }; if !conf.exists() { conf.create(); } conf.remove(); let conf = ConfigDir { path: \u0026#34;./config/\u0026#34;.to_string(), }; if !conf.exists() { conf.create(); } conf.remove(); let conf = ConfigFile::from_home(\u0026#34;./test.yml\u0026#34;.to_string()); let conf = ConfigDir::from_home(\u0026#34;./config/\u0026#34;.to_string()); ","date":"3 August 2022","permalink":"/projects/jec-rs/","section":"Projects","summary":"","title":"JEC-rs"},{"content":"\nJEC-py # Jabacat\u0026rsquo;s Easy Config\nJEC-py | JEC-rs | JEC-go | JEC-c | JEC-c++ | JEC-zig | JEC-ts\nAPI # ConfigFile - from_home - exists - remove - create ConfigDir - from_home - exists - remove - create Usage # conf_1 = ConfigFile(\u0026#34;./config.yml\u0026#34;) conf_2 = ConfigFile.from_home(\u0026#34;./config.yml\u0026#34;) dir_1 = ConfigDir(\u0026#34;./config/\u0026#34;) dir_2 = ConfigDir.from_home(\u0026#34;./config/\u0026#34;) if not dir_1.exists(): dir_1.create() dir_1.remove() ","date":"2 August 2022","permalink":"/projects/jec-py/","section":"Projects","summary":"","title":"JEC-py"},{"content":"\nJEC-go # Jabacat\u0026rsquo;s Easy Config\nJEC-py | JEC-rs | JEC-go | JEC-c++ | JEC-kt | JEC-c | JEC-zig | JEC-ts\nAPI # ConfigFile - Exists - Remove - Create - FromHome ConfigDir - Exists - Remove - Create - FromHome Usage # conf := ConfigFile{\u0026#34;./test.conf\u0026#34;} if !conf.Exists() { conf.Create() } dir := ConfigDir{\u0026#34;./config/\u0026#34;} if !dir.Exists() { dir.Create() } conf.Remove() dir.Remove() conf = ConfigFile{\u0026#34;\u0026#34;}.FromHome(\u0026#34;./test.conf\u0026#34;) strings.Contains(conf.path, \u0026#34;home\u0026#34;) // true at /home/user/test.conf ","date":"1 August 2022","permalink":"/projects/jec-go/","section":"Projects","summary":"","title":"JEC-go"},{"content":"This month, I made 231 commits in 30 different repositories. One of my favorite projects was BestNextStep which was a project that I thought of many years ago but was not able to fully develop until the last few years. I have also been working on a math paper with the current (tentative to change) title of Observations of Every Third Digit of the Thue-Morse Sequence. This month I created 11 repositories, two are cli applications in Go. They are timely for keeping track of hours for work and port-checker for checking open ports on a machine. Some things that I have been testing is Svelte, Graphql, gin-gonic. I will be starting work on August first as a Software Developer and I am very excited.\n","date":"31 July 2022","permalink":"/devlogs/july-2022/","section":"Dev Logs","summary":"This month, I made 231 commits in 30 different repositories.","title":"July 2022"},{"content":"\nPort Checker # Check for open tcp and tcp6 ports and their process info for server debugging\nInstall # git clone https://github.com/JakeRoggenbuck/port-checker.git cd port-checker go install ","date":"31 July 2022","permalink":"/projects/port-checker/","section":"Projects","summary":"","title":"port-checker"},{"content":"\nTimely # Keep track of work hour in the command line\nWhy # If you work remotely and need to log a certain amount of hours a week and may have a hard time keeping track, timely can help you track your start and end time of work sessions in the terminal.\nUsage # Usage of timely: -check Set to check -inline No newline after print -no-color No color output -no-word No word in output -off Set to off -toggle Set to toggle -work Set to work Add to prompt # In your bashrc or similar\nPS1=\u0026#34;$(timely -check -inline) \u0026#34; Setup # Create ~/.local/share/timely/ and ~/.local/share/timely/state\nmkdir -p ~/.local/share/timely/ printf off ~/.local/share/timely/state printf off ~/.local/share/timely/times Outputs # ","date":"31 July 2022","permalink":"/projects/timely/","section":"Projects","summary":"","title":"timely"},{"content":"\nstructured-data-format-SoC-first-week # Summer Of Code (SoC) First Week - Structured Data Format\nThis week\u0026rsquo;s challenge # Build a new and unique structured data format similar to JSON or TOML with at least two intentional design decisions that improve upon some aspect of an existing data structure format.\nHow to participate # Fork this repo and start your work in your fork of the project! Projects are due on Sunday the 31st at 9pm PDT. Requirements # Write two paragraphs about your new data format (including two intentional design decisions and why) Give three examples of this data format being used Make a basic interpreter for this new file format and a library in any language with at least two functions ( loads, dumps). Optionally add load and dump (More info below) Have fun and be creative, make this a real thing that you will use in the future # Loads string of your new format into a native object obj = myformat.loads(\u0026#34;text\u0026#34;) # Write a string of your format from native object str = myformat.dumps(obj) Resources # https://toml.io/en/ https://yaml.org/ https://www.json.org/json-en.html https://www.geeksforgeeks.org/json-load-in-python/ https://www.geeksforgeeks.org/json-dump-in-python/ https://www.geeksforgeeks.org/json-loads-in-python/ https://www.geeksforgeeks.org/json-dumps-in-python/ What is Summer of Code? # Summer of Code is an initiative to encourage people to build cool and useful software over the summer. And most importantly to learn and have fun!!\n","date":"25 July 2022","permalink":"/projects/structured-data-format-soc-first-week/","section":"Projects","summary":"","title":"structured-data-format-SoC-first-week"},{"content":"\nArea API (Example Project) # area-api is a project to teach how to create a rest api using Gin Gonic\n","date":"12 July 2022","permalink":"/projects/area-api/","section":"Projects","summary":"","title":"area-api"},{"content":"\nObservations on Every Third Digit of the Thue-Morse Sequence # Adam Hutchings | Henry Hutchings | Jake Roggenbuck Abstract # We investigate some interesting properties of the sequence made up of every third term of the Thue-Morse sequence, and consider other similar sequences.\n","date":"1 July 2022","permalink":"/projects/t3-paper-code/","section":"Projects","summary":"","title":"T3-Paper-Code"},{"content":"","date":"1 July 2022","permalink":"/tags/tex/","section":"Tags","summary":"","title":"TeX"},{"content":"This month I have committed to keeping up three system languages (Go, Rust, C) to learn more about backend tools and system programs. I also keep up my skills with Python because it is a great language to know. I made a library called Sense and wrote it in Go, Rust, C, and Python. I also wrote a preprocesor for Go in Go called Macaroon. I also wrote a study tool called study-cli in Go as well. I also continued to work on auto-clock-speed, with 1.0 on its way.\n","date":"30 June 2022","permalink":"/devlogs/june-2022/","section":"Dev Logs","summary":"This month I have committed to keeping up three system languages (Go, Rust, C) to learn more about backend tools and system programs.","title":"June 2022 - Go, C, and Rust!"},{"content":"\nsense-go # Sense the directories around you, are they git repositories, what language, etc.\nLanguages # 🐍 sense-py || 🦀 sense-rs || 🐹 gosense || 🇨 sense-c\nWhy? # Why so many langs? # Because I write projects pretty regularly in all of these languages and want a consistent API and available library support for all of them.\nAPI # Git # has_git(path string) bool is_local_git(path string) bool Language # get_lang(path string) Lang Example # func main() { lang := get_lang(\u0026#34;./\u0026#34;) fmt.Println(lang.String()) git := has_git(\u0026#34;./\u0026#34;) if git { fmt.Println(\u0026#34;Is git!\u0026#34;) } else { fmt.Println(\u0026#34;Is not git.\u0026#34;) } local := is_local_git(\u0026#34;./\u0026#34;) if local { fmt.Println(\u0026#34;Is local!\u0026#34;) } else { fmt.Println(\u0026#34;Is not local.\u0026#34;) } } Supported langs # Python JavaScript Rust Java Go TypeScript C CPP Contributing # If you would like to add features or language support, that would be amazing!\n","date":"29 June 2022","permalink":"/projects/gosense/","section":"Projects","summary":"","title":"gosense"},{"content":"\nsense-c # Sense the directories around you, are they git repositories, what language, etc.\nLanguages # 🐍 sense-py || 🦀 sense-rs || 🐹 gosense || 🇨 sense-c\nWhy? # Why so many langs? # Because I write projects pretty regularly in all of these languages and want a consistent API and available library support for all of them.\nAPI # Git # int has_git(char *path); int is_local_git(char *path); git.h\nLanguage # enum LANG get_lang(char *path); Example # int main() { int lang = get_lang(\u0026#34;./\u0026#34;); printf(\u0026#34;%s\\n\u0026#34;, get_lang_name(lang)); int git = has_git(\u0026#34;./\u0026#34;); if (git) { printf(\u0026#34;Is git!\\n\u0026#34;); } else { printf(\u0026#34;Is not git.\\n\u0026#34;); } int local = is_local_git(\u0026#34;./\u0026#34;); if (local) { printf(\u0026#34;Is local!\\n\u0026#34;); } else { printf(\u0026#34;Is not local.\\n\u0026#34;); } return 0; } Supported langs # Python JavaScript Rust Java Go TypeScript C CPP Contributing # If you would like to add features or language support, that would be amazing!\n","date":"29 June 2022","permalink":"/projects/sense-c/","section":"Projects","summary":"","title":"sense-c"},{"content":"\nsense-py # Sense the directories around you, are they git repositories, what language, etc.\nLanguages # 🐍 sense-py || 🦀 sense-rs || 🐹 gosense || 🇨 sense-c\nWhy? # Why so many langs? # Because I write projects pretty regularly in all of these languages and want a consistent API and available library support for all of them.\nAPI # Git # has_git(path: str) -\u0026gt; bool is_local_git(path: str) -\u0026gt; bool Language # get_lang(path: str) -\u0026gt; Lang Example # def main(): language = lang.get_lang(\u0026#34;./\u0026#34;) print(language) has_git_dir = git.has_git(\u0026#34;./\u0026#34;) if has_git_dir: print(\u0026#34;Is git!\u0026#34;) else: print(\u0026#34;Is not git.\u0026#34;) local = git.is_local_git(\u0026#34;./\u0026#34;) if local: print(\u0026#34;Is local!\u0026#34;) else: print(\u0026#34;Is not local.\u0026#34;) Supported langs # Python JavaScript Rust Java Go TypeScript C CPP Contributing # If you would like to add features or language support, that would be amazing!\n","date":"29 June 2022","permalink":"/projects/sense-py/","section":"Projects","summary":"","title":"sense-py"},{"content":"\nsense-rs # Sense the directories around you, are they git repositories, what language, etc.\nLanguages # 🐍 sense-py || 🦀 sense-rs || 🐹 gosense || 🇨 sense-c\nWhy? # Why so many langs? # Because I write projects pretty regularly in all of these languages and want a consistent API and available library support for all of them.\nAPI # Git # has_git(path: String) -\u0026gt; bool; is_local_git(path: String) -\u0026gt; bool; Language # get_lang(path: String) -\u0026gt; Lang; Example # fn main() { let language = get_lang(\u0026#34;./\u0026#34;.to_string()); println!(\u0026#34;{}\u0026#34;, language); let git_dir = has_git(\u0026#34;./\u0026#34;.to_string()); if git_dir { println!(\u0026#34;Is git!\u0026#34;); } else { println!(\u0026#34;Is not git.\u0026#34;); } let local = is_local_git(\u0026#34;./\u0026#34;.to_string()); if local { println!(\u0026#34;Is local!\u0026#34;); } else { println!(\u0026#34;Is not local.\u0026#34;); } } Supported langs # Python JavaScript Rust Java Go TypeScript C CPP Contributing # If you would like to add features or language support, that would be amazing!\n","date":"29 June 2022","permalink":"/projects/sense-rs/","section":"Projects","summary":"","title":"sense-rs"},{"content":"\nCosmic Ray Detector # If I find a cosmic ray with this, I will publish a paper about it.\nBuild # ./scripts/build.sh Install # ./scripts/install.sh ","date":"24 June 2022","permalink":"/projects/cosmic-ray-detector/","section":"Projects","summary":"","title":"cosmic-ray-detector"},{"content":"\nDiri-c # DIRectory Info tool written in C that lets you look at a summary of a directory and which projects are using a version control system and if they are connected to a remote control system.\nWhy? # because\u0026hellip; I have too many directories\nSome of these are local git repos with github remotes, some are git repos with no remotes, and some are not using git at all.\nImage # Build # ./scripts/build.sh Install # ./scripts/install.sh ","date":"22 June 2022","permalink":"/projects/diri-c/","section":"Projects","summary":"","title":"diri-c"},{"content":"\nCoveRs # Code coverage for Rust in Rust\n","date":"20 June 2022","permalink":"/projects/covers/","section":"Projects","summary":"","title":"covers"},{"content":"\nCVE Binary Tool quick start / README # The CVE Binary Tool is a free, open source tool to help you find known vulnerabilities in software, using data from the National Vulnerability Database (NVD) list of Common Vulnerabilities and Exposures (CVEs).\nThe tool has two main modes of operation:\nA binary scanner which helps you determine which packages may have been included as part of a piece of software. There are around 100 checkers which focus on common, vulnerable open source components such as openssl, libpng, libxml2 and expat. Tools for scanning known component lists in various formats, including .csv, several linux distribution package lists, language specific package scanners and several Software Bill of Materials (SBOM) formats. It is intended to be used as part of your continuous integration system to enable regular vulnerability scanning and give you early warning of known issues in your supply chain.\nFor more details, see our documentation or this quickstart guide\nCVE Binary Tool quick start / README Installing CVE Binary Tool Most popular usage options Finding known vulnerabilities using the binary scanner Finding known vulnerabilities in a list of components Scanning an SBOM file for known vulnerabilities Using the tool offline Output Options Full option list Configuration Using CVE Binary Tool in GitHub Actions Binary checker list Language Specific checkers Java Javascript Python Limitations Requirements Feedback \u0026amp; Contributions Security Issues Installing CVE Binary Tool # CVE Binary Tool can be installed using pip:\npip install cve-bin-tool You can also do pip install --user -e . to install a local copy which is useful if you\u0026rsquo;re trying the latest code from the cve-bin-tool github or doing development. The Contributor Documentation covers how to set up for local development in more detail.\nMost popular usage options # Finding known vulnerabilities using the binary scanner # To run the binary scanner on a directory or file:\ncve-bin-tool \u0026lt;directory/file\u0026gt; Note that this option will also use any language specific checkers to find known vulnerabilities in components.\nFinding known vulnerabilities in a list of components # To scan a comma-delimited (CSV) or JSON file which lists dependencies and versions:\ncve-bin-tool --input-file \u0026lt;filename\u0026gt; Note that the --input-file option can also be used to add extra triage data like remarks, comments etc. while scanning a directory so that output will reflect this triage data and you can save time of re-triaging (Usage: cve-bin-tool -i=test.csv /path/to/scan). A VEX file (which may be created using the --vex command line option) can also be used as a triage file. A VEX file is detected if the file suffix is \u0026lsquo;.vex\u0026rsquo;.\nScanning an SBOM file for known vulnerabilities # To scan a software bill of materials file (SBOM):\ncve-bin-tool --sbom \u0026lt;sbom_filetype\u0026gt; --sbom-file \u0026lt;sbom_filename\u0026gt; Valid SBOM types are SPDX, CycloneDX, and SWID.\nUsing the tool offline # Specifying the --offline option when running a scan ensures that cve-bin-tool doesn\u0026rsquo;t attempt to download the latest database files or to check for a newer version of the tool.\nNote that you will need to obtain a copy of the vulnerability data before the tool can run in offline mode. The offline how-to guide contains more information on how to set up your database.\nOutput Options # The CVE Binary Tool provides console-based output by default. If you wish to provide another format, you can specify this and a filename on the command line using --format. The valid formats are CSV, JSON, console, HTML and PDF. The output filename can be specified using the --output-file flag.\nThe reported vulnerabilities can additionally be reported in the Vulnerability Exchange (VEX) format by specifying --vex command line option. The generated VEX file can then be used as an --input-file to support a triage process.\nIf you wish to use PDF support, you will need to install the reportlab library separately.\nIf you intend to use PDF support when you install cve-bin-tool you can specify it and report lab will be installed as part of the cve-bin-tool install:\npip install cve-bin-tool[PDF] If you\u0026rsquo;ve already installed cve-bin-tool you can add reportlab after the fact using pip:\npip install --upgrade reportlab Note that reportlab was taken out of the default cve-bin-tool install because it has a known CVE associated with it ( CVE-2020-28463). The cve-bin-tool code uses the recommended mitigations to limit which resources added to PDFs, as well as additional input validation. This is a bit of a strange CVE because it describes core functionality of PDFs: external items, such as images, can be embedded in them, and thus anyone viewing a PDF could load an external image (similar to how viewing a web page can trigger external loads). There\u0026rsquo;s no inherent \u0026ldquo;fix\u0026rdquo; for that, only mitigations where users of the library must ensure only expected items are added to PDFs at the time of generation.\nSince users may not want to have software installed with an open, unfixable CVE associated with it, we\u0026rsquo;ve opted to make PDF support only available to users who have installed the library themselves. Once the library is installed, the PDF report option will function.\nFull option list # Usage: cve-bin-tool \u0026lt;directory/file to scan\u0026gt;\noptional arguments: -h, --help show this help message and exit -e, --exclude exclude path while scanning -V, --version show program's version number and exit --disable-version-check skips checking for a new version --detailed display detailed report --disable-validation-check skips checking xml files against schema --offline operate in offline mode\tCVE Data Download: -n {json,api}, --nvd {json,api} choose method for getting CVE lists from NVD -u {now,daily,never,latest}, --update {now,daily,never,latest} update schedule for NVD database (default: daily) --nvd-api-key NVD_API_KEY specify NVD API key (used to improve NVD rate limit) Input: directory directory to scan -i INPUT_FILE, --input-file INPUT_FILE provide input filename -C CONFIG, --config CONFIG provide config file -L PACKAGE_LIST, --package-list PACKAGE_LIST provide package list --sbom {spdx,cyclonedx,swid} specify type of software bill of materials (sbom) (default: spdx) --sbom-file SBOM_FILE provide sbom filename Output: -q, --quiet suppress output -l {debug,info,warning,error,critical}, --log {debug,info,warning,error,critical} log level (default: info) -o OUTPUT_FILE, --output-file OUTPUT_FILE provide output filename (default: output to stdout) --html-theme HTML_THEME provide custom theme directory for HTML Report -f {csv,json,console,html,pdf}, --format {csv,json,console,html,pdf} update output format (default: console) -c CVSS, --cvss CVSS minimum CVSS score (as integer in range 0 to 10) to report (default: 0) -S {low,medium,high,critical}, --severity {low,medium,high,critical} minimum CVE severity to report (default: low) --report Produces a report even if there are no CVE for the respective output format -A [\u0026lt;distro_name\u0026gt;-\u0026lt;distro_version_name\u0026gt;], --available-fix [\u0026lt;distro_name\u0026gt;-\u0026lt;distro_version_name\u0026gt;] Lists available fixes of the package from Linux distribution -b [\u0026lt;distro_name\u0026gt;-\u0026lt;distro_version_name\u0026gt;], --backport-fix [\u0026lt;distro_name\u0026gt;-\u0026lt;distro_version_name\u0026gt;] Lists backported fixes if available from Linux distribution --affected-versions Lists versions of product affected by a given CVE (to facilitate upgrades) --vex VEX Provide vulnerability exchange (vex) filename Merge Report: -a INTERMEDIATE_PATH, --append INTERMEDIATE_PATH provide path for saving intermediate report -t TAG, --tag TAG provide a tag to differentiate between multiple intermediate reports -m INTERMEDIATE_REPORTS, --merge INTERMEDIATE_REPORTS comma separated intermediate reports path for merging -F TAGS, --filter TAGS comma separated tags to filter out intermediate reports Checkers: -s SKIPS, --skips SKIPS comma-separated list of checkers to disable -r RUNS, --runs RUNS comma-separated list of checkers to enable Database Management: --export EXPORT export database filename --import IMPORT import database filename Deprecated: -x, --extract autoextract compressed files CVE Binary Tool autoextracts all compressed files by default now For further information about all of these options, please see the CVE Binary Tool user manual.\nNote: For backward compatibility, we still support csv2cve command for producing CVEs from csv but we recommend using the --input-file command going forwards.\n-L or --package-list option runs a CVE scan on installed packages listed in a package list. It takes a python package list (requirements.txt) or a package list of packages of systems that has dpkg, pacman or rpm package manager as an input for the scan. This option is much faster and detects more CVEs than the default method of scanning binaries.\nYou can get a package list of all installed packages in\na system using dpkg package manager by running dpkg-query -W -f '${binary:Package}\\n' \u0026gt; pkg-list a system using pacman package manager by running pacman -Qqe \u0026gt; pkg-list a system using rpm package manager by running rpm -qa --queryformat '%{NAME}\\n' \u0026gt; pkg-list in the terminal and provide it as an input by running cve-bin-tool -L pkg-list for a full package scan.\nConfiguration # You can use --config option to provide configuration file for the tool. You can still override options specified in config file with command line arguments. See our sample config files in the test/config\nUsing CVE Binary Tool in GitHub Actions # If you want to integrate cve-bin-tool as a part of your github action pipeline. You can checkout our example github action.\nBinary checker list # The following checkers are available for finding components in binary files:\nAvailable checkers accountsservice avahi bash bind binutils bolt bubblewrap busybox bzip2 commons_compress cronie cryptsetup cups curl dbus dnsmasq dovecot dpkg enscript expat ffmpeg freeradius ftp gcc gimp glibc gnomeshell gnupg gnutls gpgme gstreamer gupnp haproxy hdf5 hostapd hunspell icecast icu irssi jacksondatabind kbd kerberos kexectools libarchive libbpg libdb libebml libgcrypt libical libjpeg_turbo liblas libnss librsvg libseccomp libsndfile libsolv libsoup libsrtp libssh2 libtiff libvirt libvncserver libxslt lighttpd logrotate lua mariadb mdadm memcached mtr mysql nano ncurses nessus netpbm nginx node ntp open_vm_tools openafs openjpeg openldap openssh openssl openswan openvpn p7zip pcsc_lite pigz png polarssl_fedora poppler postgresql pspp python qt radare2 rsyslog rust samba sane_backends sqlite strongswan subversion sudo syslogng systemd tcpdump trousers varnish webkitgtk wireshark wpa_supplicant xerces xml2 zlib zsh All the checkers can be found in the checkers directory, as can the instructions on how to add a new checker. Support for new checkers can be requested via GitHub issues.\nLanguage Specific checkers # A number of checkers are available for finding vulnerable components in specific language packages.\nJava # The scanner examines the pom.xml file within a Java package archive to identify Java components. The package names and versions within the archive are used to search the database for vulnerabilities.\nJAR, WAR and EAR archives are supported.\nJavascript # The scanner examines the package-lock.json file within a javascript application to identify components. The package names and versions are used to search the database for vulnerabilities.\nPython # The scanner examines the PKG-INFO and METADATA files for an installed Python package to extract the component name and version which are used to search the database for vulnerabilities.\nThe tool supports the scanning of the contents of any Wheel package files (indicated with a file extension of .whl) and egg package files (indicated with a file extension of .egg).\nThe --package-list option can be used with a Python dependencies file requirements.txt to find the vulnerabilities in the list of components.\nLimitations # This scanner does not attempt to exploit issues or examine the code in greater detail; it only looks for library signatures and version numbers. As such, it cannot tell if someone has backported fixes to a vulnerable version, and it will not work if library or version information was intentionally obfuscated.\nThis tool is meant to be used as a quick-to-run, easily-automatable check in a non-malicious environment so that developers can be made aware of old libraries with security issues that have been compiled into their binaries.\nThe tool does not guarantee that any vulnerabilities reported are actually present or exploitable, neither is it able to find all present vulnerabilities with a guarantee.\nUsers can add triage information to reports to mark issues as false positives, false negatives, indicate that the risk has been mitigated by configuration/usage changes, and so on.\nTriage details can be re-used on other projects so, for example, triage on a Linux base image could be applied to multiple containers using that image.\nFor more information and usage of triage information with the tool kindly have a look here.\nIf you are using the binary scanner capabilities, be aware that we only have a limited number of binary checkers (see table above) so we can only detect those libraries. Contributions of new checkers are always welcome! You can also use an alternate way to detect components (for example, a bill of materials tool such as tern) and then use the resulting list as input to cve-bin-tool to get a more comprehensive vulnerability list.\nThe tool uses a vulnerability database in order to detect the present vulnerabilities, in case the database is not frequently updated (specially if the tool is used in offline mode), the tool would be unable to detect any newly discovered vulnerabilities. Hence it is highly advised to keep the database updated.\nRequirements # To use the auto-extractor, you may need the following utilities depending on the type of file you need to extract. The utilities below are required to run the full test suite on Linux:\nfile strings tar unzip rpm2cpio cpio ar cabextract Most of these are installed by default on many Linux systems, but cabextract and rpm2cpio in particular might need to be installed.\nOn windows systems, you may need:\nar 7z Expand pdftotext Windows has ar and Expand installed by default, but 7z in particular might need to be installed. If you want to run our test-suite or scan a zstd compressed file, We recommend installing this 7-zip-zstd fork of 7zip. We are currently using 7z for extracting jar, apk, msi, exe and rpm files.\nIf you get an error about building libraries when you try to install from pip, you may need to install the Windows build tools. The Windows build tools are available for free from https://visualstudio.microsoft.com/visual-cpp-build-tools/\nIf you get an error while installing brotlipy on Windows, installing the compiler above should fix it.\npdftotext is required for running tests. (users of cve-bin-tool may not need it, developers likely will.) The best approach to install it on Windows involves using conda (click here for further instructions).\nYou can check our CI configuration to see what versions of python we\u0026rsquo;re explicitly testing.\nFeedback \u0026amp; Contributions # Bugs and feature requests can be made via GitHub issues. Be aware that these issues are not private, so take care when providing output to make sure you are not disclosing security issues in other products.\nPull requests are also welcome via git.\nNew contributors should read the contributor guide to get started. Folk who already have experience contributing to open source projects may not need the full guide but should still use the pull request checklist to make things easy for everyone. Security Issues # Security issues with the tool itself can be reported to Intel\u0026rsquo;s security incident response team via https://intel.com/security.\nIf in the course of using this tool you discover a security issue with someone else\u0026rsquo;s code, please disclose responsibly to the appropriate party.\n","date":"17 June 2022","permalink":"/projects/cve-bin-tool/","section":"Projects","summary":"","title":"cve-bin-tool"},{"content":"","date":"17 June 2022","permalink":"/tags/java/","section":"Tags","summary":"","title":"Java"},{"content":"\nLark - a parsing toolkit for Python # Lark is a parsing toolkit for Python, built with a focus on ergonomics, performance and modularity.\nLark can parse all context-free languages. To put it simply, it means that it is capable of parsing almost any programming language out there, and to some degree most natural languages too.\nWho is it for?\nBeginners: Lark is very friendly for experimentation. It can parse any grammar you throw at it, no matter how complicated or ambiguous, and do so efficiently. It also constructs an annotated parse-tree for you, using only the grammar and an input, and it gives you convienient and flexible tools to process that parse-tree.\nExperts: Lark implements both Earley(SPPF) and LALR(1), and several different lexers, so you can trade-off power and speed, according to your requirements. It also provides a variety of sophisticated features and utilities.\nWhat can it do?\nParse all context-free grammars, and handle any ambiguity gracefully Build an annotated parse-tree automagically, no construction code required. Provide first-rate performance in terms of both Big-O complexity and measured run-time (considering that this is Python ;) Run on every Python interpreter (it\u0026rsquo;s pure-python) Generate a stand-alone parser (for LALR(1) grammars) And many more features. Read ahead and find out!\nMost importantly, Lark will save you time and prevent you from getting parsing headaches.\nQuick links # Documentation @readthedocs Cheatsheet (PDF) Online IDE Tutorial for writing a JSON parser. Blog post: How to write a DSL with Lark Gitter chat Install Lark # $ pip install lark --upgrade Lark has no dependencies.\nSyntax Highlighting # Lark provides syntax highlighting for its grammar files (*.lark):\nSublime Text \u0026amp; TextMate vscode Intellij \u0026amp; PyCharm Vim Atom Clones # These are implementations of Lark in other languages. They accept Lark grammars, and provide similar utilities.\nLerche (Julia) - an unofficial clone, written entirely in Julia. Lark.js (Javascript) - a port of the stand-alone LALR(1) parser generator to Javascsript. Hello World # Here is a little program to parse \u0026ldquo;Hello, World!\u0026rdquo; (Or any other similar phrase):\nfrom lark import Lark l = Lark(\u0026#39;\u0026#39;\u0026#39;start: WORD \u0026#34;,\u0026#34; WORD \u0026#34;!\u0026#34; %import common.WORD // imports from terminal library %ignore \u0026#34; \u0026#34; // Disregard spaces in text \u0026#39;\u0026#39;\u0026#39;) print( l.parse(\u0026#34;Hello, World!\u0026#34;) ) And the output is:\nTree(start, [Token(WORD, \u0026#39;Hello\u0026#39;), Token(WORD, \u0026#39;World\u0026#39;)]) Notice punctuation doesn\u0026rsquo;t appear in the resulting tree. It\u0026rsquo;s automatically filtered away by Lark.\nFruit flies like bananas # Lark is great at handling ambiguity. Here is the result of parsing the phrase \u0026ldquo;fruit flies like bananas\u0026rdquo;:\nRead the code here, and see more examples here.\nList of main features # Builds a parse-tree (AST) automagically, based on the structure of the grammar Earley parser Can parse all context-free grammars Full support for ambiguous grammars LALR(1) parser Fast and light, competitive with PLY Can generate a stand-alone parser ( read more) EBNF grammar Unicode fully supported Automatic line \u0026amp; column tracking Interactive parser for advanced parsing flows and debugging Grammar composition - Import terminals and rules from other grammars Standard library of terminals (strings, numbers, names, etc.) Import grammars from Nearley.js ( read more) Extensive test suite Type annotations (MyPy support) And much more! See the full list of features here\nComparison to other libraries # Performance comparison # Lark is fast and light (lower is better)\nCheck out the JSON tutorial for more details on how the comparison was made.\nFor a more thorough and objective comparison, checkout the Python Parsing Benchmarks repo.\nFeature comparison # Library Algorithm Grammar Builds tree? Supports ambiguity? Can handle every CFG? Line/Column tracking Generates Stand-alone Lark Earley/LALR(1) EBNF Yes! Yes! Yes! Yes! Yes! (LALR only) PLY LALR(1) BNF No No No No No PyParsing PEG Combinators No No No* No No Parsley PEG EBNF No No No* No No Parsimonious PEG EBNF Yes No No* No No ANTLR LL(*) EBNF Yes No Yes? Yes No (* PEGs cannot handle non-deterministic grammars. Also, according to Wikipedia, it remains unanswered whether PEGs can really parse all deterministic CFGs)\nProjects using Lark # Poetry - A utility for dependency management and packaging tartiflette - a GraphQL server by Dailymotion PyQuil - Python library for quantum programming using Quil Preql - An interpreted relational query language that compiles to SQL Hypothesis - Library for property-based testing mappyfile - a MapFile parser for working with MapServer configuration synapse - an intelligence analysis platform Datacube-core - Open Data Cube analyses continental scale Earth Observation data through time SPFlow - Library for Sum-Product Networks Torchani - Accurate Neural Network Potential on PyTorch Command-Block-Assembly - An assembly language, and C compiler, for Minecraft commands EQL - Event Query Language Fabric-SDK-Py - Hyperledger fabric SDK with Python 3.x required - multi-field validation using docstrings miniwdl - A static analysis toolkit for the Workflow Description Language pytreeview - a lightweight tree-based grammar explorer harmalysis - A language for harmonic analysis and music theory gersemi - A CMake code formatter MistQL - A query language for JSON-like structures Full list\nLicense # Lark uses the MIT license.\n(The standalone tool is under MPL2)\nContributors # Lark accepts pull-requests. See How to develop Lark\nBig thanks to everyone who contributed so far:\nSponsor # If you like Lark, and want to see us grow, please consider sponsoring us!\nContact the author # Questions about code are best asked on gitter or in the issues.\nFor anything else, I can be reached by email at erezshin at gmail com.\n\u0026ndash; Erez\n","date":"17 June 2022","permalink":"/projects/lark/","section":"Projects","summary":"","title":"lark"},{"content":"\nREST APIs in every language # A collection of many REST frameworks in many languages.\nPlease add more langs and frameworks!\nPython Fast API Flask Django Rust Rocket Actix Javascript Express Go net/http gin Ruby Sinatra C Add frameworks C++ Add frameworks Java No API Spark ","date":"17 June 2022","permalink":"/projects/rest-api-in-every-lang/","section":"Projects","summary":"","title":"rest-api-in-every-lang"},{"content":"\nDaily Tasks # Teaching Svelte and FastAPI\nFrontend (Javascript with Svelte) # Backend (Python with FastAPI) # ","date":"16 June 2022","permalink":"/projects/daily-tasks/","section":"Projects","summary":"","title":"daily-tasks"},{"content":"\nsqlite-cpp # Part of a learning project for an app with a C++ backend.\n","date":"16 June 2022","permalink":"/projects/sqlite-cpp/","section":"Projects","summary":"","title":"sqlite-cpp"},{"content":"\nautoclockspeed.github.io # ","date":"14 June 2022","permalink":"/projects/autoclockspeed.github.io/","section":"Projects","summary":"","title":"autoclockspeed.github.io"},{"content":"\nstudy-cli # CLI tool to quiz and learn a question dataset. This can be used for memorizing any sort of multiple choice compliant quizzes. Similar to flashcards, except no need to write out flash cards, or carry them with you. Also, study-cli can be set to random ask if you\u0026rsquo;d like to study at random times.\nQuestion Set Schema # type Single struct { Name string `json:\u0026#34;name\u0026#34;` Correct int `json:\u0026#34;correct\u0026#34;` Answers []string `json:\u0026#34;answers\u0026#34;` Question string `json:\u0026#34;question\u0026#34;` } [ { \u0026#34;name\u0026#34;: \u0026#34;question one\u0026#34;, \u0026#34;correct\u0026#34;: 0, \u0026#34;answers\u0026#34;: [ \u0026#34;A. yes\u0026#34;, \u0026#34;B. no\u0026#34; ], \u0026#34;question\u0026#34;: \u0026#34;Which of the two options is a three letter world?\u0026#34;, } ] TODO # Add dataset manager ","date":"13 June 2022","permalink":"/projects/study-cli/","section":"Projects","summary":"","title":"study-cli"},{"content":"\nMacaroon - Go Macros \u0026amp; Preprocessor # Add C style macros to code in Go. Not to be confused with go-macaroon/macaroon about \u0026ldquo;Cookies with Contextual Caveats for Decentralized Authorization in the Cloud\u0026rdquo;.\nQuick Start # Use the set keyword to define the value of a simple macro.\nBefore # package main #set NAME \u0026#34;jake\u0026#34; func main() { fmt.Println(NAME) } After # package main func main() { fmt.Println(\u0026#34;jake\u0026#34;) } Running # macaroon main.gomac \u0026amp;\u0026amp; go build ","date":"10 June 2022","permalink":"/projects/macaroon/","section":"Projects","summary":"","title":"macaroon"},{"content":"\nauth-upload-rest-go # Authenticated REST server written in Go.\nUsage # Upload files to a dedicated server for file sharing, etc.\nRunning # # Run the server cd backend go run . # Open the index.html with firefox - you can use whatever browser you like firefox index.html Images # ","date":"8 June 2022","permalink":"/projects/auth-upload-rest-go/","section":"Projects","summary":"","title":"auth-upload-rest-go"},{"content":"\nbetter-scripts # Scripts that are better than the ones I wrote a long time ago\nDocs # Docs for each script can be found it its directory.\nInstall # sh ./install.sh Bin # Installing will write the scripts to bin/\nGoals # The goal with this repository is to have better documentation, readability, and functionality than the old repository.\n","date":"7 June 2022","permalink":"/projects/better-scripts/","section":"Projects","summary":"","title":"better-scripts"},{"content":"\ncolorgradient-go # Colorgradient learning project in Go\nPython version colorgradient Rust version colorgradient-rs Julia version colorgradient-julia C version colorgradient-c Go version colorgradient-go Clojure version colorgradient-clj ","date":"5 June 2022","permalink":"/projects/colorgradient-go/","section":"Projects","summary":"","title":"colorgradient-go"},{"content":"\nStack Overflow Search IntelliJ # IntelliJ plugin to search code on stackoverflow, inspired by @JakeRoggenbuck\u0026rsquo;s Stack Overflow Search Vim\nWork in progess\n","date":"4 June 2022","permalink":"/projects/stackoverflow-search-intellij/","section":"Projects","summary":"","title":"stackoverflow-search-intellij"},{"content":"\nStack Overflow Search Vim # Inspired by a conversation with @Shuzhengz. Still a work in progress.\nTask List # Function to return currently highlighted text Function to open xdg default browser with stackoverflow query Fix search function to escape spaces in search Make keybind for function that does both ","date":"2 June 2022","permalink":"/projects/stackoverflow-search-vim/","section":"Projects","summary":"","title":"stackoverflow-search-vim"},{"content":"","date":"2 June 2022","permalink":"/tags/vim-script/","section":"Tags","summary":"","title":"Vim Script"},{"content":"This month I had my finals and AP tests, all of which where a lot of work, but I still worked on some project and organized the first annual Da Vinci Game Jam for my school. Links to the resources for the workshops can be found here. The game jam was an overall success and we had many great game entries. This month I also worked on auto clock speed some more, adding a universal interface to all of the commands and other issues. I created a total of 44 commits on that project this month. GitHub summarizes this month with \u0026lsquo;Created 238 commits in 26 repositories\u0026rsquo;, I also created 13 repositories this month, two for the game jam, one related to a possible future auto-clock-speed side project, two about my statistics class, two about my link shortener project, two related to JABACAT (Group of programmers), and one as a tool to help view csv files that I might release sometime next month.\n","date":"31 May 2022","permalink":"/devlogs/may-2022/","section":"Dev Logs","summary":"This month I had my finals and AP tests, all of which where a lot of work, but I still worked on some project and organized the first annual Da Vinci Game Jam for my school.","title":"May 2022 - Da Vinci Game Jam \u0026 More Auto Clock Speed"},{"content":"\nocean-game-js # ","date":"24 May 2022","permalink":"/projects/ocean-game-js/","section":"Projects","summary":"","title":"ocean-game-js"},{"content":"\nocean-game-py # Simple ocean game demo for DV Game Jam\nSlides # View the slides pygame_slides.pdf\nImage # ","date":"23 May 2022","permalink":"/projects/ocean-game-py/","section":"Projects","summary":"","title":"ocean-game-py"},{"content":"\nstatistical-tests-rs # Statistical Tests for Rust\nExamples # use statistical_tests_rs::mean; fn main() { // Get the mean of an array let array: [f64; 4] = [3.4, 6.7, 2.3, 1.1]; let m = mean(\u0026amp;array); println!(\u0026#34;{}\u0026#34;, m); } use statistical_tests_rs::{GetStatistics, SampleStatistics}; fn main() { // Get the statistics of a sample let samp = SampleStatistics::from_array(\u0026amp;array); println!( \u0026#34;Sample Mean: {}, Sample Standard Deviation: {}\u0026#34;, samp.sample_mean, samp.standard_error ); } ","date":"22 May 2022","permalink":"/projects/statistical-tests-rs/","section":"Projects","summary":"","title":"statistical-tests-rs"},{"content":"\nlink-cli # Utility to manage link.jr0.org\n","date":"17 May 2022","permalink":"/projects/link-cli/","section":"Projects","summary":"","title":"link-cli"},{"content":"\nchi-squared-c # Calculate chi squared\nEquation # Χ^2 = ((O - E)^2) / E ","date":"4 May 2022","permalink":"/projects/chi-squared-c/","section":"Projects","summary":"","title":"chi-squared-c"},{"content":"On April 21st, the whole Local List team (Me and 4 others) got to present our business to our town\u0026rsquo;s chamber of commerce. Our idea and demo was met with lots of excitement and great feedback. The day after, we got to pitch our idea to more business owners during our school\u0026rsquo;s business project\u0026rsquo;s night event. We won the event\u0026rsquo;s Judges award for our idea and presentation. The current site can be found at thelocallist.org. Our judges invited us to a city event where we will have a booth and present to the public. This month, I also made two projects ( derive, and integrate) in C that implement ideas from calculus. I also started using Svelte for a mindfulness tracker app that I might publish in a few weeks.\n","date":"30 April 2022","permalink":"/devlogs/april-2022/","section":"Dev Logs","summary":"On April 21st, the whole Local List team (Me and 4 others) got to present our business to our town\u0026rsquo;s chamber of commerce.","title":"April 2022- Local List Business Pitch"},{"content":"\nc-select # ncurses selection tool for tui based projects.\n","date":"25 April 2022","permalink":"/projects/c-select/","section":"Projects","summary":"","title":"c-select"},{"content":"\nintegrate # Build # Run ./scripts/build.sh Config # You can replace this function with anything you would like to find the antiderivative of.\ndouble function(double x) { // f(x) = x^3 + 4x + 2 return (pow(x, 3) + 4 * x) + 2; } Run # Run ./cmake/derive \u0026gt; data/out.csv Run python3 plotting/main.py ","date":"18 April 2022","permalink":"/projects/integrate/","section":"Projects","summary":"","title":"integrate"},{"content":"\napproximate-pi # This program creates a bunch of points in a square, then draws a circle with the same radius. Then it checks which points are inside the circle. The ratio of inside to out should be around pi/4, therefor multiplying that by 4 should result in an approximation of pi.\nFavorite bit of code # int calculate_single() { int s; s = rand() % DIAMETER; return pow(s, 2) + RADIUS; } int calculate_point() { int x = calculate_single(); int y = calculate_single(); return x + y \u0026lt;= pow(DIAMETER, 2); } Run # Run ./cmake/approximate_pi Build # Run ./scripts/build.sh Results # 787961 inside the circle, 212039 outside. 3.151844 787271 inside the circle, 212729 outside. 3.149084 ","date":"17 April 2022","permalink":"/projects/approximate-pi/","section":"Projects","summary":"","title":"approximate-pi"},{"content":"\nderive # Calculate the derivative of a function non-algebraically\nBuild # Run ./scripts/build.sh Config # You can replace this function with anything you would like to find the derivative of.\ndouble function(double x) { // f(x) = x^3 + 4x + 2 return (pow(x, 3) + 4 * x) + 2; } Run # Run ./cmake/derive \u0026gt; data/out.csv Run python3 plotting/main.py ","date":"17 April 2022","permalink":"/projects/derive/","section":"Projects","summary":"","title":"derive"},{"content":"\ncolorgradient-c # Colorgradient learning project in C\nPython version colorgradient Rust version colorgradient-rs Julia version colorgradient-julia C version colorgradient-c Go version colorgradient-go Clojure version colorgradient-clj ","date":"11 April 2022","permalink":"/projects/colorgradient-c/","section":"Projects","summary":"","title":"colorgradient-c"},{"content":"\ntermcolor-c # Simple color printing in C\nExample # #include \u0026#34;termcolor.h\u0026#34; #include \u0026lt;stdio.h\u0026gt; int main() { cprint(\u0026#34;Passed\\n\u0026#34;, FG_GREEN); cprint(\u0026#34;Failed\\n\u0026#34;, FG_RED); char *msg = \u0026#34;Hello!!\u0026#34;; char *new; color(msg, new, FG_BLUE); printf(\u0026#34;%s\\n\u0026#34;, new); return 0; } Quick start # Add termcolor as a dependency # git submodule add git@github.com:JakeRoggenbuck/termcolor-c.git For CMakeLists.txt (if you are using that) # -add_executable(project_name ${SOURCES}) +add_executable(project_name ${SOURCES} termcolor-c/src/termcolor.c) +include_directories(${PROJECT_SOURCE_DIR}/termcolor-c/src) Add the color printing code # #include \u0026#34;termcolor.h\u0026#34; #include \u0026lt;stdio.h\u0026gt; int main() { cprint(\u0026#34;Hello World!\\n\u0026#34;, FG_GREEN); return 0; } Why # I made this just in case I start writing a bunch of CLI stuff in C in the next few months before college, and during college as well. So far, here are my favorites:\ndiri-c cosmic-ray-detector ","date":"11 April 2022","permalink":"/projects/termcolor-c/","section":"Projects","summary":"","title":"termcolor-c"},{"content":"This month, I registered the domains finditlocal.org and finditlocal.us for a company called Local List I started in connection with my Econ class. I created a frontend using React and a backend using Django. Currently, both are hosted and communicating to display local products at those domains. I am really excited for this project and I even printed business cards and stickers for the project to share with classmates. I feel like this project is the latest culmination of my skills in frontend, backend, and system architecture. The part I am most proud of is the architecture and design decisions to allow for further development and higher traffic as the project grows. I also worked more on my yet to be released (as of March 31st 2022) runtime-analysis-paper, including a new idea I thought of regarding error handling.\nfinditlocal\n","date":"31 March 2022","permalink":"/devlogs/march-2022/","section":"Dev Logs","summary":"This month, I registered the domains finditlocal.","title":"March 2022 - Starting Local List"},{"content":"\nThe Algorithms - Rust # All algorithms implemented in Rust # These are for demonstration purposes only.\nSort Algorithms # Bubble Bucket Cocktail-Shaker Counting Heap Insertion Gnome Merge Odd-even Pancake Quick Radix Selection Shell Stooge Comb Bucket Timsort Graphs # Dijkstra Kruskal\u0026rsquo;s Minimum Spanning Tree Prim\u0026rsquo;s Minimum Spanning Tree Breadth-First Search (BFS) Depth First Search (DFS) Bellman-Ford Prufer Code Math # Extended euclidean algorithm Greatest common divisor Miller Rabin primality test Pascal\u0026rsquo;s triangle Square root with Newton\u0026rsquo;s method Fast power algorithm Perfect number Prime number Linear Sieve Pollard\u0026rsquo;s Rho algorithm Fast Fourier Transform Dynamic Programming # 0-1 Knapsack Edit Distance Longest common subsequence Longest continuous increasing subsequence Longest increasing subsequence K-Means Clustering Coin Change Rod Cutting Egg Dropping Puzzle Maximum Subarray Is Subsequence Maximal Square Data Structures # Queue Heap Linked List Graph Directed Undirected Trie Binary Search Tree B-Tree AVL Tree RB Tree Stack using Linked List Segment Tree Strings # Aho-Corasick Algorithm Burrows-Wheeler transform Knuth Morris Pratt Manacher Rabin Carp Reverse Hamming Distance General # Convex Hull: Graham Scan N-Queens Problem Graph Coloringp Tower of Hanoi Kmeans Two Sum Search Algorithms # Linear Binary Recursive Binary Kth Smallest Exponential Jump Fibonacci Geometry # Closest pair of 2D points Ciphers # Caesar Morse Code Polybius SHA-2 TEA Transposition Vigenère XOR Rot13 Another Rot13 Rot13 All implemented Algos # See DIRECTORY.md\nContributing # See CONTRIBUTING.md\n","date":"31 March 2022","permalink":"/projects/rust/","section":"Projects","summary":"","title":"Rust"},{"content":"\nA command-line Git information tool written in Rust 日本語 | فارسی | 简体中文 | Русский | Español Onefetch is a command-line Git information tool written in Rust that displays project information and code statistics for a local Git repository directly on your terminal. The tool is completely offline - no network access is required.\nBy default, the repo\u0026rsquo;s information is displayed alongside the dominant language\u0026rsquo;s logo, but you can further configure onefetch to instead use an image - on supported terminals -, a text input or nothing at all.\nIt automatically detects open source licenses from texts and provides the user with valuable information like code distribution, pending changes, number of dependencies (by package manager), top contributors (by number of commits), size on disk, creation date, LOC (lines of code), etc.\nOnefetch can be configured via command-line flags to display exactly what you want, the way you want it to: you can customize ASCII/Text formatting, disable info lines, ignore files \u0026amp; directories, output in multiple formats (Json, Yaml), etc.\nAs of now, onefetch supports more than 50 different programming languages; if your language of choice isn\u0026rsquo;t supported: Open up an issue and support will be added.\nContributions are very welcome! See CONTRIBUTING for more info.\nMore: [ Wiki] [ Installation] [ Getting Started] # ","date":"24 March 2022","permalink":"/projects/onefetch/","section":"Projects","summary":"","title":"onefetch"},{"content":"\nmac-shifter # ","date":"21 March 2022","permalink":"/projects/mac-shifter/","section":"Projects","summary":"","title":"mac-shifter"},{"content":"\n404: Not Found\n","date":"7 March 2022","permalink":"/projects/python-guides/","section":"Projects","summary":"","title":"Python-Guides"},{"content":"\nVosk Speech Recognition Toolkit # Vosk is an offline open source speech recognition toolkit. It enables speech recognition for 20+ languages and dialects - English, Indian English, German, French, Spanish, Portuguese, Chinese, Russian, Turkish, Vietnamese, Italian, Dutch, Catalan, Arabic, Greek, Farsi, Filipino, Ukrainian, Kazakh, Swedish, Japanese, Esperanto. More to come.\nVosk models are small (50 Mb) but provide continuous large vocabulary transcription, zero-latency response with streaming API, reconfigurable vocabulary and speaker identification.\nSpeech recognition bindings implemented for various programming languages like Python, Java, Node.JS, C#, C++ and others.\nVosk supplies speech recognition for chatbots, smart home appliances, virtual assistants. It can also create subtitles for movies, transcription for lectures and interviews.\nVosk scales from small devices like Raspberry Pi or Android smartphone to big clusters.\nDocumentation # For installation instructions, examples and documentation visit Vosk Website.\n","date":"7 March 2022","permalink":"/projects/vosk-api/","section":"Projects","summary":"","title":"vosk-api"},{"content":"\nyfin 0.1.2 # Yfin is the Official package manager for the Y-flat programming language. Yfin allows the user to install, upgrade, and uninstall packages. It also allows a user to initialize a package with the Y-flat package structure and files automatically generated. In future, Yfin will also allow users to publish packages.\nUsage # yfin \u0026lt;SUBCOMMAND\u0026gt; Flags # -h, --help Prints help information -V, --version Prints version information Subcommands # help Prints this message or the help of the given subcommand(s) init Initialize a package install Install from git repo url install-compiler Install compiler yfin install-compiler install-yflib Install yflib yfin install-yflib uninstall Uninstall package upgrade Install newer version of package Install Latest # If you have cargo on your machine, skip to step 3\nInstall rustup.rs.\nSetup rust\nrustup override set stable rustup update stable Install from crates\ncargo install --git https://github.com/JakeRoggenbuck/yfin New package # Create a new package with yfin init \u0026lt;name\u0026gt; or yfin init for the current directory. Here is what you will see in the directory.\nyf-package-example (main) λ tree . . ├── package.yml └── src └── lib.yf 1 directory, 3 files Join the discussion # Full (0.1.1) # Install Compiler (0.1.2) # ","date":"4 March 2022","permalink":"/projects/yfin/","section":"Projects","summary":"","title":"yfin"},{"content":"This months has been pretty interesting. I have learned several things like how to use Gatsby and GraphQL. I have been working on auto-clock-speed a lot, and I 0.1.8 was released! I have also been writing code for the Hermes project. This months I picked up the book \u0026lsquo;Design Patterns\u0026rsquo; and it\u0026rsquo;s great. Something that I have been using more often is React. Sometimes I forget how useful a good frontend framework can be. On an unrelated note, I have been learning more about computer science theory and software development history. Knowing what others did in the past is helpful when making decision.\n","date":"28 February 2022","permalink":"/devlogs/february-2022/","section":"Dev Logs","summary":"This months has been pretty interesting.","title":"February 2022 - Creating Dev Log Page"},{"content":"\nHermes # Hermes is a project in C++ to help individuals with ALS communicate.\n","date":"4 February 2022","permalink":"/projects/hermes/","section":"Projects","summary":"","title":"hermes"},{"content":"\nyflat-docs # Documentation for all parts of Y-flat.\nFiles # Y-flat description and examples\n","date":"4 February 2022","permalink":"/projects/yflat-docs/","section":"Projects","summary":"","title":"yflat-docs"},{"content":"\nProject Invent: Rube Goldberg Machine # ","date":"29 January 2022","permalink":"/projects/project-invent-rube-goldberg-machine/","section":"Projects","summary":"","title":"project-invent-rube-goldberg-machine"},{"content":"\nReduc # A lightweight general purpose window manager written in rust\n","date":"25 January 2022","permalink":"/projects/reduc/","section":"Projects","summary":"","title":"Reduc"},{"content":"\npascals-triangle # Exploration of pascals triangle\n","date":"14 January 2022","permalink":"/projects/pascals-triangle/","section":"Projects","summary":"","title":"pascals-triangle"},{"content":"\n404: Not Found\n","date":"13 January 2022","permalink":"/projects/indirect-git-repo/","section":"Projects","summary":"","title":"indirect-git-repo"},{"content":"\ndark-discord # An actual dark theme for Discord\nRequirements # BetterDiscord is required to be installed\nBetterdiscordctl might be a handy tool to install BetterDiscord on Linux\nInstall Instructions # Install as a theme # Go to the Themes tab in Discord\u0026rsquo;s settings (BetterDiscord section) Click on the Open Theme Folder button Drag dark-discord.theme.css into the folder Go back to the Themes tab in Discord\u0026rsquo;s settings, enable the theme with the switch Install as a custom CSS # The custom CSS option can be useful if your install of betterdiscord is bugged or not supported fully\nTo use this option,\nGo to the Custom CSS tab in Discord\u0026rsquo;s settings Copy the content in dark-discord.scss ( here) Paste in the textbox Click on the save button, then the update button to apply Customize # You can customize this theme by changing the color hex codes in the file\n(Be careful, there\u0026rsquo;s a lot of them)\n","date":"4 January 2022","permalink":"/projects/dark-discord/","section":"Projects","summary":"","title":"dark-discord"},{"content":"\n404: Not Found\n","date":"4 January 2022","permalink":"/projects/pgzero/","section":"Projects","summary":"","title":"pgzero"},{"content":"\nbroken-package-yf # An example broken package\nInstall # yfin install jakeroggenbuck/broken-package-yf ","date":"22 December 2021","permalink":"/projects/broken-package-yf/","section":"Projects","summary":"","title":"broken-package-yf"},{"content":"\nDiri # DIRectory Info tool that lets you look at a summary of a directory and which projects are using a version control system and if they are connected to a remote control system.\nNew C Version diri-c\nOne could even alias this to ls (Not recommended)\n","date":"21 December 2021","permalink":"/projects/directory-info/","section":"Projects","summary":"","title":"directory-info"},{"content":"\ntermcolor-yf # Terminal color library for the y-flat language\nInstall # yfin install jakeroggenbuck/termcolor-yf ","date":"21 December 2021","permalink":"/projects/termcolor-yf/","section":"Projects","summary":"","title":"termcolor-yf"},{"content":"\nyfc # Overview # Compiler for the Y-flat programming language. This is part of the wider Y-flat programming language project, which includes the installer and other components in the future.\nY-flat programming language project Build # ./scripts/build.sh Run # ./cmake/yfc Internal documentation # General documentation\n","date":"20 December 2021","permalink":"/projects/yfc/","section":"Projects","summary":"","title":"yfc"},{"content":"\nSpinners - 🛎 60+ Elegant terminal spinners for Rust # ❤️ Shameless plug # Charts, simple as a URL. No more server-side rendering pain, 1 url = 1 chart Keycloak Identity and Access Management (IAM) as a Service Install # See Cargo page\nUsage # use spinners; use spinners::{Spinner, Spinners}; use std:🧵:sleep; use std::time::Duration; fn main() { let sp = Spinner::new(Spinners::Dots9, \u0026#34;Waiting for 3 seconds\u0026#34;.into()); sleep(Duration::from_secs(3)); sp.stop(); } List of available spinners Documentation Example # cargo run --example cycle cargo run --example simple License # MIT © François-Guillaume Ribreau\n","date":"18 December 2021","permalink":"/projects/spinners/","section":"Projects","summary":"","title":"spinners"},{"content":"\nyf-package-example # Install # yfin install jakeroggenbuck/yf-package-example ","date":"18 December 2021","permalink":"/projects/yf-package-example/","section":"Projects","summary":"","title":"yf-package-example"},{"content":"\non-logs-research # Exploration on the decimal places of logs from December 2021 - Present\n","date":"3 November 2021","permalink":"/projects/on-logs-research/","section":"Projects","summary":"","title":"on-logs-research"},{"content":"\nCardinal # Cardinal is a web server that serves data from the frc1678/server project to the frc1678/viewer project.\nUse # There are two main uses for Cardinal. Both involve serving data to the Viewer app. The most important data that is sent is from the frc1678/server project and is current match and competition data. The second type of data is auto generated testing data.\nSetup # Export the value DJANGO_SECRET_KEY before running\nThis key needs to be completely original This key should never be in git You can use this command to generate a key dd if=/dev/urandom bs=60 count=1 | base64 python3 manage.py migrate\nCreate and update the database python3 manage.py migrate python3 manage.py createsuperuser\nCreate the admin account used for making a auth token python3 manage.py createsuperuser Create an auth token\nRun the server Open the website at /admin Log in Create a new token Copy that token into the request Running # Make sure to finish with setup steps Start the server (test) ./scripts/testserver.sh Start the server (production) ./scripts/runserver.sh API Usage # Test Data Generator # # Format curl -X GET \u0026#34;https://cardinal.citruscircuits.org/cardinal/api/generate/\u0026lt;schema_name\u0026gt;/?format=json\u0026#34; # Example curl -X GET \u0026#34;https://cardinal.citruscircuits.org/cardinal/api/generate/calc_tba_team_schema/?format=json\u0026#34; # Example with count curl -X GET \u0026#34;https://cardinal.citruscircuits.org/cardinal/api/generate/calc_tba_team_schema/?format=json\u0026amp;count=10\u0026#34; Output # [ { \u0026#34;auto_high_balls_percent_inner\u0026#34;: 89.7359, \u0026#34;tele_high_balls_percent_inner\u0026#34;: 16.1893, \u0026#34;climb_all_success_avg_time\u0026#34;: 96.7847, \u0026#34;team_name\u0026#34;: \u0026#34;rNvKwQbEoMBnA\u0026#34;, \u0026#34;climb_percent_success\u0026#34;: 46.9206, \u0026#34;climb_all_successes\u0026#34;: 13, \u0026#34;climb_level_successes\u0026#34;: 8, \u0026#34;park_successes\u0026#34;: 16, \u0026#34;auto_line_successes\u0026#34;: 42, \u0026#34;team_number\u0026#34;: 4665 } ] Roadmap # 1. System architecture \u0026amp; framework decision # - Decide what framework we will use - Decide on the architecture (framework dependent) 2. Basic functioning system \u0026amp; initial tests # - Run the system on every developer's computer and troubleshoot - Get automatic testing working with Github actions 3. Automatic test data generator API # - Fully generate data the view can use to test from this service - Serve test data for Viewer to easily pull using REST standards 4. Serve current competition data # - Pull data from Mongodb about the current competition - Setup views to serve this data - Collect time deltas per user of when the last data was pulled - Setup database for time deltas - Create functionality to pull data that has been changed since last pull 5. Discuss specifics of hosting, etc. # - Where will we host this web server note: this isn't as time-sensitive as development 6. Help frontend integrate this API into Viewer. (Currently here) # - Create documentation on the API and it's proper use - Support the Viewer's developers in their implementation efforts 7. Full systems test # - Run the server with test data from scouts - Run this web server and pull data from it - Test Viewer and its ability to pull data ","date":"21 October 2021","permalink":"/projects/cardinal/","section":"Projects","summary":"","title":"Cardinal"},{"content":"\ngame-2021 # This is the repository for the Davis Senior High School Gamedev game of the 2021-22 school year.\nBuild Instructions # Dependencies # This project wil be done with OpenGL, and as such has the dependencies of OpenGL and GLFW. If you are using macOS, the OpenGL component is not required as it comes with the installation.\nBuild # ./scripts/build.sh\nRun # ./scripts/run.sh\n","date":"8 October 2021","permalink":"/projects/game-2021/","section":"Projects","summary":"","title":"game-2021"},{"content":"\ncar-lights # NeoPixel and Arduino code for car underglow.\n","date":"4 October 2021","permalink":"/projects/car-lights/","section":"Projects","summary":"","title":"car-lights"},{"content":"\nnasa-spaceapps-2021 # Project for NASA Spaceapps 2021\n","date":"2 October 2021","permalink":"/projects/nasa-spaceapps-2021/","section":"Projects","summary":"","title":"nasa-spaceapps-2021"},{"content":"\npytest_assignments # ","date":"18 September 2021","permalink":"/projects/pytest_assignments/","section":"Projects","summary":"","title":"pytest_assignments"},{"content":"\npwm-dc-motor # ","date":"15 September 2021","permalink":"/projects/pwm-dc-motor/","section":"Projects","summary":"","title":"pwm-dc-motor"},{"content":"\nproject-announcements # Usage # from test.py\nfrom main import Repo if __name__ == \u0026#34;__main__\u0026#34;: repo = Repo(\u0026#34;jakeroggenbuck\u0026#34;, \u0026#34;stow-squid\u0026#34;) announcements = repo.get_announcements() for announcement in announcements: print(announcement) ","date":"11 September 2021","permalink":"/projects/project-announcements/","section":"Projects","summary":"","title":"project-announcements"},{"content":"\nYutimim-dictionary-parser # Usage # # Output to screen python3 main.py -i dict.txt -v # Output to file python3 main.py -i dict.txt -o dict.json Example # Input (Fake words) # auau- 1. te de (v.) eueue- 1. ta da jejj- 1. to da (v.) uueu- 1. to do (v.) Output # [ { \u0026#34;word\u0026#34;: \u0026#34;auau-\u0026#34;, \u0026#34;defs\u0026#34;: [\u0026#34;te de (v.)\u0026#34;] }, { \u0026#34;word\u0026#34;: \u0026#34;eueue-\u0026#34;, \u0026#34;defs\u0026#34;: [\u0026#34;ta da\u0026#34;] }, { \u0026#34;word\u0026#34;: \u0026#34;jejj-\u0026#34;, \u0026#34;defs\u0026#34;: [\u0026#34;to da (v.)\u0026#34;] }, { \u0026#34;word\u0026#34;: \u0026#34;uueu-\u0026#34;, \u0026#34;defs\u0026#34;: [\u0026#34;to do (v.)\u0026#34;] } ] ","date":"11 September 2021","permalink":"/projects/yutimim-dictionary-parser/","section":"Projects","summary":"","title":"Yutimim-dictionary-parser"},{"content":"\nAbout # magic-identify implements a wrapper around both the python-magic module and the identify module to try and always return results, even if one fails. Finally, failing that it will try to guess some minimal shell script environments too (specifically looking at common keywords in malware droppers/downloaders that do not always have leading identification lines).\nIt returns two strings, one which may be a higher level text description and a second which should always be a mime-type identifier.\nExample module use: # import magicidentify c = magicidentify.MagicIdentify() print(c.identify(\u0026quot;/bin/ls\u0026quot;)) # ('application/x-pie-executable', 'application/x-pie-executable') Example CLI use: # # magic-identify /bin/ls /sbin/ifup /bin/ls: application/x-pie-executable, application/x-pie-executable using magic: application/x-pie-executable, application/x-pie-executable using identify: unknown, unknown /sbin/ifup: inode/symlink, inode/symlink using magic: inode/symlink, inode/symlink using identify: bash/shell, text/x-bash # magic-identify -q /bin/ls /sbin/ifup application/x-pie-executable inode/symlink Todo # Handle more boring cases from some outputs (text/inode) test suite Acknowledgements # The following wonderful github accounts have contributed to the code base:\n@JakeRoggenbuck ","date":"8 September 2021","permalink":"/projects/magic-identify/","section":"Projects","summary":"","title":"magic-identify"},{"content":"\nmath # A collection of math notebooks that wrote and I used during my senior year of high school to study for tests and remember concepts.\nExample # Here is an example Power Rule.ipynb\n","date":"4 September 2021","permalink":"/projects/math/","section":"Projects","summary":"","title":"math"},{"content":"\n","date":"2 September 2021","permalink":"/projects/shuzhengz/","section":"Projects","summary":"","title":"Shuzhengz"},{"content":"\nPony # Pony is an open-source, object-oriented, actor-model, capabilities-secure, high-performance programming language.\nStatus # Pony is still pre-1.0 and as such, semi-regularly introduces breaking changes. These changes are usually fairly easy to adapt to. Applications written in Pony are currently used in production environments.\nSupported platforms # Operating Systems # FreeBSD Linux macOS Windows 10 CPUs # Full support for 64-bit platforms x86 and ARM CPUs only Partial support for 32-bit platforms The arm and armhf architectures are tested via CI (Continuous Integration testing) More Information # Installation Building from source Docker images Editor support Resources # Learn more about Pony Start learning Pony Getting help Try Pony online Frequently Asked Questions Community Contributing # We welcome contributions to Pony. Please read through CONTRIBUTING.md for details on how to get started.\nLicense # Pony is distributed under the terms of the 2-Clause BSD License. See LICENSE for details.\n","date":"1 September 2021","permalink":"/projects/ponyc/","section":"Projects","summary":"","title":"ponyc"},{"content":"\n404: Not Found\n","date":"31 August 2021","permalink":"/projects/cpython/","section":"Projects","summary":"","title":"cpython"},{"content":"\nzipfs-law # ranked = sorted(RANK.items(), key=lambda x: x[1], reverse=True) most_used = \u0026#34;\\n\u0026#34; + \u0026#34;\u0026#34;.join([f\u0026#34;- {x}: {y}\\n\u0026#34; for x, y in ranked[:10]]) least_used = \u0026#34;\\n\u0026#34; + \u0026#34;\u0026#34;.join([f\u0026#34;- {x}: {y}\\n\u0026#34; for x, y in ranked[-10:]]) ","date":"31 August 2021","permalink":"/projects/zipfs-law/","section":"Projects","summary":"","title":"zipfs-law"},{"content":"\nprogramming-languages # This is list of programming languages I have made for learning. In each project there were many key takeaways that can be learned from. I will continue to add information and lessons learned from each project. I will also add a description of each project and what it accomplished.\njai [ source] \u0026lt;- Latest # Jai is a programming language\nhttps://github.com/JakeRoggenbuck/jai plrs [ source] (Lexer library) # The multi-tool of lexical analysis and tokenization. Make parsers in less time for many use cases.\nhttps://github.com/JakeRoggenbuck/plrs f09f [ source] # pronounced fonf; is a simple statically typed language with simple but powerful syntax\nhttps://github.com/JakeRoggenbuck/f09f https://github.com/JakeRoggenbuck/f09f-rs Description # This one was my first lexer written in C++ and was very fast and robust. This is also a project where I did the first reimplementation of a lexer for the same lang. The reimplementation was in Rust, so it was also my first lexer in Rust.\nmahou [ source] # Description # Mahou is my AP Computer Science create task for the 2020-21 year. Mahou is a source-to-source compiler, from a custom language to python. Mahou uses a lexer to find all of the tokens in the original source, then uses a parser to convert the source code into python.\nhttps://github.com/JakeRoggenbuck/mahou Paper [ source] # A simple programming language and its interpreter\nhttps://github.com/JakeRoggenbuck/Paper Planck [ source] # https://github.com/JakeRoggenbuck/pinter ice [ source] # https://github.com/JakeRoggenbuck/ice snow_script [ source] # A simple and high/low macro lang, similar to pogscript with way nicer syntax\nhttps://github.com/JakeRoggenbuck/snow_script calcLex [ source] # A test of lexing and yacc in python\nhttps://github.com/JakeRoggenbuck/calcLex cruz-lang [ source] # Cruz Lang is a simple explicit static typed language.\nhttps://github.com/JakeRoggenbuck/cruz-lang pogscript [ source] # A simple macro language\nhttps://github.com/JakeRoggenbuck/pogscript ","date":"28 August 2021","permalink":"/projects/programming-languages/","section":"Projects","summary":"","title":"programming-languages"},{"content":"\nlesson-tester # Test python code in the browser. Wrap code with specific lesson tests for code completeness grading.\n","date":"27 August 2021","permalink":"/projects/lesson-tester/","section":"Projects","summary":"","title":"lesson-tester"},{"content":"\n2021-software-general-homework # Assignments that crash immediately when run cannot be made up. All assignments will be due by the next lesson. Late assignments will be graded on a curve of 85% maximum. If you won\u0026rsquo;t be able to complete an assignment on time, slack Kate, Ludi, and/or Emily. We will not be telling you your exact grades. Instead, you will be given your grade on a \u0026ldquo;fail/needs work/pass\u0026rdquo; scale. If you have questions regarding grades, slack the graders in a DM. It is mandatory to redo homework until you receive a \u0026ldquo;pass\u0026rdquo;. You will be allowed to redo assignments for full credit only if rules 1 and 3 do not apply. You must ask or answer at least 2 pertinent questions during a lesson for full points on that day. All non-personal questions must be asked in #2_software_general or during worktime meetings. If you will not be able to attend a meeting, slack Ludi, Kate, and Emily least 24 hours prior to the meeting. 1. Functionality # Have you tested your code, including edge cases? Does your code accomplish the assigned task? 2. Concepts # Does your code use only concepts previously taught by us? Does your code use concepts relevant to the assignment? 3. Style # Does your code meet our style guidelines? Double quotes Proper indentation Appropriate usage of snake**case and CapWords Comment formatting Naming conventions (may be given in assignment) ","date":"23 August 2021","permalink":"/projects/2021-software-general-homework/","section":"Projects","summary":"","title":"2021-software-general-homework"},{"content":"\nVyxal - Terse, Elegant and Readable # Vyxal is the latest addition to the plethora of stack-based languages used for code golfing. But unlike its competitors, Vyxal has a special focus upon readability and elegancy. Indeed, the codepage has been specially chosen to be as mnemonic as possible. Further, constructs from practical languages (such as functions, lambdas and easy list manipulation) are present.\n(Vyxal is pronounced Vikesal)\nHow to use the interpreter: # python3 Vyxal.py \u0026lt;file\u0026gt; \u0026lt;flags (single string of flags)\u0026gt; \u0026lt;input(s)\u0026gt;\nFor a list of command-line flags: python3 Vyxal.py h\nData Types # There are 5 data types supported by Vyxal:\nNumbers (integers and reals/floats) Strings Lists Generators Functions Basic Operators # +-*/% perform addition, subtraction, multiplication, division and modulo respectively. , prints the top of the stack :_ duplicates the top of the stack and pops the top of the stack respectively ! pushes the length of the stack Syntax Constructs # If statements # [truthy_branch|falsey_branch] [truthy_branch] The if statement pops the top of the stack, and if it is truthy, executes the truthy branch. Otherwise, if a falsey branch is present, it will branch to execute that.\nFor loop # (variable|body) (body) The for loop pops the top of the stack and iterates through each item. If the value popped is an integer, it loops through the range [0, n). If variable is present, the iteration value is stored in that. Otherwise, the iteration value is stored in the context variable n.\nWhile loop # {condition|body} {body} The while loop repeats body until condition evaluates as true. If there is no explicit condition, 1 is used as the condition, meaning that {...} is an infinite loop.\nFunctions # @name|code; @name:number_of_arguments|code; @name:variable|code; @name:argument_list|code; @name; If code isn\u0026rsquo;t present, the function with name name is called. Otherwise, the function is defined. The arguments can be a combination of variables and numbers. Numbers tell the function how many items to pop from the main stack as arguments, and variables store a single value in the variable. Numbered arguments are pushed to the function\u0026rsquo;s stack \u0026ndash; functions operate on their own scoped stack with scoped variables (much like Python).\nFor example:\n@triple:1|3*; Takes 1 parameter and pushes it to the function\u0026rsquo;s stack\n@triple:value|←value 3*; Takes a single argument and stores it in variable value.\n@add_and_halve:1:rhs|←rhs +2/; Takes two arguments: pushes the first on to the stack and stores the second in variable rhs\n@average:*|W:L$∑$/; Takes however many arguments as defined by the first value popped from the stack. A function call of 2 3 3 3 @average; would take three arguments.\nLambdas # λarity|code; λcode; Where the @...; function stores the definition for infinite re-use, the lambda pushes a reference to the code inside it. This is similar to python\u0026rsquo;s lambdas, which are temporary functions, or literal functions (for lack of better word).\nThese can be applied using †. For example: 3 λ3*; † will result in 9. Lambdas are also useful for mapping/filtering/reducing a vector according to the lambda\u0026rsquo;s code.\nImplicit input and output # At the end of program execution (eof), if nothing has been printed (using , or other printing commands), the top value on the stack is automatically printed. If there isn\u0026rsquo;t enough values on the stack to perform an operation, implicit input is taken. If input is passed through command line arguments, then the input used is cycled. Input can be either through arguments or STDIN. STDIN is used if arguments aren\u0026rsquo;t avaliable. If no input is avaliable at all, 0 is returned. In functions (and lambdas), if implicit input is needed, the argument(s) passed are used as the input \u0026ldquo;list\u0026rdquo;. Commands # Vyxal has so many commands that it is impractical to list them all here. Here is the reference page ( markdown).\nExamples # Hello, World! # `Hello, World!` Try it Online!\n`ƈṡ, ƛ€! Try it Online!\nThe above program uses dictionary compression: words in a predefined list are indexed using a subjective base-162 literal.\nkH Try it Online!\nFizzbuzz # ₁ƛ₍₃₅kF½*∑⟇ Try it Online! Explanation\nPrime Checking # æ Try it Online!\nKL2= Try it Online!\nLinks # Repository Online Interpreter Tutorial Codepage Chat Room (SE Chat) Very Special Contributors (alphabetically sorted) # code-golf se user @2x-1 for helping me establish the fundamentals of Vyxal and being my first collaborator on this journey. @8dion8 for language suggestions and motivation in the MAWP discord group. @Amiller42 for pointing out bugs and fixing bugfixes @chunkybanana for also bug fixing and making PRs @detectivewasif for adding detail to the reference sheet. @Razetime for helping me with the online interpreter\u0026rsquo;s design @ysthakur for making the reference.md file and making an automated process to do so. ","date":"23 August 2021","permalink":"/projects/vyxal/","section":"Projects","summary":"","title":"Vyxal"},{"content":"\nJai # Our entry to the langjam\nRequirements: # Rust \u0026amp; Python\nPip requirements: run\npip install -r requirements.txt Build instructions # Build the lexer crate with\nmaturin build Install lexer with\npip install ./target/wheels/jai-0.1.1-* # Add a `--force-reinstall` if reinstalling Troubleshooting # If you get something saying maturin command not found after you install it via pip. Try using python3 -m pip to install it and python3 -m maturin to run it. If jai does not seem to change after editing the source, make sure to do the build instructions again and use --force-reinstall Test # Run build instructions run pytest Syntax # Variable # variable: type; variable: type = value; Functions # fn myfunc(num: int) -\u0026gt; int { return num + 10; } Types # Name details int an integer str a string ","date":"20 August 2021","permalink":"/projects/jai/","section":"Projects","summary":"","title":"jai"},{"content":"\nJam #1 # Welcome to the first langjam! We\u0026rsquo;re excited to get started.\nTheme # The theme of the jam is \u0026ldquo;first-class comments\u0026rdquo;.\nGetting started # To participate:\nfork this repo make a copy of the TEMPLATE directory rename the copy to your team name (for example, if your team is \u0026ldquo;foobazers\u0026rdquo; rename TEMPLATE to foobazers) update the TEAM file in the directory with the name of your team members. Team members should be listed by their GitHub username. The first username on the list of team members is the team captain (see below) send a PR to add your team to the repo Team names are \u0026ldquo;first come, first served\u0026rdquo; so if someone else takes your team name you\u0026rsquo;ll need to come up with a new one.\nOnce your team has a directory, you can submit your project.\nTeam names # Please keep your team names \u0026ldquo;family-friendly\u0026rdquo;. Sole discretion for what counts as \u0026ldquo;family friendly\u0026rdquo; is left up to JT, but if the name is safe/kid-friendly you should be fine.\nOne-person teams # If you are a single-person team, feel free to make up a team name or use your GitHub username as the team name, if it\u0026rsquo;s available.\nSubmitting your project # When you submit your project, send a PR that updates only your team\u0026rsquo;s directory and nothing else.\nIn the PR, submit:\nyour project\u0026rsquo;s source a README.md that describes how to build and use the project sample files written in your language Team captains # The team captains will be the ones responsible for sending the PR to submit your project.\nHelp, I\u0026rsquo;ve never used GitHub # You can read through the helpful hello world from GitHub. If you\u0026rsquo;ve never forked a repo, you can check out the GitHub forking tutorial.\nTimeline # The langjam begins at 7pm UK time 20th of August and runs for 48 hours. At 7pm UK time 22nd of August, we\u0026rsquo;ll end submissions for the jam. Make sure you have submitted your PR before this cut-off.\nJudging # Judging will take place after the jam has ended. Once judging has concluded, we\u0026rsquo;ll pick a set of winning projects that will become part of a video on the Systems with JT YouTube channel.\nYou\u0026rsquo;re welcome to try out other projects. We\u0026rsquo;ll have a way to leave comments so you can share your thoughts and vote on which you liked best, too.\nOther rules # General information about the langjam is available in the main langjam README.\nSocial media # If you like, you can tag your social media posts with #langjam2021 to help others find you.\n","date":"20 August 2021","permalink":"/projects/jam0001/","section":"Projects","summary":"","title":"jam0001"},{"content":"\n🦑 stow-squid 0.1.2 # Stow your dotfiles\nInstall # git clone https://github.com/JakeRoggenbuck/stow-squid.git cd stow-squid cargo install --path . # Add config to ~/.config/stow-squid/stow-squid.toml mkdir -p ~/.config/stow-squid/ \u0026amp;\u0026amp; cp example-config.toml ~/.config/stow-squid/stow-squid.toml Verbs # For all verbs, the name is of a specific dotfile and is optional. Including a name will only run the verb on that dotfile. Without a name, it will run the verb on all the dots in the config.\nSave # This is to update your dotfiles (that are scattered around your machine) to your git repo\nstow-squid save \u0026lt;name\u0026gt; Deploy # This is to place all your dotfiles from your git repo to all the various places they might go\nstow-squid deploy \u0026lt;name\u0026gt; List # stow-squid list Config # # Git path gitpath = \u0026#34;/path/to/git/dir\u0026#34; # Structure # [[files]] # name = \u0026#34;dotfile-name\u0026#34; # origin = \u0026#34;path/to/file/from/git/repo\u0026#34; # deployed = \u0026#34;/path/to/where/the/file/is/placed\u0026#34; # Example # [[files]] # name = \u0026#34;bspwm\u0026#34; # origin = \u0026#34;/home/jake/Build/dotfiles/bspwm/bspwmrc\u0026#34; # deployed = \u0026#34;/home/jake/.config/bspwm/bspwmrc\u0026#34; # Add you first dotfile here [[files]] name = \u0026#34;\u0026#34; origin = \u0026#34;\u0026#34; deployed = \u0026#34;\u0026#34; Config Example # gitpath = \u0026#34;/home/jake/Build/dotfiles/\u0026#34; [[files]] name = \u0026#34;bspwm\u0026#34; origin = \u0026#34;/home/jake/Build/dotfiles/bspwm/bspwmrc\u0026#34; deployed = \u0026#34;/home/jake/.config/bspwm/bspwmrc\u0026#34; [[files]] name = \u0026#34;alacritty\u0026#34; origin = \u0026#34;/home/jake/Build/dotfiles/alacritty/alacritty.yml\u0026#34; deployed = \u0026#34;/home/jake/.config/alacritty/alacritty.yml\u0026#34; [[files]] name = \u0026#34;bashrc\u0026#34; origin = \u0026#34;/home/jake/Build/dotfiles/.bashrc\u0026#34; deployed = \u0026#34;/home/jake/.bashrc\u0026#34; [[files]] name = \u0026#34;sxhkd\u0026#34; origin = \u0026#34;/home/jake/Build/dotfiles/sxhkd/sxhkdrc\u0026#34; deployed = \u0026#34;/home/jake/.config/sxhkd/sxhkdrc\u0026#34; Help # USAGE: drop \u0026lt;verb\u0026gt; [dot] FLAGS: -h, --help Prints help information -V, --version Prints version information ARGS: \u0026lt;verb\u0026gt; \u0026lt;dot\u0026gt; ","date":"13 August 2021","permalink":"/projects/stow-squid/","section":"Projects","summary":"","title":"stow-squid"},{"content":"\n404: Not Found\n","date":"8 August 2021","permalink":"/projects/dragon/","section":"Projects","summary":"","title":"dragon"},{"content":"\nplrs # The multi-tool of lexical analysis and tokenization.\nInstall # pip install plrs Build # maturin build Examples # zipfs-law API # Global variables # EOF_TOKEN Classes # Tokens Settings Token - part - token - set_part - set_token - __str__ - __repr__ Lexer - new - char_forward - skip_over_char_set - next Functions # is_char_symbol is_char_operator is_char_whitespace is_char_numeric is_single_quote is_double_quote ends_token is_part_numeric tokenize ","date":"29 July 2021","permalink":"/projects/plrs/","section":"Projects","summary":"","title":"plrs"},{"content":"\nCutil # Cutil is a rewrite of the gnu core utils, also in C. Written by Adam Hutchings and Jake Roggenbuck.\nList # cat.c ls.c nl.c yes.c head.c help.c clear.c ","date":"20 July 2021","permalink":"/projects/cutil/","section":"Projects","summary":"","title":"cutil"},{"content":"\npylex_lite # The test for plrs\n","date":"18 July 2021","permalink":"/projects/pylexlite/","section":"Projects","summary":"","title":"pylexlite"},{"content":"\nleast-squares-regression # View least-squares.ipynb # ","date":"17 July 2021","permalink":"/projects/least-squares-regression/","section":"Projects","summary":"","title":"least-squares-regression"},{"content":"\ncolorgradient-julia # Python version colorgradient Rust version colorgradient-rs Julia version colorgradient-julia C version colorgradient-c Go version colorgradient-go Clojure version colorgradient-clj # Find the slope of two point find_slope(x1, y1, x2, y2) = (y2 - y1) / (x2 - x1) # Find the closest whole numbers on both sides of a x neighbors(x) = round(x), ceil(x) # Find the predicted value of y given a value x function find_y(x, known_x) # Check if the given value is exactly one in the known list if round(x) == x return known_x[x] end left_x, right_x = neighbors(x) left_y = known_x[left_x] right_y = known_x[right_x] slope = find_slope(left_x, left_y, right_x, right_y) return left_y + (slope * (x - left_x)) end ","date":"14 July 2021","permalink":"/projects/colorgradient-julia/","section":"Projects","summary":"","title":"colorgradient-julia"},{"content":"","date":"14 July 2021","permalink":"/tags/julia/","section":"Tags","summary":"","title":"Julia"},{"content":"\nACS Upstream - autoclockspeed.org - Our crates.io - ACS Github Org # A utility to check stats about your CPU, and auto regulate clock speeds to help with either performance or battery life. This program is designed for Linux and Intel laptops, although it should theoretically work on AMD systems and sometimes desktops as well. If you encounter any issues or bugs, please refer to the wiki to see if there is a solution.\nGoals # First and foremost, this is a project to learn about Rust and Linux Secondly, try to improve upon AdnanHodzic\u0026rsquo;s already amazing auto-cpufreq Add options to display raw output of governors, clockspeed, turbo, battery, etc. for use in scripts or display panels like polybar. Want to help? Yay! Welcome! # Read our CONTRIBUTING.md for some helpful tips Find an issue - \u0026ldquo;good first issue\u0026rdquo; recommended Feel free to ask questions! Install Latest Release # If you have cargo on your machine, skip to step 3\nGo to rustup.rs to install rust.\nSetup rust\nrustup override set stable rustup update stable Clone the project and install\ngit clone https://github.com/JakeRoggenbuck/auto-clock-speed cargo install --path auto-clock-speed # This is needed to have the root version of acs match the local installed version sudo cp ~/.cargo/bin/acs /usr/bin/acs Note: If you recieve error linker 'cc' not found, then you need to install a C compiler (gcc, cmake, etc.) first.\nNote: The latest release of acs can also be installed locally with the following\ncargo install autoclockspeed Tested Devices # Auto clock speed has been tested to work on the following devices. If you have a device that is not listed please submit a pull request.\nFunctionality Description Working All parts of ACS are fully functional, the computer has enough data to make decisions on governor changes and can be run in edit mode Mostly Working ACS is unable to understand some data from the computer however certain data (like battery life, battery condition, temperature etc) which is non essential in making governor decisions, is missing Partially Working ACS is able to mostly work, although with one or more significant caveat (i.e. jailbreak on Apple devices or root access on Android) Barely Working ACS is unable to be run in edit mode due to missing data from the system, monit mode may still work however functionality is limited. If you have a system that falls under this category please open an issue Borked ACS cannot find any useful data. Please open an issue Device Name Functionality Notes Dell XPS 13 9360 Working Dell Latitude 7480 Working Steam Deck Working Edit mode not neccessary (use built in governor switcher) Thinkpad T400 Working Thinkpad T460 Working Thinkpad X230 Working Thinkpad X301 Working Thinkpad W540 Working ThinkPad X1 Extreme Gen 1 Working Thinkpad P1 Gen 4 (Intel Core) Working Thinkpad P14 Gen 2 (AMD) Mostly Working See #443 OnePlus 9 Pro (Snapdragon 888 SoC) Partially Working Needs root access; compile from source through termux iPad Pro Gen 6 Barely Working Compiles with iSH, but cannot access any data In Action # New Interactive Mode # Systemd # In order to have auto-clock-speed start when you restart your computer you must follow these instructions\n# IMPORTANT: Modify the service file (acs.service) in the # project directory to include the path to the binary file # (usually /home/username/.cargo/bin/acs) # In the auto clock speed directory run this command to # move the service file into your systemd directory sudo cp acs.service /etc/systemd/system/ # Start and enable the service sudo systemctl start acs sudo systemctl enable acs # Check service is up and running systemctl status acs Systemctl command # The line after [Service] in acs.service is the command that will be run. You may want to add or remove arguments, mainly --quiet.\n[Unit] Description=Manages Clock Speed [Service] ExecStart=/home/your-user-here/.cargo/bin/acs run --no-animation --quiet [Install] WantedBy=multi-user.target Config # Using default config # WARN: Using default config. Create file \u0026#39;/etc/acs/acs.toml\u0026#39; for custom config or run \u0026#39;acs initconfig\u0026#39; to setup default config automatically. This warning recommends creating a config file, use the initconfig command to automatically create one for you!\nsudo acs initconfig This is an example config # also the default settings if no config is provided\n# acs.toml powersave_under = 20 overheat_threshold = 80 active_rules = [ \u0026#34;battery_percent_rule\u0026#34;, \u0026#34;lid_open_rule\u0026#34;, \u0026#34;ac_charging_rule\u0026#34;, \u0026#34;cpu_usage_rule\u0026#34; ] Turn Off # If you would like to turn off auto-clock-speed, here are the steps.\nNote: This should be done during testing of acs run mode.\n# Temporarily stop (only lasts until reboot) sudo systemctl stop acs # Permanently stop until turned on sudo systemctl disable acs Uninstall # Here is how to uninstall the binary and the systemctl service.\n# Remove local binary cargo uninstall acs # Remove system shared binary rm /usr/bin/acs # Remove systemctl entry rm /etc/systemd/system/acs.service Example Usage # Here are some examples of how acs can be used.\n# Monitor mode acs monitor # Run as root sudo acs run # Get all speeds acs get speeds # Select gov from dmenu sudo acs set gov $(acs get available-govs --raw | dmenu) Detailed usage # Detailed usage can be found on our wiki\nHelp # Automatic CPU frequency scaler and power saver USAGE: acs \u0026lt;SUBCOMMAND\u0026gt; FLAGS: -h, --help Prints help information -V, --version Prints version information SUBCOMMANDS: daemon Controls interaction with a running daemon get Get a specific value or status help Prints this message or the help of the given subcommand(s) initconfig Initialize config interactive Interactive mode for auto clock speed commands monitor Monitor each cpu, it\u0026#39;s min, max, and current speed, along with the governor run Run the daemon, this checks and edit your cpu\u0026#39;s speed set Set a specific value showconfig Show the current config in use ","date":"7 July 2021","permalink":"/projects/auto-clock-speed/","section":"Projects","summary":"","title":"auto-clock-speed"},{"content":"\nThis is the repository for the QME source code and assets.\nQME # Keybinds # w, a, s, and d for movement i zooms the camera in o zooms the camera out Requirements # The project is built using the latest version of open Java Development Pack java-latest-openjdk-devel\nThe current version the program supports Java version 15\nMaximum backwards compatibility with JDK version 11\nNote: If you are using MacOS and do not have a working Maven installation, please run the script ./scripts/classpath_manager.py and select the ./osx_classpath\n","date":"5 July 2021","permalink":"/projects/qme/","section":"Projects","summary":"","title":"qme"},{"content":"\ncproc # A small C preprocessor, written in C.\n#define A 4 // New code int main() { int main() { int x = A; -\u0026gt; int x = 4; } } build # ./scripts/build.sh run # ./build/cproc ","date":"4 July 2021","permalink":"/projects/cproc/","section":"Projects","summary":"","title":"cproc"},{"content":"\nClifford Attractors # ","date":"30 June 2021","permalink":"/projects/clifford/","section":"Projects","summary":"","title":"Clifford"},{"content":"","date":"30 June 2021","permalink":"/tags/html/","section":"Tags","summary":"","title":"HTML"},{"content":"\nmy-readme-image # ","date":"30 June 2021","permalink":"/projects/my-readme-image/","section":"Projects","summary":"","title":"my-readme-image"},{"content":"\nnovus-chart # A modern looking, accessible medical chart application based on a MERN stack.\n","date":"30 June 2021","permalink":"/projects/novus-chart/","section":"Projects","summary":"","title":"novus-chart"},{"content":"\nsorting-algorithms # This repository contains a variety of sorting algorithms written in several programming languages. Currently, it contains the selection and insertion sort algorithms implemented using Java and Python. More languages and algorithms will be added in the future.\n","date":"29 June 2021","permalink":"/projects/sorting-algorithms/","section":"Projects","summary":"","title":"sorting-algorithms"},{"content":"\nflowerknight # Overview # This is a game we are making over the summer as a demo for our club. In the game, you are a knight who needs to protect and transport a flower.\nDetails # We are using Java 16 and OpenGL\nContributing # All PRs must have two reviews before merge, and changes to the code (things in src) must have a corresponding issue attached. All PRs must have one test at least, PRs are subject to added review specs, for example, \u0026ldquo;test on mac\u0026rdquo; or \u0026ldquo;test on all platforms\u0026rdquo;. You cannot mark as reviewed, or mark as tested if you have worked on a specific PR. Whoever you are encurraged to review PRs you added to, and are expected to test.\nIt\u0026rsquo;s always welcome to make new issues, and review PRs. We will assign issues to people, but you can also ask on the issue if you want to be assigned that issue.\nRequirements # The project is built using the latest version of Open Java Development Kit (Open JDK) java-latest-openjdk-devel\nThe current version the program supports Java version 16\nMaximum backwards compatibility with JDK version 11\n","date":"1 June 2021","permalink":"/projects/flowerknight/","section":"Projects","summary":"","title":"flowerknight"},{"content":"\nlink # Description # A public mirror of the private development link repository, without the .env and Rocket.toml hosted on heroku\nSetup # .env needs the following\nDATABASE_URL=url or uri to database AUTH_KEY=an auth key Rocket.toml\n# Database [global.databases.redirect-api] url = \u0026#34;postgres://\u0026lt;user\u0026gt;:\u0026lt;password\u0026gt;@localhost/redirect-api\u0026#34; ","date":"26 May 2021","permalink":"/projects/link/","section":"Projects","summary":"","title":"link"},{"content":"\nmahou # Mahou is my AP Computer Science create task for the 2020-21 year. Mahou is a source-to-source compiler, from a custom language to python.\nMahou uses a lexer to find all of the tokens in the original source, then uses a parser to convert the source code into python.\nFirst language # set a = 0; a += 1; print a; Tokens parsed # Type Part Line ---------------------------- Set set 1:1 Identifier a 1:5 Assign = 1:7 Numeric 0 1:9 Semi ; 1:10 Identifier a 2:12 Plus + 2:14 Assign = 2:15 Numeric 1 2:17 Semi ; 2:18 Print print 3:20 Identifier a 3:26 Semi ; 3:27 Outputted python # a = 0 a+=1 print(a) ","date":"20 May 2021","permalink":"/projects/mahou/","section":"Projects","summary":"","title":"mahou"},{"content":"\nRock # A simple command line utility for manipulating standard in and out, similar to awk\nInstall # git clone https://github.com/JakeRoggenbuck/rock cargo install --path rock Usage # short long description example -r --replace replace a certain string with another rock --replace \u0026quot;~\u0026quot; \u0026quot;/home/jake\u0026quot; -s --split split into multiple lines after a character rock --split , Examples # echo $PATH | rock -s : | rock -r \u0026#34;/home/jake\u0026#34; \u0026#34;~\u0026#34; echo \u0026#34;~/Downloads,~/Documents,~/Repos/rock\u0026#34; | rock --replace \u0026#34;~\u0026#34; \u0026#34;/home/jake\u0026#34; echo \u0026#34;~/Downloads,~/Documents,~/Repos/rock\u0026#34; | rock --split , | rock --replace \u0026#34;~\u0026#34; \u0026#34;/home/jake\u0026#34; TODO Feature # -f --filter will filter out something -b --block will completely block out something -o --only will only show something -p --prepend something to the begining -a --append something the end ","date":"17 May 2021","permalink":"/projects/rock/","section":"Projects","summary":"","title":"rock"},{"content":"\nmongoc-rs # Quickly view your mongodb databases, their collections, and their documents from the command line\nInstalling # git clone https://github.com/JakeRoggenbuck/mongoc-rs cargo install --path mongoc-rs ","date":"9 May 2021","permalink":"/projects/mongoc-rs/","section":"Projects","summary":"","title":"mongoc-rs"},{"content":"\nPathfinder # A simple utility to view, edit, and search your $PATH\nUsage # Shorthand Flag Description h --help Display this page and exit v --version Display the version and exit l --list List all locations in $PATH (same as find with no keyword) f --find Find locations in $PATH including search keyword a --add Add location to the $PATH, and open a new bash prompt p --purge Unsets everything in $PATH, it will be empty n --number List locations in $PATH with numbers on side Install # git clone https://github.com/JakeRoggenbuck/pathfinder cargo install --path pathfinder ","date":"6 May 2021","permalink":"/projects/pathfinder/","section":"Projects","summary":"","title":"pathfinder"},{"content":"\nhexviewer-rs # Hexviewer allows you to quickly view the hex representation of a file with vim style keybinds\nInstall # git clone https://github.com/JakeRoggenbuck/hexviewer-rs cargo install --path hexviewer-rs ","date":"4 May 2021","permalink":"/projects/hexviewer-rs/","section":"Projects","summary":"","title":"hexviewer-rs"},{"content":"\ncolorgradient-rs # Python version colorgradient Rust version colorgradient-rs Julia version colorgradient-julia C version colorgradient-c Go version colorgradient-go Clojure version colorgradient-clj Install # git clone https://github.com/JakeRoggenbuck/colorgradient-rs cargo install --path colorgradient-rs Test # cargo test Code # fn calculate_gradient(num: i64, original_colors: Vec\u0026lt;RGB\u0026gt;) -\u0026gt; Vec\u0026lt;RGB\u0026gt; { // Get the needed step value to fit the num of iterations in the original_colors length let step: f32 = (original_colors.len() as f32 - 1.0) / num as f32; let channels = get_channels(original_colors); let mut colors = Vec::\u0026lt;RGB\u0026gt;::new(); for i in 0..num { // Use step to count up with index let x: f32 = i as f32 * step; let mut color = Vec::new(); // Get each channel as a reference, use it as the known x values for channel in [\u0026amp;channels.red, \u0026amp;channels.green, \u0026amp;channels.blue].iter() { // Add the y values found from the x value to the color color.push(find_y(x as f32, channel).abs()); } // Change the vector of colors to RGB structure, and add it to all the colors colors.push(vec_to_rgb!(color)); } return colors; } ","date":"1 May 2021","permalink":"/projects/colorgradient-rs/","section":"Projects","summary":"","title":"colorgradient-rs"},{"content":"\nrocket-[not]-pinball # A game that started as pinball, but really isn\u0026rsquo;t, more fun\nSetup # pip3 install -r requirements.txt Running # # Start the HTTP server python3 app.py # Start the score REST API uvicorn app:APP --reload --port 8081 Current progress # Here are the decisions that have been made about the pinball game. The game won\u0026rsquo;t be the standard pinball game. It will have the mechanic of hitting the ball, but the objective is to have it travel upwards without hitting obstacles. It will be space themed, and the player is trying to send the ball to space, avoiding planets, meteors, and other space debris. It will be made using p5.js and a nodejs backend to host it. Basic game mechanics have been made, like ball and obstacle movement, along with obstacle creation and destruction.\n","date":"27 April 2021","permalink":"/projects/rocket-pinball/","section":"Projects","summary":"","title":"rocket-pinball"},{"content":"\nf09f-rs # pronounced fonf; is a statically typed language with simple but powerful syntax, and an interpreter written in rust\nInstall # git clone https://github.com/JakeRoggenbuck/f09f-rs cargo install --path f09f-rs Usage # Shorthand Flag Description -v Verbose output of tokens Syntax # Vars # int fact = 0; prec dec = 0.2; string this = \u0026#34;a string\u0026#34;; bool is_it = true; Functions # fun square(int n) returns int { ~ Return the square of n ~ return n ^ n; } Control flow # if (n == 0) { n = 1; } if (this and not that) { x = 1; } if (this or that) { x = 1; } if (this) { that = false; } else { that = true; } ","date":"22 April 2021","permalink":"/projects/f09f-rs/","section":"Projects","summary":"","title":"f09f-rs"},{"content":"\nArgos Translate # Docs | Website | Video intro\nOpen-source offline translation library written in Python. Uses OpenNMT for translations, SentencePiece for tokenization, Stanza for sentence boundary detection, and PyQt for GUI. Designed to be used as either a Python library, command-line, or GUI application. LibreTranslate is an API and web-app built on top of Argos Translate.\nArgos Translate supports installing model files which are a zip archive with an \u0026ldquo;.argosmodel\u0026rdquo; extension that contains an OpenNMT CTranslate2 model, a SentencePiece tokenization model, a Stanza tokenizer model for sentence boundary detection, and metadata about the model. Pretrained models can be downloaded here.\nArgos Translate also manages automatically pivoting through intermediate languages to translate between languages that don\u0026rsquo;t have a direct translation between them installed. For example, if you have a es ➔ en and en ➔ fr translation installed you are able to translate from es ➔ fr as if you had that translation installed. This allows for translating between a wide variety of languages at the cost of some loss of translation quality.\nModels # Browse models P2P download (IPFS and BitTorrent) Training script Google Drive download Supported languages # Arabic Chinese English French German Hindi Italian Japanese Polish Portuguese Turkish Russian Spanish Examples # GUI # Python # \u0026gt;\u0026gt;\u0026gt; from argostranslate import package, translate \u0026gt;\u0026gt;\u0026gt; package.install_from_path(\u0026#39;en_es.argosmodel\u0026#39;) \u0026gt;\u0026gt;\u0026gt; installed_languages = translate.get_installed_languages() \u0026gt;\u0026gt;\u0026gt; [str(lang) for lang in installed_languages] [\u0026#39;English\u0026#39;, \u0026#39;Spanish\u0026#39;] \u0026gt;\u0026gt;\u0026gt; translation_en_es = installed_languages[0].get_translation(installed_languages[1]) \u0026gt;\u0026gt;\u0026gt; translation_en_es.translate(\u0026#34;Hello World!\u0026#34;) \u0026#39;¡Hola Mundo!\u0026#39; Command Line # $ argos-translate --from-lang en --to-lang es \u0026#34;Hello World\u0026#34; Hola Mundo $ echo \u0026#34;Text to translate\u0026#34; | argos-translate --from-lang en --to-lang es Texto para traducir LibreTranslate Web App ( Demo) # LibreTranslate API # const res = await fetch(\u0026#34;https://libretranslate.com/translate\u0026#34;, { method: \u0026#34;POST\u0026#34;, body: JSON.stringify({ q: \u0026#34;Hello!\u0026#34;, source: \u0026#34;en\u0026#34;, target: \u0026#34;es\u0026#34; }), headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;} }); console.log(await res.json()); { \u0026#34;translatedText\u0026#34;: \u0026#34;¡Hola!\u0026#34; } Installation # Install from PyPI # Argos Translate is available from PyPI and can be installed with pip.\npython3 -m pip install --upgrade pip python3 -m pip install argostranslate Installation for Windows # CTranslate2, the inference engine for Argos Translate, currently only distributes binaries for Linux and MacOS so to install Argos Translate on Windows you will need to build CTranslate2 from source.\nInstall from Snap Store # Argos Translate is available from the Snap Store and auto installs a content snap to support translation between Arabic, Chinese, English, French, Russian, and Spanish. Additional languages can be installed from supplementary content snaps.\nWith snapd installed:\nsudo snap install argos-translate Automatically installs and connects to argos-translate-base-langs snap to support translations between Arabic, Chinese, English, French, Russian, and Spanish.\nAdditional languages can be installed from *.argosmodel files or from supplementary content snaps:\nargos-translate-de-en - German - English argos-translate-en-it - English - Italian argos-translate-en-pt - English - Portuguese To connect automatically: sudo snap connect argos-translate:argos-packages argos-translate-en-it:argos-packages\nTo run command line interface on Snapcraft:\nargos-translate.cli --help Python source installation # Dependencies # Requires Python3, pip (which should come with Python3), and optionally virtualenv to keep Argos Translate\u0026rsquo;s dependencies separate from other Python programs you have installed.\nPython Installation Instructions\nOn Ubuntu:\nsudo apt-get update sudo apt-get install -y python3 Install # Download a copy of this repo (this requires either installing git or downloading a zip from GitHub): git clone https://github.com/argosopentech/argos-translate.git cd argos-translate Make a virtual environment to install into (optional): python3 -m pip install --upgrade virtualenv # If virtualenv not already installed virtualenv env source env/bin/activate Install this package with pip: python3 -m pip install --upgrade pip python3 -m pip install . Build and install snap package # Install snapd if it isn\u0026rsquo;t already installed. Using snapd install snapcraft and its dependency multipass: sudo snap install multipass sudo snap install snapcraft Clone this repo: git clone https://github.com/argosopentech/argos-translate.git cd argos-translate From the root directory of this project build the snap package: SNAPCRAFT_BUILD_ENVIRONMENT_MEMORY=4G snapcraft Any unzipped package files in package/ will be automatically included in the snap archive (and won\u0026rsquo;t be able to be deleted by users of the snap).\nNote, the build won\u0026rsquo;t run with Snapcraft\u0026rsquo;s default build memory of 2GB so you need to set the SNAPCRAFT_BUILD_ENVIRONMENT environment variable. More on Snapcraft forum.\nInstall the snap package: sudo snap install --devmode argos-translate_\u0026lt;version information\u0026gt;.snap Run Argos Translate! # argos-translate argos-translate-gui When installing with snap a .desktop file should also be installed which will make Argos Translate available from the desktop menu.\nContributing # Contributions are welcome! Available issues are on the GitHub issues page.\nSupport # For support use the GitHub issues page or forum.\nDonations # If you find this software useful donations are appreciated.\nGitHub Sponsor PayPal Ethereum: 0x4E9017d8e275cA54C91E056381DAb9fe6ECC1AF6 Paid supporters receive priority support.\nLicense # Dual licensed under either the MIT License or CC0.\n","date":"21 April 2021","permalink":"/projects/argos-translate/","section":"Projects","summary":"","title":"argos-translate"},{"content":"\nMarkov chain # this is a simple markov chain implementation inspired by a project @nathansolomon1678 made\nGenerate chain # The text used to make the chain should be in ./all_stuff.txt, or change the string in markov.py from markov import MakeMarkov mark = MakeMarkov() # Only needed on first run mark.setup_db() # Pull all the words from the text file mark.read_file() # Make the sql database of unique words, only needed on first run mark.find_unique()\t# This will output to a database called `markov.db` # Finally build the markov chain! mark.train()\t# This will output to a file called `markov.json` Generate text (in code) # from markov import generate # Some text will be generated with 100 words text = generate() # Some text will start with the word \u0026#34;The\u0026#34; text = generate(start=\u0026#34;The\u0026#34;) # Some text with the length of 1000 words text = generate(length=1000) # Some text with the length of 1000 words and starting with \u0026#34;The\u0026#34; text = generate(length=1000, start=\u0026#34;The\u0026#34;) Generate text (with api) # uvicorn fast:app --reload Some text will be generated with 100 words # http://127.0.0.1:8000 Some text will be generated with 1000 words # http://127.0.0.1:8000?length=1000 Some text will start with the word \u0026ldquo;The\u0026rdquo; # http://127.0.0.1:8000?start=The Some text will start with the word \u0026ldquo;The\u0026rdquo; and with the length of 1000 # http://127.0.0.1:8000?start=The\u0026amp;length=1000 ","date":"12 April 2021","permalink":"/projects/markov-chain/","section":"Projects","summary":"","title":"markov-chain"},{"content":"\nJake Roggenbuck # Hello! My name is Jake Roggenbuck and I\u0026rsquo;m a student learning Computer Science. My favorite languages are Rust, Go and C. I also frequently use C++ and Python.\nView my monthly Dev Logs If you want to collaborate on a project, feel free to send me an email: me@jr0.org Website: jr0.org\nLinkedIn: Jake Roggenbuck\nGPG Key: 309BBC\nRecently, I have been interested in Machine Learning and Math.\n","date":"1 April 2021","permalink":"/projects/jakeroggenbuck/","section":"Projects","summary":"","title":"jakeroggenbuck"},{"content":"\nJournal.vim # What it does # This plugin lets you organize your daily journal.\nIt lets you open a day specific journal and manages the files all behind the scenes.\nSetup and Config # let g:journals_directory = \u0026#34;/path/to/journals_directory\u0026#34; \u0026#34; Set by default let g:journals_date_format = \u0026#39;%b-%d-%Y\u0026#39; \u0026#34; Set by default let g:journals_title_template = \u0026#39;Journal entry {date}\u0026#39; Commands # Command Description Journal Open the journal for today JournalSearch Keyword search for journals Future features # A search by date or relative date (ex. \u0026ldquo;last friday\u0026rdquo;) ","date":"31 March 2021","permalink":"/projects/journal.vim/","section":"Projects","summary":"","title":"Journal.vim"},{"content":"\nnitrogen-css # A very epic CSS front end framework that is slightly not bad. ","date":"31 March 2021","permalink":"/projects/nitrogen-css/","section":"Projects","summary":"","title":"nitrogen-css"},{"content":"\nursina-platform-game # ","date":"29 March 2021","permalink":"/projects/ursina-platform-game/","section":"Projects","summary":"","title":"ursina-platform-game"},{"content":"\nspicetify community themes # This is a collection of themes for spicetify, a command-line tool to customize Spotify; you can add your own theme simply by opening a Pull Requests (more info in the Contributions section).\nYou can find a preview of all the themes in the wiki. # Installation and usage # (If you use Arch Linux you can find this project on the AUR)\nOnce you cloned the repository you\u0026rsquo;ll need to put the files into the Themes folder. This varies between operating systems. The example shows the Themes directory for Linux. For other operating systems, see the Themes folder location here.\ncd spicetify-themes cp -r * ~/.config/spicetify/Themes NOTE: to install Dribbblish and DribbblishDynamic follow the instructions in its README.\nAfter that you can choose which theme to apply just by running spicetify config current_theme THEME_NAME. Some themes have 2 or more different color schemes. You can switch between them, once selected the theme, with spicetify config color_scheme SCHEME_NAME.\nContributions # If you want to add your theme:\nFork this repository Create another folder with your theme name. The theme name should consist of one word starting with an uppercase letter and shouldn\u0026rsquo;t contain spicetify or any whitespace in it; if a \u0026ldquo;-\u0026rdquo; is present in the name it must be followed by an uppercase letter. Copy color.ini and user.css into it Create a README.md in it with the following structure # THEME_NAME ## Screenshots [Put at least one image per color scheme here] ## More [Specify any needed font; (optionally) author name and/or any other info about the theme] Open a Pull Request Thanks to all the contributors.\nTroubleshooting # If you find problems when using or installing these themes, or you need help in modifying a theme use the Spectrum chat.\nFor bugs and requesting new features use the GitHub issues.\nIf you are unsure about which channel to use, go for Spectrum.\nNOTE: Spotify ad-blocked version is not supported.\n","date":"28 March 2021","permalink":"/projects/spicetify-themes/","section":"Projects","summary":"","title":"spicetify-themes"},{"content":"\nursina ʕ •ᴥ•ʔゝ□ # An easy to use game engine/framework for python.\nGetting Started # Install Python 3.6 or newer. https://www.python.org/downloads/\nOpen cmd/terminal and type:\npip install ursina If you want to install the newest version from git, you can install like this:\npip install git+https://github.com/pokepetter/ursina.git If you want to easily edit the source, it\u0026rsquo;s recommended to clone the git repo and install as develop like this. Make sure you have git installed. https://git-scm.com/\ngit clone https://github.com/pokepetter/ursina.git python setup.py develop Also install any of the optional dependencies you want from the list below, or install them all with:\npip install ursina[extras] On some systems you might have to use pip3 instead of pip in order to use Python 3 and not the old Python 2.\nDependencies # python 3.6+ panda3d screeninfo, for detecting screen resolution hurry.filesize, for converting bytes to megabytes pillow, for texture manipulation psd-tools, for converting .psd files blender, for converting .blend files pyperclip, for copy/pasting Examples # from ursina import * # this will import everything we need from ursina with just one line. app = Ursina() ground = Entity( model = \u0026#39;cube\u0026#39;, color = color.magenta, z = -.1, y = -3, origin = (0, .5), scale = (50, 1, 10), collider = \u0026#39;box\u0026#39;, ) app.run() # opens a window and starts the game. Minecraft Clone\nPlatformer Game\nHow do I make a game? # Ursina games are made by writing Python code. You can use any text editor you want, but personally I like to use Atom.\nCreate an empty .py file called \u0026lsquo;ursina_game.py\u0026rsquo; Copy this text into your new file: from ursina import * # this will import everything we need from ursina with just one line. app = Ursina() player = Entity( model = \u0026#39;cube\u0026#39; , # finds a 3d model by name color = color.orange, scale_y = 2 ) def update(): # update gets automatically called by the engine. player.x += held_keys[\u0026#39;d\u0026#39;] * .1 player.x -= held_keys[\u0026#39;a\u0026#39;] * .1 app.run() # opens a window and starts the game. Type this in the terminal to start the game:\npython ursina_game.py If you use Atom, I recommend installing the package atom-python-run to run your scripts with the press of a button.\nYou can now move the orange box around with \u0026lsquo;a\u0026rsquo; and \u0026rsquo;d\u0026rsquo;!\nTo close the window, you can by default, press shift+q or press the red x. to disable this, write \u0026lsquo;window.exit_button.enabled = False\u0026rsquo; somewhere in your code.\n","date":"28 March 2021","permalink":"/projects/ursina/","section":"Projects","summary":"","title":"ursina"},{"content":"\nZ-Flat # Overview # Z-flat is a compiled, statically-typed programming language. Its design goals are intuitive syntax, type-safety, and easy library management.\nRepository Overview # std - standard library folder zfc - the Z-flat compiler docs - all documentation\nSyntax highlighting # Vim # JakeRoggenbuck/zflat.vim Others # Please help us grow the zflat community and add support for your favorite tools Building # run ./scripts/build.sh to start the build process Running # run the compiler at ./cmake/zfc see instructions at docs/compiler.md Compiler Test # ./cmake/zfc input/file.zf compiles to input/file.o ","date":"25 March 2021","permalink":"/projects/zflat/","section":"Projects","summary":"","title":"zflat"},{"content":"\nzflat.vim # A syntax highlighting for zflat lang files\nInstall # Plug \u0026#39;jakeroggenbuck/zflat.vim\u0026#39; ","date":"25 March 2021","permalink":"/projects/zflat.vim/","section":"Projects","summary":"","title":"zflat.vim"},{"content":"\nf09f # pronounced fonf; is a simple statically typed language with simple but powerful syntax # Include # include standio; Byte # byte name = 10000000; Byte array # byte[] name; byte name = [10000000, 10000001]; Char # char letter = \u0026#39;A\u0026#39;; Char array # char[] letter; char letter = [\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;]; Int # int number = 4; Int array # int[] numbers; int numbers = [2, 5, 4]; Prec # prec percent = 3.4; Prec array # prec[] precise_numbers; prec precise_numbers = [3.14, 2.71828, 4.222]; Ptr # ptr my_variable = 0x494949; String # string name = \u0026#34;Jake\u0026#34;; Bool # isRunning = True; If # if (num \u0026gt; 0) { ~ do thing ~ } Else if # if (name == \u0026#34;Jake\u0026#34;) { ~ do thing ~ } else { ~ do other things ~ } If # if (val \u0026lt; physics.gravity) { ~ val is less than gravity ~ } else if (val \u0026lt; physics.gravity / 2) { ~ val is less than half gravity ~ } else { ~ val is greater than gravity ~ } Function # function foo (int age, int height) returns string { return(age ^ height); } Return # return(4); Entry # while () { ~ Looped code ~ } Exit # do { ~ Looped code ~ } while still (); For # loop for item in array { ~ Looped code ~ } Classes # class Lang (string name) { ~ constructor ~ self.name = name; } : Main { ~ main body ~ function hello_lang () returns string { return(\u0026#34;Hello \u0026#34; + self.name()); } } Static # static byte name = 10101010; static char letter = \u0026#39;A\u0026#39;; static ptr = 0x494949; Burn # burn string name = \u0026#34;Jake\u0026#34;; ","date":"11 March 2021","permalink":"/projects/f09f/","section":"Projects","summary":"","title":"f09f"},{"content":"","date":"24 February 2021","permalink":"/tags/glsl/","section":"Tags","summary":"","title":"GLSL"},{"content":"\nminecraft_texture_packs # ","date":"24 February 2021","permalink":"/projects/minecraft_texture_packs/","section":"Projects","summary":"","title":"minecraft_texture_packs"},{"content":"\nBookmark search # A simple thing to allow you to search your bookmarks better than any browser default bookmark search\nInstall meilisearch REST API from https://github.com/meilisearch/MeiliSearch and meilisearch with pip\n","date":"22 February 2021","permalink":"/projects/bookmark-search/","section":"Projects","summary":"","title":"bookmark-search"},{"content":"\ncolorgradient # Implementations # Python version colorgradient Rust version colorgradient-rs Julia version colorgradient-julia C version colorgradient-c Go version colorgradient-go Clojure version colorgradient-clj Diagram # TODOS # Make docs for usage, output, running, and testing\n","date":"20 February 2021","permalink":"/projects/colorgradient/","section":"Projects","summary":"","title":"colorgradient"},{"content":"","date":"15 February 2021","permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"Kotlin"},{"content":"\nkotlin-todo-app # First view # Second view # ","date":"15 February 2021","permalink":"/projects/kotlin-todo-app/","section":"Projects","summary":"","title":"kotlin-todo-app"},{"content":"\nScry # Scry is a web application that allows users to quickly check open ports, logins, and critical system information about their server from any web browser, anywhere.\nScry consists of both a local server and a client. The server is responsible for gathering data about the system it\u0026rsquo;s monitoring, then making it accessible to the client. The clients job is to present the data from the server, in an easy to use graphical interface in the browser.\nServer # The server includes two main parts, the updater_deamon and the Scry Fastapi. First, the updater_deamon will run commands in the background to gather crucial information about the system and update it in the local database. The Scry Fastapi will allow the client to pull data using an internal web API to present the data in the browser.\nRequirements # Python # The server code is located in ./server/, go to this directory before the next step\nInstall using pip3 install -r requirements.txt Non-Python # We use netstat and who for getting system information and Mongodb for our database\nMost systems come pre-installed with who, and possibly netstat but they may have to be installed separately\nRunning # Run ./start.sh to run the updater_deamon.py in the background then it will run the scry.py Fastapi app Client # The client is a Node.js React app the pulls data from the local Scry web API and displays it.\nRequirements # Install the requirements using npm install in the ./client/scry directory. Running # Then run it using npm start. Video demonstration # https://www.youtube.com/watch?v=D87Blido5tQ\nScreenshots # Design process artifacts # Original ideas # Original current designs # ","date":"15 February 2021","permalink":"/projects/scry/","section":"Projects","summary":"","title":"Scry"},{"content":"\nAgeInMinutes # A basic Kotlin app to test out android development with Kotlin.\nFirst view # Select a date # Confirm the date # Get the date in standard format # ","date":"14 February 2021","permalink":"/projects/ageinminutes/","section":"Projects","summary":"","title":"AgeInMinutes"},{"content":"\nGame Design Scoring Regression Model # Data # The data that this model used to train is the csv ./point-weighting-combined-new.csv and was made in a spreedsheet\nBuilding the model # Run the script ./generate_model.py to build the model\nUsage # To run the model that you built, this is all the code needed\nfrom tensorflow import keras import numpy as np import csv from generate_model import get_data_Y, get_data_X # Import the model made by ./generate_model.py model = keras.models.load_model(\u0026#39;neural_network.model\u0026#39;) # Gets the data from the model generator file \u0026#34;./generate_model.py\u0026#34; X = get_data_X() Y = get_data_Y() def test_each_match(): # Get the result actual win value, and the one predicted by the model for x, y in zip(X, Y): # Predicts the Y value from a given X result = model.predict(np.array([x])) # Prints the values in the (actual, predict) format print(y[0], result[0][0]) ","date":"6 February 2021","permalink":"/projects/game-design-scoring/","section":"Projects","summary":"","title":"game-design-scoring"},{"content":"\nInstalling QME # 1. Get Java 15 # Windows # If you are on windows, get the MSI version Java 15.0.2 MSI\nMac OS # Mac OS will use the zip version Java 15.0.2 ZIP\n2. Get the latest launcher # 2.1 Navigate to latest and click the qme-launcher-0.1.1.jar under assets # 2.2 Run the launcher jar with Java (By clicking it) and you will see the QME launcher open # 2.3 In the launcher, click Launch Game, it will have a popup that says Version not installed, would you like to install?. Click yes and watch the game download # 2.4 The game will say successfully installed when ready # 2.5 When it does say successfully installed click launch and the game will open! # ","date":"2 February 2021","permalink":"/projects/qme-launcher/","section":"Projects","summary":"","title":"qme-launcher"},{"content":"\nQME Releases # How to install QME unsing the QME Installer (Recommended) # Download the QME launcher from the releases section in this github repository and run the executable file. If you are having issues follow the instructions below.\nIf you are not using the latest version of Java runtime (15) then QME Installer will not work. Please install it here, or use the JRE 11-14 compatible release without the launcher.\nJRE versions lower than 11 are not supported.\nHow to install QME from a release # If your operating system is not supported or you just want to make things hard then you can manually install QME. To do this follow these steps:\nDownload your prefered release from the releases section of this repository. Create a directory and move the jar file into it. Create a directory named qdata inside of the directory you just created. Launch the game by running java -jar qme.jar. There are two versions of QME release, the offical version is compatible with JRE 15, but there is also an alternative version compatible with JRE 11-14.\nPlease note that older JRE compatibility may come with performance, stability, and other issues.\n","date":"1 February 2021","permalink":"/projects/qme-releases/","section":"Projects","summary":"","title":"qme-releases"},{"content":"","date":"30 January 2021","permalink":"/tags/crystal/","section":"Tags","summary":"","title":"Crystal"},{"content":"\ncrystal-colord # A library for colored text in crystal\nInstallation # Add the dependency to your shard.yml:\ndependencies: crystal-colord: github: jakeroggenbuck/crystal-colord Run shards install\nUsage # require \u0026#34;crystal-colord\u0026#34; message = CrystalColord::Colord.new \u0026#34;Hey\u0026#34; message.cyan(background=true) message.black puts message.bold Contributing # Fork it ( https://github.com/jakeroggenbuck/crystal-colord/fork) Create your feature branch (git checkout -b my-new-feature) Commit your changes (git commit) Push to the branch (git push origin my-new-feature) Create a new Pull Request Contributors # jakeroggenbuck - creator and maintainer ","date":"30 January 2021","permalink":"/projects/crystal-colord/","section":"Projects","summary":"","title":"crystal-colord"},{"content":"\nbash_startup # A program that runs every time I open a terminal\nMore complex things I want to run when my bashrc runs (external scripts)\nbash_startup # Description # There are two scripts, the first bash_startup are written in crystal and c++. This script will search through my bashrc and find aliases\nExample # start_alias_show () { bash_startup_cpp } # Checks if bash_startup_cpp is installed, then run it if [ 2\u0026gt;/dev/null 1\u0026gt;/dev/null $(which bash_startup_cpp) ]; then start_alias_show else echo \u0026#34;Install bash_startup_cpp and add it to your PATH\u0026#34; fi cheat_sheet_startup # Description # The second script is cheat_sheet_startup and will pull cheat sheets from cht.sh. This script is written in python.\nExample # # It will print the last cheat sheet located at `~/.cht_sheet_entry` # then it will pull the next one in the background so the perceived time # it takes to run is just the time it takes to read the cht_sheet_entry start_cheat_sheet () { # Print the cheat sheet pulled last run cheat_sheet_startup print # Pulling the cheat sheet (takes a few seconds) (cheat_sheet_startup pull \u0026amp;) } # Checks if the script is installed, then runs it if [ 2\u0026gt;/dev/null 1\u0026gt;/dev/null $(which cheat_sheet_startup) ]; then start_cheat_sheet else echo \u0026#34;Install cheat_sheet_startup and add it to your PATH\u0026#34; fi ","date":"29 January 2021","permalink":"/projects/bash-startup/","section":"Projects","summary":"","title":"bash-startup"},{"content":"\nQME5 File Server # A dynamic website to host jar files for the game qme5\nRun # python3 app.py\n","date":"21 January 2021","permalink":"/projects/qme5-server/","section":"Projects","summary":"","title":"qme5-server"},{"content":"\nPaper # print \u0026#34;Hello World!!\u0026#34; string .name = input \u0026#34;What\u0026#39;s your name? \u0026#34; int .age = input \u0026#34;What\u0026#39;s you age? \u0026#34; float .a_float = input \u0026#34;Pick a number greater than 1 and less than 2: \u0026#34; bool .ask_again = True string .name = input \u0026#34;What\u0026#39;s your name? \u0026#34; int .age = input \u0026#34;What\u0026#39;s you age? \u0026#34; stop ","date":"19 January 2021","permalink":"/projects/paper/","section":"Projects","summary":"","title":"Paper"},{"content":"\nSpicetify Custom Apps and Extensions A repository to help users find custom apps and extensions for spicetify-cli\nSummary # 🔥 A central location for custom apps and extensions for spicetify-cli 👀 More features 🎉 Open source How to add Custom Apps or Extensions to Spicetify # Install spicetify-cli using the instructions found here Click on the green Clone or download button at the top right this repo and choose Download ZIP Unzip the .zip file Choose the app that you want and drag it out of the folder Open the spicetify-cli CustomApps folder (paths can be found below) Drag the custom app into the CustomApps folder Open config.ini and add the name of the custom app to the custom_apps line separated by the | character [AdditionalOptions] ... custom_apps = reddit|genius|yourownapp OR add the respective apps / extension by typing: spicetify config extensions CustomAppOrExtensionName.js Run spicetify backup apply in the command line and Spicetify will install the app You\u0026rsquo;re set! 🎉 CustomApps Folder Paths # Platform Path macOS ~/spicetify_data/Themes OR\n$SPICETIFY_CONFIG/CustomApps Windows %userprofile%.spicetify\\CustomApps\\ Linux ~/.config/spicetify/CustomApps OR\n$XDG_CONFIG_HOME/.config/spicetify/CustomApps/ Want to contribute your custom app(s) to this repo? # Follow the instructions below or read the CONTRIBUTING.md file!\nFork this repository Create another folder with your custom app name in all lower case with no symbols (dashes and underscores are okay) or spaces. Ensure the files and folders don\u0026rsquo;t contain the word spicetify Copy the necessary files into the folder Create a README.md in it with the following structure # App Name ## Screenshots [Put at least one image of the app working here] ## More [Specify any dependencies, author name, and any other info about the custom app] (Optional) Add your name and custom apps or extensions to the AUTHORS.md file If you decide to add your name, please use the following format # Authors ... ### [Your name](link to website, GitHub profile, donation page, etc.) - [Your custom app](link to repo) - Your custom app description and other info Open a Pull Request Support # If you run into any issues or need help troubleshooting any custom apps or extensions reach out to the Spicetify community on Spectrum\nIf there are bugs or you\u0026rsquo;d like to request a feature, open an issue using the respective template.\nLicense # Licensed under the MIT License by Braxton Huff\nIf there is any other problem, please refer to the spicetify-cli wiki to help troubleshoot your problem. # Hopefully this helps improve your use of Spotifty and treats you well! Cheers! # ","date":"18 January 2021","permalink":"/projects/spicetify-customapps/","section":"Projects","summary":"","title":"spicetify-customapps"},{"content":"\nreminder-bot # A Discord Bot designed to remind users of custom events\n","date":"2 January 2021","permalink":"/projects/reminder-bot/","section":"Projects","summary":"","title":"reminder-bot"},{"content":"\nDraft.vim # Quickly writeup and save drafts for messaging apps in your favorite editor vimawesome.com/plugin/draft-vim\nWhy use Draft.vim # I often write important messages in a vim buffer before I send it.\nThe main reason for this is because it is simply faster. The second reason is you might want syntax highlighting or auto formating. Also, sometimes you want to write a message without worrying about accidentally sending it. Requirements # Pandoc wkhtmltopdf Dragon ( https://github.com/mwh/dragon) Features # - Quickly open a new file, well named - File contains attributes like date, title, and platform that can be searchable Setup and Config # Make a drafts directory # \u0026#34; Add the command to setup a drafts directory let g:drafts_directory = \u0026#34;/path/to/drafts/\u0026#34; Optional, create a keybind for the commands # NewDraft Keybind # nnoremap \u0026lt;Leader\u0026gt;nd :call NewDraft()\u0026lt;CR\u0026gt; ListDrafts Keybind # nnoremap \u0026lt;Leader\u0026gt;ld :call ListDrafts()\u0026lt;CR\u0026gt; OpenDrafts Keybind # nnoremap \u0026lt;Leader\u0026gt;z :call OpenDrafts()\u0026lt;CR\u0026gt; Use # Commands # Command Description Draft Open a blanck new draft Draft \u0026quot;title\u0026quot; Open a draft with a title DraftExt \u0026quot;extension\u0026quot; Change the file extension of a draft Drafts Open the draft directory in a buffer DraftCopy Copy the contents of the draft to the clipboard DraftSearch Search through drafts by keyword More info # - New draft: run `:Draft` or `:Draft \u0026quot;\u0026lt;Title\u0026gt;\u0026quot;` to auto name with the date and time - Edit the file extension: run `:DraftExt .md` to change the file to markdown - Open the drafts directory: run `:Drafts` - Copy the contents of the current draft `:DraftCopy` - Draft will open a new file in a specific directory, with a unique name - The file will be based on a template with stuff like the title and datetime Install # Vim-Plug # Plug \u0026#39;jakeroggenbuck/draft.vim\u0026#39; Vundle # Plugin \u0026#39;jakeroggenbuck/draft.vim\u0026#39; Versions # 0.1 draft.vim - not fully functional, just a concept # Open a new draft with a name List the draft but no reopening them 0.2 draft.vim - first complete version # Add OpenDrafts() Add new command aliases Draft, DraftExt 0.3 draft.vim - more features # Add ClipDraft() or DraftCopy Add Buffer reload for DraftExt 0.4 draft.vim - convert features # Add ConvertMDToHTML() for DraftToHTML Add ConvertMDToPDF() for DraftToPDF Add ConvertHTMLToPDF and ConvertToPDFFromTemplate() for DraftToTemplatePDF Add template for html conversion Change readme format a little Add vimawesome link! 0.5 draft.vim - more features # Add DraftDragonPDF for DraftDragonPDF Add DraftOpenPDF for OpenPDF Add requirements 0.6 draft.vim - added search # Add DraftSearch by word :DraftSearch \u0026lt;term\u0026gt; :DraftSearch school 0.7 draft.vim - search fixes # Rank searches Fix parenthesis in filename bug TODO # Make md to template pdf correctly do syntax highlight Maybe TODO # Make a draft file type with metadata and parse out the metadata when opened in vim, then use this data to search for notes better and stuff, like have raw data for python to search better with ","date":"31 December 2020","permalink":"/projects/draft.vim/","section":"Projects","summary":"","title":"draft.vim"},{"content":"\n\"Thinking back to early CentOS days... My cofounder was Rocky McGaugh. He is no longer with us, so as a H/T to him, who never got to see the success that CentOS came to be, I introduce to you...Rocky Linux\"\n— Gregory Kurtzer, Founder About # Rocky Linux is a community enterprise Operating System designed to be 100% bug-for-bug compatible with Enterprise Linux, now that CentOS has shifted direction.\nFrequently Asked Questions # Q: What do you mean, \u0026ldquo;CentOS has shifted direction?\u0026rdquo;\nThe CentOS project recently announced a shift in strategy for CentOS. Whereas previously CentOS existed as a downstream build of its upstream vendor (it receives patches and updates after the upstream vendor does), it will be shifting to an upstream build (testing patches and updates before inclusion in the upstream vendor).\nAdditionally, support for CentOS Linux 8 has been cut short, from May 31, 2029 to December 31, 2021.\nQ: So where does Rocky Linux come in?\nRocky Linux aims to function as a downstream build as CentOS had done previously, building releases after they have been added to the upstream vendor, not before.\nQ: When will it be released?\nThere is not currently an ETA for release.\nQ: What is the vision for Rocky Linux?\nA solid, stable, and transparent alternative for production environments, developed by the community for the community.\nQ: Who drives Rocky Linux?\nWe all do, Rocky Linux is a community-driven project and always will be. Rocky Linux will not be sold or driven by corporate interest.\nQ: How can I get involved?\nPlease view the contributing section below.\nContact # Team Contact Press outreach@rockylinux.org Development development@rockylinux.org Infrastructure infrastructure@rockylinux.org Security security@rockylinux.org Web and Branding web@rockylinux.org, brand@rockylinux.com For all other questions: hello@rockylinux.org\nStay Informed # Slack Forum GitHub Twitter IRC Reddit Matrix Contributing # Thank you for your interest in contributing to the project.\nIf you are a developer, architect, engineer, or otherwise looking to contribute your time and expertise, please consider joining the Slack and jumping into the most relevant channel to your interests.\nIf you are interested in donating or sponsoring the project, please email hello@rockylinux.org.\nNOTE: We do not currently have any official crowdsourcing established.\nSpecial Thanks # We would like to thank the following groups for their support thus far on the project:\nCtrl IQ, Inc. The OSU Open Source Lab Clouvider SpryServers FMI Groupe ","date":"14 December 2020","permalink":"/projects/rocky/","section":"Projects","summary":"","title":"rocky"},{"content":"\ndoor-lock # Smart home door lock using a raspberry pi\nTODOS # Add an example and running info\n","date":"11 December 2020","permalink":"/projects/door-lock/","section":"Projects","summary":"","title":"door-lock"},{"content":"\nadvent-of-code # My advent of code throughout the years https://adventofcode.com/\n","date":"1 December 2020","permalink":"/projects/advent-of-code/","section":"Projects","summary":"","title":"advent-of-code"},{"content":"\nPLL (Planck Lang Library) # Plank Lang Standard Library\nio.plk list.plk math.plk struct.plk ","date":"1 December 2020","permalink":"/projects/pll/","section":"Projects","summary":"","title":"pll"},{"content":"\nplanck.vim # A syntax highlighting for planck lang files\nInstall # Plug jakeroggenbuck/planck.vim\n","date":"30 November 2020","permalink":"/projects/planck.vim/","section":"Projects","summary":"","title":"planck.vim"},{"content":"\nHexViewer # Read the binary data of a file in hex\nUpdated Rust Version # Better rust version: https://github.com/JakeRoggenbuck/hexviewer-rs\nUsage # python3 main.py -i video.mp4 ","date":"29 November 2020","permalink":"/projects/hexviewer/","section":"Projects","summary":"","title":"HexViewer"},{"content":"","date":"26 November 2020","permalink":"/tags/css/","section":"Tags","summary":"","title":"CSS"},{"content":"\nspicetify-cli-extensions # This is a place for an assortment of small extensions for spicetify\nautoSkipSadSongs.js # Skip sad songs by block listing the artist or the title.\nAdd autoSkipSadSongs.js to your spicetify config under extensions.\n","date":"26 November 2020","permalink":"/projects/spicetify-cli-extensions/","section":"Projects","summary":"","title":"spicetify-cli-extensions"},{"content":"\nspicetify-cli-themes # A collection of tweaked and custom themes for spicetify-cli\nTree-Green # A nice calming tree green based on Pop-Dark\n","date":"26 November 2020","permalink":"/projects/spicetify-cli-themes/","section":"Projects","summary":"","title":"spicetify-cli-themes"},{"content":"\n404: Not Found\n","date":"24 November 2020","permalink":"/projects/learn-planck/","section":"Projects","summary":"","title":"learn-planck"},{"content":"\nPinter # This repository houses the codebase for pinter (Planck interpreter), an interpreter for Planck bytecodes.\nRequirements # GNU make clang Build # make\nRun # ./bin/pinter [file] to execute a file ./bin/pinter --help for help\n","date":"24 November 2020","permalink":"/projects/pinter/","section":"Projects","summary":"","title":"pinter"},{"content":"\nImportLint # Check and fix your module and package imports in python files\nUse # Check # importlint check test.py\nfix # importlint fix test.py\nInstall # pip install importlint\nTODO # Make command line interface for # Audit file (Done) Correct file in place (Done) Make features: a = can audit, c = can correct # [c] Sort imports alphabetically [a] Check for use of * in imports [] Check for unused imports [] Check for no imports for used module [] Consolidate multiple similar imports into one line Package for pypi # Make a setup.py Publish package! ","date":"8 November 2020","permalink":"/projects/importlint/","section":"Projects","summary":"","title":"importlint"},{"content":"\njakesutils # A collection of utils that I use all the time in my projects\n","date":"7 November 2020","permalink":"/projects/jakesutils/","section":"Projects","summary":"","title":"jakesutils"},{"content":"\nThemes # These are some great themes. I only use gruvbox right now but the rest of these themes are great. morhetz/gruvbox # https://github.com/morhetz/gruvbox baskerville/bubblegum # https://github.com/baskerville/bubblegum mhartington/oceanic-next # https://github.com/mhartington/oceanic-next cocopon/iceberg.vim # https://github.com/cocopon/iceberg.vim drewtempelmeyer/palenight.vim # https://github.com/drewtempelmeyer/palenight.vim roosta/srcery # https://github.com/roosta/srcery joshdick/onedark.vim # https://github.com/joshdick/onedark.vim ajh17/spacegray.vim # https://github.com/ajh17/spacegray.vim Appearance # These make vim look really nice, the goyo is great for taking screenshots and just having a distraction free work time.\nvim-airline/vim-airline # https://github.com/ajh17/spacegray.vim vim-airline/vim-airline-themes # https://github.com/vim-airline/vim-airline-themes junegunn/goyo.vim # https://github.com/junegunn/goyo.vim Movement # These are great for making editing speedy\ntacahiroy/ctrlp-funky # justinmk/vim-sneak # t9md/vim-choosewin # Efficiency # Coc is the best for completion\nneoclide/coc.nvim # junegunn/fzf.vim # kien/ctrlp.vim # Git # These help with checking files for diffs and making git easy inside of vim\ntpope/vim-fugitive # airblade/vim-gitgutter # Language # Vimtex helps make vim way better for latex, flake8 is great for python and python-mode also is great\nlervag/vimtex # nvie/vim-flake8 # python-mode/python-mode # Organization # Helps me take notes in class and remember stuff\nxolox/vim-misc # xolox/vim-notes # Fun-Misc # Rainbow parentheses is great for code golf and list comprehensions, and vim table mode is great for writing docs\njunegunn/rainbow_parentheses.vim # dhruvasagar/vim-table-mode # ","date":"26 October 2020","permalink":"/projects/bestvimplugins/","section":"Projects","summary":"","title":"BestVimPlugins"},{"content":"\nyes-no-neural-network-classifier # ","date":"24 October 2020","permalink":"/projects/yes-no-neural-network-classifier/","section":"Projects","summary":"","title":"yes-no-neural-network-classifier"},{"content":"\nneural_network # ","date":"20 October 2020","permalink":"/projects/neural_network/","section":"Projects","summary":"","title":"neural_network"},{"content":"\n404: Not Found\n","date":"18 October 2020","permalink":"/projects/strategy_presentation_numpy/","section":"Projects","summary":"","title":"strategy_presentation_numpy"},{"content":"\nyaml_serialize # A simple way to store python objects in yaml\nUse # from src import yaml_serialize class MyObject: def __init__(self): self.name = \u0026#34;Jake\u0026#34; self.age = 16 self.favorite_color = \u0026#34;Green\u0026#34; self.mylist = [\u0026#34;hey\u0026#34;, \u0026#34;this\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;cool\u0026#34;] my_object = MyObject() serializer = yaml_serialize.Serialize(my_object) # Get serialized object as string my_serialized_object = serializer.get() # Write serialized object with class name \u0026#34;MyObject.yml\u0026#34; serializer.write() # Write serialized object with custom name \u0026#34;MyCoolObject.yml\u0026#34; serializer.write(\u0026#34;MyCoolObject.yml\u0026#34;) des = yaml_serialize.Deserialize() new = des.read(my_serialized_object) print(new) Output # _object: !!python/object:__main__.MyObject age: 16 favorite_color: Green mylist: - hey - this - is - cool name: Jake ","date":"10 October 2020","permalink":"/projects/yaml_serialize/","section":"Projects","summary":"","title":"yaml_serialize"},{"content":"\nFastly Python Client # fastly-py is available through pip as the fastly package\nThere are three simple scripts provided in /bin that can be used for various stand-alone purge operations.\nA Note About Authentication # Authenticating with an API Token is shown in the example below. For more information on API Tokens, please see Fastly\u0026rsquo;s API Token documentation. For more information about authenticating to our API, please see our Authentication section.\nUsage # import fastly api = fastly.API() api.authenticate_by_key(\u0026#39;MYKEY\u0026#39;) api.purge_url(\u0026#39;www.example.com\u0026#39;, \u0026#39;/some/path\u0026#39;) TODO: # Doc files Docstrings Config file create requirements.txt file\nRunning Tests # $ python -m test.api_test Set up environment configuration # We use Python\u0026rsquo;s os and a .env file to manage environment variables in development and test environments. See the list of required environment variables in the .env.example file in the root directory.\nTo optionally set values for testing, make a copy of .env.example and name it .env.\ncp .env.example .env # Note: # If using direnv, you can just use it as a `.envrc` file and not have to `source` it manually. # Using your favorite editor, update the values of the environment variables in `.env` and then source .env Distributing a package # Create a .pypirc file:\n$ cat \u0026gt; .pypirc [distutils] index-servers = pypi [pypi] repository: https://upload.python.org/legacy/ Install twine:\n$ python3 -m pip install --user --upgrade twine Create a build:\n$ python3 setup.py sdist bdist_wheel Use twine to publish to Pypi:\n$ twine upload dist/* Uploading distributions to https://upload.pypi.org/legacy/ Enter your username: [YOUR_USERNAME] Enter your password: Uploading fastly-0.2.3-py3-none-any.whl 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 13.2k/13.2k [00:02\u0026lt;00:00, 6.40kB/s] Uploading fastly-0.1.3-py2.7.egg 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 17.8k/17.8k [00:01\u0026lt;00:00, 12.8kB/s] Uploading fastly-0.1.3-py3.6.egg 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 18.3k/18.3k [00:01\u0026lt;00:00, 14.2kB/s] Uploading fastly-0.2.3.tar.gz 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9.25k/9.25k [00:01\u0026lt;00:00, 9.09kB/s] Builds and uploads to PyPi. More info on this at the python site. You will need to be granted access to the fastly package in order to push.\n","date":"6 October 2020","permalink":"/projects/fastly-py/","section":"Projects","summary":"","title":"fastly-py"},{"content":"\nIce # Programming language and interpreter\nNAME ice SYNOPSIS ice GROUP | COMMAND GROUPS GROUP is one of the following: ice COMMANDS COMMAND is one of the following: run step print \u0026#34;this\u0026#34; input \u0026#34;that: \u0026#34; print \u0026#34;this and that\u0026#34; int \u0026#34;856\u0026#34; str \u0026#34;hey\u0026#34; str $0 print $1 calc $1 + $1 dump ","date":"6 October 2020","permalink":"/projects/ice/","section":"Projects","summary":"","title":"ice"},{"content":"\nHEASARC and NEOSSat Data Viewer # nasa-spaceapps-2020\nBy George Berdovskiy and Shuzheng (Tom) Zhang\nSet up instructions:\nInstall pip, see how to do it at https://pip.pypa.io/en/stable/installing/ Install flask using pip install flask Install packages using pip, you can see the full list in requirements.txt You can install them manually, or navigate to this directory in terminal/command prompt and type in: pip install -r requirements.txt Navigate to directory nasa-spaceapps-2020/app_directory in terminal/command prompt Run the webapp using python viewer.py If you see line Running on http://127.0.0.1:5000/ in the terminal, this indicates that the app is working If not, check for missing packages and dependencies Now go to your browser (We have only tested Firefox), and type in http://127.0.0.1:5000/ in the address bar The webapp should now be up and running ","date":"6 October 2020","permalink":"/projects/nasa-spaceapps-2020/","section":"Projects","summary":"","title":"nasa-spaceapps-2020"},{"content":"\nBlue alliance data # Blue alliance data pull utility.\n","date":"1 October 2020","permalink":"/projects/blue-alliance-data/","section":"Projects","summary":"","title":"blue-alliance-data"},{"content":"\nImgurApi # Simple Imgur library to interface with the Imgur web API\nfrom main import Imgur # Create object imgur = Imgur() # Upload image imgur.upload(\u0026#34;test.jpg\u0026#34;) # Get viewable images (Not Blocked Not Deleted) imgur.get_viewable_images() # Block image by hash (Know as \u0026#34;id\u0026#34;) imgur.block(\u0026#34;\u0026lt;image hash\u0026gt;\u0026#34;) # Delete image by hash (Know as \u0026#34;id\u0026#34;) imgur.delete(\u0026#34;\u0026#34;) # View all things in the uploaded collection imgur.view() ","date":"29 September 2020","permalink":"/projects/imgurapi/","section":"Projects","summary":"","title":"ImgurApi"},{"content":"\nLogger # A simple and fask logging library that uses the power of mongodb to save and query logs (with built in cli)\nCli # # search search \u0026lt;tag\u0026gt; \u0026lt;logger_name\u0026gt; mongofastlogger search Info # clear clear \u0026lt;logger_name\u0026gt; mongofastlogger clear # log log \u0026lt;tag\u0026gt; \u0026lt;message\u0026gt; \u0026lt;logger_name\u0026gt; mongofastlogger log Info \u0026#34;This is a log message\u0026#34; # view view \u0026lt;logger_name\u0026gt; mongofastlogger view # export export \u0026lt;filename\u0026gt; \u0026lt;logger_name\u0026gt; mongofastlogger export filename.log # last last \u0026lt;metric\u0026gt; \u0026lt;amount\u0026gt; \u0026lt;logger_name\u0026gt; mongofastlogger last hours 3 # help find commands python3 mongofastlogger help with specific commands mongofastlogger command --help # other info \u0026lt;logger_name\u0026gt; is optional and is \u0026#39;logs\u0026#39; by default Library # from mongofastlogger import LogViewer, Logger # Make logger logger = Logger() # Log message with tag of \u0026#34;Something\u0026#34; logger.log(\u0026#34;Something\u0026#34;, \u0026#34;This is bad as well i guess but i dont actually know\u0026#34;) # Log message with tag of \u0026#34;Something\u0026#34; and display log in console logger.log(\u0026#34;Something\u0026#34;, \u0026#34;This is a message\u0026#34;, display=True) # Make Viewer viewer = LogViewer() # Print all logs viewer.view_log() # Search logs that have the tag \u0026#34;Something\u0026#34; viewer.search_logs_by_tag(\u0026#34;Something\u0026#34;) # Search logs in the last 3 days viewer.check_by_time(\u0026#34;days\u0026#34;, 3) # Export logs to example.log viewer.export_log(\u0026#34;example.log\u0026#34;) print(\u0026#34;Production\u0026#34;) # Make logger with name production_logger = Logger(\u0026#34;Production\u0026#34;) production_logger.log(\u0026#34;Error\u0026#34;, \u0026#34;Critical error in production\u0026#34;) # Make viewer with name production_viewer = LogViewer(\u0026#34;Production\u0026#34;) production_viewer.view_log() Todo # Make readme more easy to read, especially comments in code and command line instructions\nMake last use \u0026ldquo;amount metric\u0026rdquo; format because it is more intuitive\nMake last have more time metrics, like month and year\nMake actual docs for how to use this and its commands, and cli\n","date":"27 September 2020","permalink":"/projects/mongofastlogger/","section":"Projects","summary":"","title":"mongofastlogger"},{"content":"\nfumble_api # A simple web API to return critical charts for the game dnd 5e\nRunning # python3 main.py\nData manipulation (setup) # import data # Clear all the data in the db data.clear_data() # Upload the new data in the list (fumble_data) data.upload_data(data.fumble_data) Routes # Find table names at /\n/ -\u0026gt; shooting, melee\n/shooting/12 -\u0026gt; \u0026ldquo;Ooops!\u0026rdquo; + \u0026ldquo;You hit an unintended random target.\u0026quot;\n\u0026lt;table name\u0026gt;/\u0026lt;number 1-20\u0026gt;\n","date":"26 September 2020","permalink":"/projects/fumble_api/","section":"Projects","summary":"","title":"fumble_api"},{"content":"\nSoftwareGeneralFinalTests # ","date":"25 September 2020","permalink":"/projects/softwaregeneralfinaltests/","section":"Projects","summary":"","title":"SoftwareGeneralFinalTests"},{"content":"\nmongoc # A fast way to view databases, collections and documents from mongodb in the command line\nUsage # mongoc\nInstall # pip install mongoc\n","date":"24 September 2020","permalink":"/projects/mongoc/","section":"Projects","summary":"","title":"mongoc"},{"content":"\nmongodb_schema_check # from pymongo import MongoClient from typeschemalib import typeschemalib class Database: def __init__(self, location: str = \u0026#34;localhost\u0026#34;, port: int = 27017): \u0026#34;\u0026#34;\u0026#34;Set defaults and connect\u0026#34;\u0026#34;\u0026#34; self.location = location self.port = port self.connect() def connect(self): \u0026#34;\u0026#34;\u0026#34;Create client, database and collections\u0026#34;\u0026#34;\u0026#34; self.client = MongoClient(self.location, self.port) self.db = self.client.my_database self.profiles = self.db.profiles self.messages = self.db.messages def write_profile(self, document): \u0026#34;\u0026#34;\u0026#34;Check schema of document using schema file\u0026#34;\u0026#34;\u0026#34; schema = \u0026#34;schema/profile.stml\u0026#34; valid = typeschemalib.schema_check(schema, document) if valid is not True: # Not valid, print error print(valid) else: # All good schema, insert and print print(document) self.profiles.insert_one(document) if __name__ == \u0026#34;__main__\u0026#34;: # Get data to insert data = { \u0026#34;name\u0026#34;: input(\u0026#34;Name: \u0026#34;), \u0026#34;age\u0026#34;: int(input(\u0026#34;Age: \u0026#34;)), \u0026#34;lang\u0026#34;: input(\u0026#34;Lang: \u0026#34;), \u0026#34;percent\u0026#34;: float(input(\u0026#34;Percent: \u0026#34;)) } db = Database() db.write_profile(data) ","date":"23 September 2020","permalink":"/projects/mongodb_schema_check/","section":"Projects","summary":"","title":"mongodb_schema_check"},{"content":"\ntypeschemalib # A yaml like schema that can be used to check dictionaries for correct schema\nSchema file # schema example # point: Int my_string: Str grade: Float data example # {\u0026#34;point\u0026#34;: 45, \u0026#34;my_string\u0026#34;: \u0026#34;Hey\u0026#34;, \u0026#34;grade\u0026#34;: 4.5} Checking data for correct schema # Test parse with stml file # from typeschemalib import typeschemalib if __name__ == \u0026#34;__main__\u0026#34;: data = {\u0026#34;point\u0026#34;: 45, \u0026#34;my_string\u0026#34;: \u0026#34;Hey\u0026#34;, \u0026#34;grade\u0026#34;: 4.5} # Validate data from schema file schema = \u0026#34;test.stml\u0026#34; valid = typeschemalib.schema_check(schema, data) print(valid) # Validate data from list of schema schema = [\u0026#34;point: Int\u0026#34;, \u0026#34;my_string: Str\u0026#34;, \u0026#34;grade: Int\u0026#34;] valid = typeschemalib.schema_check(schema, data) print(valid) # Validate data from dict of values schema = {\u0026#34;point\u0026#34;: \u0026#34;Int\u0026#34;, \u0026#34;my_string\u0026#34;: \u0026#34;Str\u0026#34;, \u0026#34;grade\u0026#34;: \u0026#34;Int\u0026#34;} valid = typeschemalib.schema_check(schema, data) print(valid) Todo # Make schema have regex\nMake documentation for stml writer\nAdd object type and class checker, isinstance issubclass time: DateTimeObject\n","date":"20 September 2020","permalink":"/projects/typeschemalib/","section":"Projects","summary":"","title":"typeschemalib"},{"content":"\nGitHub CLI # gh is GitHub on the command line. It brings pull requests, issues, and other GitHub concepts to the terminal next to where you are already working with git and your code.\nAvailability # GitHub CLI is available for repositories hosted on GitHub.com and GitHub Enterprise Server 2.20+, and to install on macOS, Windows, and Linux.\nDocumentation # Read the official docs for usage and more information.\nWe want your feedback # We\u0026rsquo;d love to hear your feedback about gh. If you spot bugs or have features that you\u0026rsquo;d really like to see in gh, please check out the contributing page.\nInstallation # macOS # gh is available via Homebrew and MacPorts.\nHomebrew # Install: Upgrade: brew install gh brew upgrade gh MacPorts # Install: Upgrade: sudo port install gh sudo port selfupdate \u0026amp;\u0026amp; sudo port upgrade gh Linux # See Linux installation docs.\nWindows # gh is available via scoop, Chocolatey, and as downloadable MSI.\nscoop # Install:\nscoop bucket add github-gh https://github.com/cli/scoop-gh.git scoop install gh Upgrade:\nscoop update gh Chocolatey # Install: Upgrade: choco install gh choco upgrade gh Signed MSI # MSI installers are available for download on the releases page.\nOther platforms # Download packaged binaries from the releases page.\nBuild from source # See here on how to build GitHub CLI from source.\nComparison with hub # For many years, hub was the unofficial GitHub CLI tool. gh is a new project that helps us explore what an official GitHub CLI tool can look like with a fundamentally different design. While both tools bring GitHub to the terminal, hub behaves as a proxy to git, and gh is a standalone tool. Check out our more detailed explanation to learn more.\n","date":"19 September 2020","permalink":"/projects/cli/","section":"Projects","summary":"","title":"cli"},{"content":"\n404: Not Found\n","date":"17 September 2020","permalink":"/projects/mechanize/","section":"Projects","summary":"","title":"mechanize"},{"content":"\nmongo_passkeep # A command line utility for storing passwords\nCli # Write # write\nView # view\nDelete # delete\nEdit # edit \u0026lt;id\u0026gt;\nRead # read \u0026lt;id\u0026gt;\n","date":"16 September 2020","permalink":"/projects/mongo_passkeep/","section":"Projects","summary":"","title":"mongo_passkeep"},{"content":"\nMongoShortener # ","date":"14 September 2020","permalink":"/projects/mongoshortener/","section":"Projects","summary":"","title":"MongoShortener"},{"content":"\n404: Not Found\n","date":"14 September 2020","permalink":"/projects/sars-cov-2_peplomer_structure_analysis/","section":"Projects","summary":"","title":"SARS-CoV-2_Peplomer_Structure_Analysis"},{"content":"\ndotfiles # A collection of my dotfiles that I use on my GNU/Linux machine Both Arch (current Laptop and Desktop) and Ubuntu (Old Desktop). I also used some of these dotfiles on MacOS, and exclusivly used yabai and skhd on that machine Tools # I use a tool I made called stow-squid to manage the updating and deplying of my dotfiles The config for that can be found also in the repo here Configs # Nvim, Tmux, Alacritty # Bspwm, Sxhkd, Skhd, Yabai (Window managers and keybinds) # ","date":"12 September 2020","permalink":"/projects/dotfiles/","section":"Projects","summary":"","title":"dotfiles"},{"content":"\nPySwitch # pyswitch # ","date":"11 September 2020","permalink":"/projects/pyswitch/","section":"Projects","summary":"","title":"pyswitch"},{"content":"\nmongo-notes # ","date":"10 September 2020","permalink":"/projects/mongo-notes/","section":"Projects","summary":"","title":"mongo-notes"},{"content":"\nShredder # Instead of sredding files normally, replace all of the data with Random Star Wars Quotes.\n","date":"7 September 2020","permalink":"/projects/shredder/","section":"Projects","summary":"","title":"Shredder"},{"content":"\nmongodb-login # ","date":"5 September 2020","permalink":"/projects/mongodb-login/","section":"Projects","summary":"","title":"mongodb-login"},{"content":"\nTap # Quickly tap basic files into existence\nHelp # # create an empty python file tap it py # create an empty python file with argparse boilerplate tap it pyarg Usage # tap-it 0.1.0 USAGE: tap it [FLAGS] \u0026lt;given\u0026gt; FLAGS: -f, --force -h, --help Prints help information -V, --version Prints version information ARGS: \u0026lt;given\u0026gt; TODO # Make a tap install\n","date":"29 August 2020","permalink":"/projects/tap/","section":"Projects","summary":"","title":"tap"},{"content":"\nsfetch # A very simple fetch\n","date":"22 August 2020","permalink":"/projects/sfetch/","section":"Projects","summary":"","title":"sfetch"},{"content":"\nflask-sql-login # A super simple login page with flask and sqlite3\n","date":"21 August 2020","permalink":"/projects/flask-sql-login/","section":"Projects","summary":"","title":"flask-sql-login"},{"content":"\nplayer_data_finder # Install # pip3 install -r requirements.txt\nSetup # Make a file called config.py Add this class and your ftp credentials\nclass Config: host = \u0026#34;ftp.example.com\u0026#34; username = \u0026#34;user\u0026#34; password = \u0026#34;password\u0026#34; port = 254 Running # python3 main.py\n","date":"19 August 2020","permalink":"/projects/player_data_finder/","section":"Projects","summary":"","title":"player_data_finder"},{"content":"\nGPGExchange # Website for posting encrypted files, encrypted meme exchange.\n","date":"18 August 2020","permalink":"/projects/gpgexchange/","section":"Projects","summary":"","title":"GPGExchange"},{"content":"\njs-snake # Snake game written in p5 JS Requires a local node server. install http-server by running \u0026ldquo;npm install http-server\u0026rdquo;, then while in the js-snake folder run \u0026ldquo;http-server\u0026rdquo;, finally connect to \u0026ldquo;http://localhost:8080/\u0026rdquo; and open js-snake.html.\n","date":"18 August 2020","permalink":"/projects/js-snake/","section":"Projects","summary":"","title":"js-snake"},{"content":"\nChatApp # Realtime chat app using pusher\nRunning # cd src/ python3 app.py then open http://127.0.0.1:5000/\n","date":"17 August 2020","permalink":"/projects/chatapp/","section":"Projects","summary":"","title":"ChatApp"},{"content":"\nposition_reader # Running # python3 main.py nbtdatafile.dat python3 -m venv .venv source .venv/bin/activate pip install nbtlib ","date":"17 August 2020","permalink":"/projects/position_reader/","section":"Projects","summary":"","title":"position_reader"},{"content":"\nDeepai # Use the deepdream API and other APIs from deepai to convert, upscale, and change images in interesting ways\nUse # Use as CLI # python3 main.py -i ~/Downloads/input_image.jpg -o image.png -n NeuralStyle -s ~/Downloads/vangohg.png python3 main.py -i ~/Downloads/input_image.jpg -o image.png -n DeepDream Use as library # from main import DeepImage # NeuralStyle style_name = \u0026#34;NeuralStyle\u0026#34; input_file = \u0026#34;~/Downloads/input_image.png\u0026#34; output_file = \u0026#34;~/Downloads/output_image.png\u0026#34; style_image = \u0026#34;~/Downloads/style_image.png\u0026#34; deep = Deep(style_name, input_file, output_file, style_image) # DeepDream style_name = \u0026#34;DeepDream\u0026#34; input_file = \u0026#34;~/Downloads/input_image.png\u0026#34; output_file = \u0026#34;~/Downloads/output_image.png\u0026#34; deep = Deep(style_name, input_file, output_file) deep.download() Config # Make the config and get an api key at deepai.org config.py\nKEY = \u0026#34;API-KEY\u0026#34; urls: - DeepDream: \u0026#34;https://api.deepai.org/api/deepdream\u0026#34; - Colorizer: \u0026#34;https://api.deepai.org/api/colorizer\u0026#34; - NeuralStyle: \u0026#34;https://api.deepai.org/api/neural-style\u0026#34; Example # ","date":"11 August 2020","permalink":"/projects/deepai/","section":"Projects","summary":"","title":"Deepai"},{"content":"\nReddit_Downloader # Get page # Because Reddit requires authentication, it\u0026rsquo;s easier to go to the website and get the page source to parse the image urls\nConfig # element = \u0026#34;classname or elecment id\u0026#34; filename = \u0026#34;example.txt\u0026#34; directory = \u0026#34;example\u0026#34; Running # # Get filename and directory from config FILENAME = config.filename DIRECTORY = config.directory # Make GetUrls object and give it filename geturls = GetUrls(FILENAME) # Parse and Extract urls geturls.parse_urls() geturls.extract_url() # Gets urls list and give to download obejct urls = geturls.image_urls # Setup directory _setup = Setup(DIRECTORY) _setup.setup() # Make download object and download list of urls _dowload = DownloadUrls(urls, DIRECTORY) _dowload.download() ","date":"11 August 2020","permalink":"/projects/reddit_downloader/","section":"Projects","summary":"","title":"Reddit_Downloader"},{"content":"\nCError # Run cerror on a source code file of a compiled language to get the length of the outputted error compared to the filesize. Some people try to get the largest error with the smallest file, this script gives you a score for this.\nUse (in general) # #include __FILE__ credit: @adamhutchings for finding this\nThe sample file is above, this is a small amount of source but produces a large error. This would get a really good score because of that ratio of code to error.\nUse (the script) # ./cerror -f main.c -c g++ ./cerror -f \u0026lt;filename\u0026gt; -c \u0026lt;compiler name\u0026gt; ","date":"10 August 2020","permalink":"/projects/cerror/","section":"Projects","summary":"","title":"CError"},{"content":"\nSQLShortener # Create short url with New, Use short url with Use\nStart # python3 app.py\nUse # localhost:5000/ex -\u0026gt; https://example.com\nNew # localhost:5000/new/example.com!ex\n","date":"10 August 2020","permalink":"/projects/sqlshortener/","section":"Projects","summary":"","title":"SQLShortener"},{"content":"\nModPackMaker # Use # run python3 main.py\nmod = Mods() mod.run_command(mod.command) Folder # Add minecraft mods to mods/ folder\n","date":"9 August 2020","permalink":"/projects/modpackmaker/","section":"Projects","summary":"","title":"ModPackMaker"},{"content":"\ndiscord_keep_save # Running # python3 main.py\nUse # Type ;s message to save\nSetup # DB # On startup main.py does checks and setups for critical components\nDiscord # Add bot token to a file called token.txt\n","date":"5 August 2020","permalink":"/projects/discord_keep_save/","section":"Projects","summary":"","title":"discord_keep_save"},{"content":"\n404: Not Found\n","date":"4 August 2020","permalink":"/projects/dotfiles-1/","section":"Projects","summary":"","title":"dotfiles-1"},{"content":"\nlearning_sql # Connecting # connection = sqlite3.connect(\u0026#34;myTable.db\u0026#34;) Creating a table # sql_command = \u0026#34;\u0026#34;\u0026#34; CREATE TABLE employee ( staff_number INTEGER PRIMARY KEY, fname VARCHAR(20), lname VARCHAR(30), gender CHAR(1), joining DATE);\u0026#34;\u0026#34;\u0026#34; Writing the empty table to the db # crsr = connection.cursor() crsr.execute(sql_command) connection.commit() Writing values to db # Getting data # First = input(\u0026#34;First: \u0026#34;) Last = input(\u0026#34;Last: \u0026#34;) Gender = input(\u0026#34;Gender: \u0026#34;) Joining = input(\u0026#34;Joining: \u0026#34;) Adding data to the correct syntax # sql_command = \u0026#34;INSERT INTO employee\u0026#34; sql_fields = \u0026#34;(staff_number, fname, lname, gender, joining)\u0026#34; sql_data = f\u0026#34;VALUES (NULL, \u0026#39;{First}\u0026#39;, \u0026#39;{Last}\u0026#39;, \u0026#39;{Gender}\u0026#39;, \u0026#39;{Joining}\u0026#39;);\u0026#34; Excecuting the command # cursor.execute(sql_command + sql_fields + sql_data) Make sure to commit and close # connection.commit() connection.close() ","date":"4 August 2020","permalink":"/projects/learning_sql/","section":"Projects","summary":"","title":"learning_sql"},{"content":"\ngpg_passkeep # Store passwords in a GPG encrypted vault\nTODO: # Add config file Add save directory ","date":"3 August 2020","permalink":"/projects/gpg_passkeep/","section":"Projects","summary":"","title":"gpg_passkeep"},{"content":"\nVimGameSnake # version 0.1\nHow to play # :VimGameSnake to Start :echo g:VimSnakeScore to view score\nh j k l c q ← ↓ ↑ → end game quit Installation # VimPlug # Place this in your .vimrc:\nPlug \u0026lsquo;johngrib/vim-game-snake\u0026rsquo;\nThen run the following in Vim:\n:source %\n:PlugInstall\n","date":"2 August 2020","permalink":"/projects/vim-game-snake/","section":"Projects","summary":"","title":"vim-game-snake"},{"content":"\nvim-impulse-syntax # vim-impulse-syntax.vim - Impulse build syntax highlighting\n","date":"2 August 2020","permalink":"/projects/vim-impulse-syntax/","section":"Projects","summary":"","title":"vim-impulse-syntax"},{"content":"\nxdotool_python_window_util # Use # Size # from main import Size a = Size(40, 60) a.size_win() Move # from main import Move a = Move(True, 20, 30) a.move_win() Test # PYTHONPATH=./src pytest Future Features # Something to name windows\nSomething to use move and size with window by name\nSomething to get the size and position of a window by name\nSomething that uses the size and position of two windows by name and calculates distance between\n","date":"29 July 2020","permalink":"/projects/xdotool_python_window_util/","section":"Projects","summary":"","title":"xdotool_python_window_util"},{"content":"\ndot_dropper # Copy dotfiles to a new system\nUpdate # Deprecated for my new stow-squid\n","date":"26 July 2020","permalink":"/projects/dot_dropper/","section":"Projects","summary":"","title":"dot_dropper"},{"content":"\nvimage.vim # vimage.vim - Open image paths in vim\nInstall # Plug jakeroggenbuck/vimage.vim\nUse # Set image viewer let g:image_viewer = \u0026quot;feh\u0026quot;\nSet key binding nmap \u0026lt;leader\u0026gt;mg :call Vimage()\u0026lt;CR\u0026gt;\n","date":"26 July 2020","permalink":"/projects/vimage.vim/","section":"Projects","summary":"","title":"vimage.vim"},{"content":"\nwhats-next # A reworked utility to either guide an Arch Linux install, or a tool to help you learn the commands in order.\nModes # Easy Mode # This gives you the option to either (R)un the command or (E)dit the command.\nHard Mode # You need to type in the whole command to build up that memory\nImage # Install # ## Official Mirror curl -LO https://jr0.org/cdn/whats-next.py # or wget https://jr0.org/cdn/whats-next.py ## Github Source curl -LO https://raw.githubusercontent.com/JakeRoggenbuck/arch-installer-whats-next/main/whats-next.py # or wget https://raw.githubusercontent.com/JakeRoggenbuck/arch-installer-whats-next/main/whats-next.py ","date":"23 July 2020","permalink":"/projects/arch-installer-whats-next/","section":"Projects","summary":"","title":"arch-installer-whats-next"},{"content":"\nzerOS # an os? based on arch\n","date":"21 July 2020","permalink":"/projects/zeros/","section":"Projects","summary":"","title":"zerOS"},{"content":"\n404: Not Found\n","date":"20 July 2020","permalink":"/projects/dwm/","section":"Projects","summary":"","title":"dwm"},{"content":"","date":"20 July 2020","permalink":"/tags/ruby/","section":"Tags","summary":"","title":"Ruby"},{"content":"\nA simple git package manager written in ruby\nInstall # run sh impulse.build\nHelp # run sapphire -h\n","date":"20 July 2020","permalink":"/projects/sapphire/","section":"Projects","summary":"","title":"sapphire"},{"content":"\nA simple package manager written in ruby\nInstall # run sh impulse.build\nHelp # run amethyst -h\n","date":"14 July 2020","permalink":"/projects/amethyst/","section":"Projects","summary":"","title":"amethyst"},{"content":"\nnxyso_api # A definition and search API for a language called Nysjomon made using FastApi\nRequirements: # fastapi uvicorn Running: # uvicorn main:app --reload\n","date":"12 July 2020","permalink":"/projects/nxyso_api/","section":"Projects","summary":"","title":"nxyso_api"},{"content":"\npublic-pgp-keys # ","date":"10 July 2020","permalink":"/projects/public-pgp-keys/","section":"Projects","summary":"","title":"public-pgp-keys"},{"content":"\nvim-selection-test # vim-selection-test.vim - A test of calling a function with selected text\n","date":"9 July 2020","permalink":"/projects/vim-selection-test/","section":"Projects","summary":"","title":"vim-selection-test"},{"content":"\nvim-snow-script-syntax # ","date":"9 July 2020","permalink":"/projects/vim-snow-script-syntax/","section":"Projects","summary":"","title":"vim-snow-script-syntax"},{"content":"\nvim-character-creator # character-creator only has dice rolling functionality as of 0.2 with lots more features coming soon. # Role: role a dice in vim # Example: run \u0026lsquo;:echo Character_Creator_Roll(\u0026ldquo;1d8\u0026rdquo;)\u0026rsquo; # Options: have the number of dice before the \u0026rsquo;d\u0026rsquo; and the dice value after # ","date":"8 July 2020","permalink":"/projects/vim-character-creator/","section":"Projects","summary":"","title":"vim-character-creator"},{"content":"\nvalueourminds_website # ","date":"7 July 2020","permalink":"/projects/valueourminds_website/","section":"Projects","summary":"","title":"valueourminds_website"},{"content":"\nbspswallow # Adds functionality provided by the dwm \u0026ldquo;swallow\u0026rdquo; patch to bspwm.\nDependencies # bspwm (obviously) xprop Installation # Add two files to ~/.config/bspwm\nnoswallow - list of classes of windows that you don\u0026rsquo;t want to swallow the terminal\nterminals - list of classes of terminals that you want to be swallowed\nIf a class isn\u0026rsquo;t available (such as with xev) then the command of origin can be used.\n(example files are included in \u0026ldquo;examples\u0026rdquo;)\nPlace bspswallow into your PATH and add the following line to your bspwmrc.\n(ps x | grep bspswallow | grep -v grep) || bspswallow Now just restart bspwm and you\u0026rsquo;re good to go.\nKnown Issues # Incompatability with LibreOffice due to it having a splash screen and spawning multiple windows, use \u0026ndash;no-logo when launching and turn off \u0026ldquo;Tip of the day\u0026rdquo; in order to avoid this issue. ","date":"1 July 2020","permalink":"/projects/bspswallow/","section":"Projects","summary":"","title":"bspswallow"},{"content":"\nbreak # When automating your workflow, build systems and ci are some of the most important parts. Break is analogous to a build system, and test suite. Break, will insure your tests fail by irreversibly destroying your executables and source code according to your breakfile. It will also prepare the source code by breaking the files before tests. Break is blazing fast, and it\u0026rsquo;s unique functionality allows for a streamlined workflow.\nAbout # break is a Unix command-line utility for destruction of programs.\nThe break utility requires a file in the current directory called GNObreakfile, breakfile, or Breakfile.\nUse # If you have a breakfile, simply type ./break or python3 break into command-line to start the irreversible, randomized destruction of your hard-written programs.\nBreakfile # Breakfiles have the keyword break and a name of a file\nbreak filename.c There is another example at ./example/Breakfile\n","date":"24 June 2020","permalink":"/projects/break/","section":"Projects","summary":"","title":"break"},{"content":"\nnxyso_definition_bot # ","date":"24 June 2020","permalink":"/projects/nxyso_definition_bot/","section":"Projects","summary":"","title":"nxyso_definition_bot"},{"content":"\nsnow_script # A macro language with low level macros like if statements, jumps, and memory control and high level futures like memory dump, type, type casting, push, and calc\nDependencies # pip3 install -r requirements.txt\nInstall # sudo ./impulse.build\nRunning # ssc filename.ssc\nTesting # Configure # python3 conftest.py\nTest # pytest\nSyntax # view syntax.txt for macros and uses\n","date":"19 June 2020","permalink":"/projects/snow_script/","section":"Projects","summary":"","title":"snow_script"},{"content":"\nnew-website # ","date":"15 June 2020","permalink":"/projects/new-website/","section":"Projects","summary":"","title":"new-website"},{"content":"\nis_254_or_larger # About # An npm package to determine whether a number is 254 or larger\nView the official npm package # https://www.npmjs.com/package/is_254_or_larger\n","date":"14 June 2020","permalink":"/projects/is_254_or_larger/","section":"Projects","summary":"","title":"is_254_or_larger"},{"content":"\nwallpaper_downloader # ","date":"3 June 2020","permalink":"/projects/wallpaper_downloader/","section":"Projects","summary":"","title":"wallpaper_downloader"},{"content":"\nlightBot # A Discord bot with control of GPIO pins. These pins were connected to a few relays that controlled lights in my room.\n","date":"27 May 2020","permalink":"/projects/lightbot/","section":"Projects","summary":"","title":"lightBot"},{"content":"\nGalrux # A Discord bot designed for adding music to a queue. This was specifically requested for a server.\n","date":"27 May 2020","permalink":"/projects/vorahk/","section":"Projects","summary":"","title":"Vorahk"},{"content":"\nclaculator # adds numbers together\nA joke if you couldn\u0026rsquo;t tell\n","date":"23 May 2020","permalink":"/projects/claculator/","section":"Projects","summary":"","title":"claculator"},{"content":"\nLanding Page # Clone the library to your computer\ngit clone git@github.com:Camerooooon/landing-page.git Now set the homepage of your browser to the location of the index.html file on your computer. You may need to use an extention for chrome. Inorder to control which search engine you want to use you must use the left and right arrow keys.\nThis idea was inspired by JakeRoggenbuck\u0026rsquo;s landing page repo.\n","date":"20 May 2020","permalink":"/projects/firefox-landing-page-1/","section":"Projects","summary":"","title":"firefox-landing-page-1"},{"content":"\ncalcLex # A simple lexer using a yacc.\n","date":"24 April 2020","permalink":"/projects/calclex/","section":"Projects","summary":"","title":"calcLex"},{"content":"\nlanding-page # The most simple landing page possible\n","date":"23 April 2020","permalink":"/projects/firefox-landing-page/","section":"Projects","summary":"","title":"firefox-landing-page"},{"content":"\nhash-colorer # View hashes as colors # Use # Pipe something to hashc\ne.g. sha256sum file | hashc\nInstall # Run ./install.sh as root\n","date":"17 April 2020","permalink":"/projects/hash-colorer/","section":"Projects","summary":"","title":"hash-colorer"},{"content":"\nimpulse # Install # Run ./impulse.build with root permissions\nUse # Read the man page\n","date":"17 April 2020","permalink":"/projects/impulse/","section":"Projects","summary":"","title":"impulse"},{"content":"\nn-rus-bot # Discord bot for the e🅱️ic server\n","date":"16 April 2020","permalink":"/projects/n-rus-bot/","section":"Projects","summary":"","title":"n-rus-bot"},{"content":"\n1678 Server 2019-2020 # Run setup_environment.py when you clone the repository.\nThis will install a virtual python environment in the main project directory. It will then install the external dependencies into this environment from PyPI using pip. (This will NOT install any non-python dependencies such as MongoDB, as the process for that depends on your distribution. You will have to do that manually).\nWhen testing from the command line, remember to activate the virtual environment (source .venv/bin/activate on bash/zsh). Instructions for other shells, along with more in-depth information about Python virtual environments, can be found here.\n","date":"15 April 2020","permalink":"/projects/server-public/","section":"Projects","summary":"","title":"server-public"},{"content":"\nned-bot # A discord bot that reacts with 🇩 when any users react with 🇳 and 🇪. It likes spelling its name. # Requirements\nRequires discord.py https://pypi.org/project/discord.py/ Installation\ninstall discord.py through pip via \u0026ldquo;pip install discord.py\u0026rdquo; To start the bot run \u0026ldquo;python3 ned-bot.py\u0026rdquo;\n","date":"7 April 2020","permalink":"/projects/ned-bot/","section":"Projects","summary":"","title":"ned-bot"},{"content":"\nPolybot-2 # ","date":"4 April 2020","permalink":"/projects/polybot-2/","section":"Projects","summary":"","title":"Polybot-2"},{"content":"\nsort-vis # Visualizes sorting alogithims using p5 js # Requirements\nRequires a local node server Install/Setup\nInstall node.js by running \u0026ldquo;npm install http-server\u0026rdquo; Then while in the sort-vis folder run \u0026ldquo;http-server\u0026rdquo; Finally connect to \u0026ldquo;http://localhost:8080/\u0026rdquo; and open sort-vis.html ","date":"29 March 2020","permalink":"/projects/sort-vis/","section":"Projects","summary":"","title":"sort-vis"},{"content":"\nCruzlang # Cruz Lang is a simple explicit static typed language. The compiler written in python is called shark and uses ply.lex for lexical analysis. It has 5 primitive data types:\nData types # byte one byte of data char one ASCII character int a 32 bit integer prec a number with a decimal point of 4 bytes ptr a 4 byte pointer address Other key words # fun the function key word while a while loop write output as stdout read input as stdin with uses external files if do something if condition true elif else do something if condition true else else do something takes place for parameters and types return a return returns tells function what type to return Here is the syntax:\nSyntax\n","date":"26 March 2020","permalink":"/projects/cruz-lang/","section":"Projects","summary":"","title":"cruz-lang"},{"content":"\nTerbot-2 # ","date":"25 March 2020","permalink":"/projects/terbot-2/","section":"Projects","summary":"","title":"Terbot-2"},{"content":"\nSource code for an RPG game To run the game, type \u0026ldquo;java -jar asmura.jar\u0026rdquo; in terminal The application opens with a black background (menu screen). To enter \u0026ldquo;main game\u0026rdquo;, press enter (white background), and press q to toggle between main game and escaped screen (gray background).\n","date":"24 March 2020","permalink":"/projects/asmura/","section":"Projects","summary":"","title":"asmura"},{"content":"\nRoute-Finding # ","date":"24 March 2020","permalink":"/projects/route-finding/","section":"Projects","summary":"","title":"Route-Finding"},{"content":"\nfork-craft # ","date":"21 March 2020","permalink":"/projects/fork-craft/","section":"Projects","summary":"","title":"fork-craft"},{"content":"\nCovid19-cases-tui # Simple tui for seeing Covid-19 cases # This script uses herokuapp\u0026rsquo;s api for data https://covid2019-api.herokuapp.com/\n","date":"20 March 2020","permalink":"/projects/covid19-cases-tui/","section":"Projects","summary":"","title":"Covid19-cases-tui"},{"content":"\nDictionary-tui # A tui for dictionaryapi.com to search for Synonyms and Antonyms\nApi Key # First go to https://dictionaryapi.com/ Then follow their instructions to get an api key\nSetup # Create a file named api_key.py and in it make a var called key, set it to \u0026ldquo;your api key\u0026rdquo;\nOutput example # Word: fast fast Synonyms apace briskly chop-chop double-quick fleetly full tilt hastily hell-for-leather hot lickety-split posthaste presto pronto quick quickly rapidly snappily soon speedily swift swiftly Antonyms slow slowly ","date":"19 March 2020","permalink":"/projects/dictionary-tui/","section":"Projects","summary":"","title":"Dictionary-tui"},{"content":"\ndmenuSpecialCharacterCopier # Copy emoji from dmenu by searching their name\n","date":"19 March 2020","permalink":"/projects/dmenuspecialcharactercopier/","section":"Projects","summary":"","title":"dmenuSpecialCharacterCopier"},{"content":"\nlearningMachineLearning # ","date":"19 March 2020","permalink":"/projects/learningmachinelearning/","section":"Projects","summary":"","title":"learningMachineLearning"},{"content":"\nfirefoxThemes # ","date":"17 March 2020","permalink":"/projects/firefoxthemes/","section":"Projects","summary":"","title":"firefoxThemes"},{"content":"\nLan-Website # A simple website for my local network to share files\n","date":"17 March 2020","permalink":"/projects/lan-website/","section":"Projects","summary":"","title":"Lan-Website"},{"content":"","date":"17 March 2020","permalink":"/tags/php/","section":"Tags","summary":"","title":"PHP"},{"content":"","date":"16 March 2020","permalink":"/tags/brainf/","section":"Tags","summary":"","title":"Brainf"},{"content":"\nBrainF # Turn jaker into hello with\n\u0026gt;,--.\u0026gt;,++++.\u0026gt;,+.\u0026gt;,+++++++.\u0026gt;,---. Caeser cipher with\n\u0026gt;+[\u0026gt;,+++.] Print a lot of weird stuff with a loop\n\u0026gt;+[+.] ","date":"16 March 2020","permalink":"/projects/brainf/","section":"Projects","summary":"","title":"BrainF"},{"content":"\n404: Not Found\n","date":"16 March 2020","permalink":"/projects/javapong/","section":"Projects","summary":"","title":"JavaPong"},{"content":"\ntbaTestScripts # TBA API key # Create an api key API docs Make a api_key.py file Add request_headers = {\u0026lsquo;X-TBA-Auth-Key\u0026rsquo;: \u0026lsquo;Your Key Here\u0026rsquo;} Uses # averageBumperColor.py # In averageBumperColor.py the url event/{event_code}/matches/simple is used. Example of the event_code could be 2020caln. The feilds used are [\u0026quot;alliances\u0026quot;][\u0026quot;blue\u0026quot;][\u0026quot;team_keys\u0026quot;] and [\u0026quot;alliances\u0026quot;][\u0026quot;red\u0026quot;][\u0026quot;team_keys\u0026quot;] The data it returns is a json of the average bumper/alliance color used\n{ \u0026#39;frc6560\u0026#39;: -4, \u0026#39;frc115\u0026#39;: 0, \u0026#39;frc114\u0026#39;: -6, \u0026#39;frc1678\u0026#39;: -6 } matchColorMaker.py # In matchColorMaker.py the url event/{event_key}/matches/simple is used. Example of the event_key could be 2020caln. The feilds used are [\u0026quot;alliances\u0026quot;][\u0026quot;blue\u0026quot;][\u0026quot;team_keys\u0026quot;] and [\u0026quot;alliances\u0026quot;][\u0026quot;red\u0026quot;][\u0026quot;team_keys\u0026quot;] The data it prints is two lists with the red team and then the blue team in match\n[\u0026#39;frc1678\u0026#39;, \u0026#39;frc973\u0026#39;, \u0026#39;frc4\u0026#39;] [\u0026#39;frc6560\u0026#39;, \u0026#39;frc115\u0026#39;, \u0026#39;frc114\u0026#39;] [\u0026#39;frc1678\u0026#39;, \u0026#39;frc973\u0026#39;, \u0026#39;frc4\u0026#39;] [\u0026#39;frc6560\u0026#39;, \u0026#39;frc115\u0026#39;, \u0026#39;frc114\u0026#39;] [\u0026#39;frc1678\u0026#39;, \u0026#39;frc973\u0026#39;, \u0026#39;frc5089\u0026#39;] [\u0026#39;frc6560\u0026#39;, \u0026#39;frc115\u0026#39;, \u0026#39;frc114\u0026#39;] [\u0026#39;frc1678\u0026#39;, \u0026#39;frc973\u0026#39;, \u0026#39;frc4\u0026#39;] [\u0026#39;frc359\u0026#39;, \u0026#39;frc1388\u0026#39;, \u0026#39;frc3309\u0026#39;] teamsMapView.py # In teamsMapView.py the url event/{tba_key}/teams is used. Example of the event_code could be 2020mosl. The feilds used are team[\u0026quot;nickname\u0026quot;] and team[\u0026quot;state_prov\u0026quot;] The data it prints are the teams and their state/province\nMetool Brigade, Illinois RAVEN Robotics, Missouri Tech Heads, Missouri Citrus Circuits, California teamsViewer.py # In teamsViewer.py the url event/{tba_key}/teams is used. Example of the event_code could be 2020mosl. The feilds used are team[\u0026quot;key\u0026quot;], team[\u0026quot;nickname\u0026quot;], team[\u0026quot;city\u0026quot;], team[\u0026quot;state_prov\u0026quot;], and team[\u0026quot;rookie_year\u0026quot;] The data it prints are the teams and a few facts about them\nTeam frc2978 Cavaliers is from Saint Louis, Missouri and their rookie year was 2009 Team frc302 The Dragons is from Lake Orion, Michigan and their rookie year was 1999 Team frc3330 System of the Corn is from Saint Charles, Missouri and their rookie year was 2010 Team frc3397 Robolions is from Saint Louis, Missouri and their rookie year was 2010 teamsSpecificInfo.py # In teamsSpecificInfo.py the url team/{team_key} is used. Example of the team_key could be frc253. The data it prints all data about the given team\n{\u0026#39;address\u0026#39;: None, \u0026#39;city\u0026#39;: \u0026#39;Millbrae\u0026#39;, \u0026#39;country\u0026#39;: \u0026#39;USA\u0026#39;, \u0026#39;gmaps_place_id\u0026#39;: None, \u0026#39;gmaps_url\u0026#39;: None, \u0026#39;home_championship\u0026#39;: {\u0026#39;2020\u0026#39;: \u0026#39;Houston\u0026#39;}, \u0026#39;key\u0026#39;: \u0026#39;frc253\u0026#39;, \u0026#39;lat\u0026#39;: None, \u0026#39;lng\u0026#39;: None, \u0026#39;location_name\u0026#39;: None, \u0026#39;motto\u0026#39;: None, \u0026#39;name\u0026#39;: \u0026#39;Caccia Plumbing Inc/Millbrae Lions Club/Bishop Wisecarver/San Mateo Union High School District/Google/FIRST NorCal/Lockheed Martin/Santosh Abraham/SolidWorks/Comcast NBCUniversal/GATE/Intuitive Foundation/Millbrae Leos Club/San Carlos Kiwanis Club/Upward Credit Union/AGC Acupuncture Clinic/Rotary Club of Millbrae/Millbrae T4U/Tea Link/San Mateo Credit Union/Numis International Inc\u0026amp;Mills High School\u0026#39;, \u0026#39;nickname\u0026#39;: \u0026#39;Boba Bots\u0026#39;, \u0026#39;postal_code\u0026#39;: \u0026#39;94030\u0026#39;, \u0026#39;rookie_year\u0026#39;: 1999, \u0026#39;school_name\u0026#39;: \u0026#39;Mills High School\u0026#39;, \u0026#39;state_prov\u0026#39;: \u0026#39;California\u0026#39;, \u0026#39;team_number\u0026#39;: 253, \u0026#39;website\u0026#39;: \u0026#39;https://millsroboticsteam253.com\u0026#39;} ","date":"16 March 2020","permalink":"/projects/tbatestscripts/","section":"Projects","summary":"","title":"tbaTestScripts"},{"content":"\nTable of Contents # What is openpilot? Integration with Stock Features Supported Hardware Supported Cars Community Maintained Cars and Features Installation Instructions Limitations of openpilot ALC and LDW Limitations of openpilot ACC and FCW Limitations of openpilot DM User Data and comma Account Safety and Testing Testing on PC Community and Contributing Directory Structure Licensing What is openpilot? # openpilot is an open source driver assistance system. Currently, openpilot performs the functions of Adaptive Cruise Control (ACC), Automated Lane Centering (ALC), Forward Collision Warning (FCW) and Lane Departure Warning (LDW) for a growing variety of supported car makes, models and model years. In addition, while openpilot is engaged, a camera based Driver Monitoring (DM) feature alerts distracted and asleep drivers.\nIntegration with Stock Features # In all supported cars:\nStock Lane Keep Assist (LKA) and stock ALC are replaced by openpilot ALC, which only functions when openpilot is engaged by the user. Stock LDW is replaced by openpilot LDW. Additionally, on specific supported cars (see ACC column in supported cars):\nStock ACC is replaced by openpilot ACC. openpilot FCW operates in addition to stock FCW. openpilot should preserve all other vehicle\u0026rsquo;s stock features, including, but are not limited to: FCW, Automatic Emergency Braking (AEB), auto high-beam, blind spot warning, and side collision warning.\nSupported Hardware # At the moment, openpilot supports the EON DevKit and the comma two. A car harness is recommended to connect the EON or comma two to the car. In the future, we\u0026rsquo;d like to support other platforms as well, like gaming PCs.\nSupported Cars # Make Model (US Market Reference) Supported Package ACC No ACC accel below No ALC below Acura ILX 2016-18 AcuraWatch Plus openpilot 25mph6 25mph Acura RDX 2016-18 AcuraWatch Plus openpilot 25mph6 12mph Chrysler Pacifica 2017-18 Adaptive Cruise Stock 0mph 9mph Chrysler Pacifica Hybrid 2017-18 Adaptive Cruise Stock 0mph 9mph Chrysler Pacifica Hybrid 2019-20 Adaptive Cruise Stock 0mph 39mph Honda Accord 2018-19 All Stock 0mph 3mph Honda Accord Hybrid 2018-19 All Stock 0mph 3mph Honda Civic Hatchback 2017-19 Honda Sensing Stock 0mph 12mph Honda Civic Sedan/Coupe 2016-18 Honda Sensing openpilot 0mph 12mph Honda Civic Sedan/Coupe 2019 Honda Sensing Stock 0mph 2mph4 Honda CR-V 2015-16 Touring openpilot 25mph6 12mph Honda CR-V 2017-19 Honda Sensing Stock 0mph 12mph Honda CR-V Hybrid 2017-2019 Honda Sensing Stock 0mph 12mph Honda Fit 2018-19 Honda Sensing openpilot 25mph6 12mph Honda Odyssey 2018-20 Honda Sensing openpilot 25mph6 0mph Honda Passport 2019 All openpilot 25mph6 12mph Honda Pilot 2016-18 Honda Sensing openpilot 25mph6 12mph Honda Pilot 2019 All openpilot 25mph6 12mph Honda Ridgeline 2017-19 Honda Sensing openpilot 25mph6 12mph Hyundai Elantra 2017-191 SCC + LKAS Stock 19mph 34mph Hyundai Genesis 20181 All Stock 19mph 34mph Hyundai Santa Fe 20191 All Stock 0mph 0mph Jeep Grand Cherokee 2016-18 Adaptive Cruise Stock 0mph 9mph Jeep Grand Cherokee 2019 Adaptive Cruise Stock 0mph 39mph Kia Optima 20191 SCC + LKAS Stock 0mph 0mph Kia Sorento 20181 All Stock 0mph 0mph Kia Stinger 20181 SCC + LKAS Stock 0mph 0mph Lexus CT Hybrid 2017-18 All Stock5 0mph 0mph Lexus ES 2019 All openpilot 0mph 0mph Lexus ES Hybrid 2019 All openpilot 0mph 0mph Lexus IS 2017-2019 All Stock 22mph 0mph Lexus IS Hybrid 2017 All Stock 0mph 0mph Lexus NX Hybrid 2018 All Stock5 0mph 0mph Lexus RX 2016-17 All Stock5 0mph 0mph Lexus RX 2020 All openpilot 0mph 0mph Lexus RX Hybrid 2016-19 All Stock5 0mph 0mph Subaru Crosstrek 2018-19 EyeSight Stock 0mph 0mph Subaru Impreza 2019-20 EyeSight Stock 0mph 0mph Toyota Avalon 2016 TSS-P Stock5 20mph6 0mph Toyota Avalon 2017-18 All Stock5 20mph6 0mph Toyota Camry 2018-19 All Stock 0mph2 0mph Toyota Camry Hybrid 2018-19 All Stock 0mph2 0mph Toyota C-HR 2017-19 All Stock 0mph 0mph Toyota C-HR Hybrid 2017-19 All Stock 0mph 0mph Toyota Corolla 2017-19 All Stock5 20mph6 0mph Toyota Corolla 2020 All openpilot 0mph 0mph Toyota Corolla Hatchback 2019-20 All openpilot 0mph 0mph Toyota Corolla Hybrid 2020 All openpilot 0mph 0mph Toyota Highlander 2017-19 All Stock5 0mph 0mph Toyota Highlander Hybrid 2017-19 All Stock5 0mph 0mph Toyota Highlander 2020 All openpilot 0mph 0mph Toyota Prius 2016 TSS-P Stock5 0mph 0mph Toyota Prius 2017-19 All Stock5 0mph 0mph Toyota Prius Prime 2017-20 All Stock5 0mph 0mph Toyota Rav4 2016 TSS-P Stock5 20mph6 0mph Toyota Rav4 2017-18 All Stock5 20mph6 0mph Toyota Rav4 2019 All openpilot 0mph 0mph Toyota Rav4 Hybrid 2016 TSS-P Stock5 0mph 0mph Toyota Rav4 Hybrid 2017-18 All Stock5 0mph 0mph Toyota Rav4 Hybrid 2019-20 All openpilot 0mph 0mph Toyota Sienna 2018 All Stock5 0mph 0mph Volkswagen Golf 2016-193 Driver Assistance Stock 0mph 0mph 1Requires a panda and open sourced Hyundai giraffe, designed for the 2019 Sante Fe; pinout may differ for other Hyundai and Kia models. 228mph for Camry 4CYL L, 4CYL LE and 4CYL SE which don\u0026rsquo;t have Full-Speed Range Dynamic Radar Cruise Control. 3Requires a custom connector for the car harness 42019 Honda Civic 1.6L Diesel Sedan does not have ALC below 12mph. Community Maintained Cars and Features # Make Model (US Market Reference) Supported Package ACC No ACC accel below No ALC below Buick Regal 20187 Adaptive Cruise openpilot 0mph 7mph Cadillac ATS 20187 Adaptive Cruise openpilot 0mph 7mph Chevrolet Malibu 20177 Adaptive Cruise openpilot 0mph 7mph Chevrolet Volt 2017-187 Adaptive Cruise openpilot 0mph 7mph GMC Acadia Denali 20187 Adaptive Cruise openpilot 0mph 7mph Holden Astra 20177 Adaptive Cruise openpilot 0mph 7mph 5When disconnecting the Driver Support Unit (DSU), openpilot ACC will replace stock ACC. For DSU locations, see Toyota Wiki page. NOTE: disconnecting the DSU disables Automatic Emergency Braking (AEB). 6 Comma Pedal is used to provide stop-and-go capability to some of the openpilot-supported cars that don\u0026rsquo;t currently support stop-and-go. Here is how to build a Comma Pedal. NOTE: The Comma Pedal is not officially supported by comma. 7Requires a panda and community built giraffe. NOTE: disconnecting the ASCM disables Automatic Emergency Braking (AEB). Community Maintained Cars and Features are not verified by comma to meet our safety model. Be extra cautious using them. They are only available after enabling the toggle in Settings-\u0026gt;Developer-\u0026gt;Enable Community Features.\nInstallation Instructions # Install openpilot on a EON by entering https://openpilot.comma.ai during the installer setup.\nFollow this video instructions to properly mount the EON on the windshield. Note: openpilot features an automatic pose calibration routine and openpilot performance should not be affected by small pitch and yaw misalignments caused by imprecise EON mounting.\nBefore placing the device on your windshield, check the state and local laws and ordinances where you drive. Some state laws prohibit or restrict the placement of objects on the windshield of a motor vehicle.\nYou will be able to engage openpilot after reviewing the onboarding screens and finishing the calibration procedure.\nLimitations of openpilot ALC and LDW # openpilot ALC and openpilot LDW do not automatically drive the vehicle or reduce the amount of attention that must be paid to operate your vehicle. The driver must always keep control of the steering wheel and be ready to correct the openpilot ALC action at all times.\nWhile changing lanes, openpilot is not capable of looking next to you or checking your blind spot. Only nudge the wheel to initiate a lane change after you have confirmed it\u0026rsquo;s safe to do so.\nMany factors can impact the performance of openpilot ALC and openpilot LDW, causing them to be unable to function as intended. These include, but are not limited to:\nPoor visibility (heavy rain, snow, fog, etc.) or weather conditions that may interfere with sensor operation. The road facing camera is obstructed, covered or damaged by mud, ice, snow, etc. Obstruction caused by applying excessive paint or adhesive products (such as wraps, stickers, rubber coating, etc.) onto the vehicle. The EON is mounted incorrectly. When in sharp curves, like on-off ramps, intersections etc\u0026hellip;; openpilot is designed to be limited in the amount of steering torque it can produce. In the presence of restricted lanes or construction zones. When driving on highly banked roads or in presence of strong cross-wind. Extremely hot or cold temperatures. Bright light (due to oncoming headlights, direct sunlight, etc.). Driving on hills, narrow, or winding roads. The list above does not represent an exhaustive list of situations that may interfere with proper operation of openpilot components. It is the driver\u0026rsquo;s responsibility to be in control of the vehicle at all times.\nLimitations of openpilot ACC and FCW # openpilot ACC and openpilot FCW are not systems that allow careless or inattentive driving. It is still necessary for the driver to pay close attention to the vehicle’s surroundings and to be ready to re-take control of the gas and the brake at all times.\nMany factors can impact the performance of openpilot ACC and openpilot FCW, causing them to be unable to function as intended. These include, but are not limited to:\nPoor visibility (heavy rain, snow, fog, etc.) or weather conditions that may interfere with sensor operation. The road facing camera or radar are obstructed, covered, or damaged by mud, ice, snow, etc. Obstruction caused by applying excessive paint or adhesive products (such as wraps, stickers, rubber coating, etc.) onto the vehicle. The EON is mounted incorrectly. Approaching a toll booth, a bridge or a large metal plate. When driving on roads with pedestrians, cyclists, etc\u0026hellip; In presence of traffic signs or stop lights, which are not detected by openpilot at this time. When the posted speed limit is below the user selected set speed. openpilot does not detect speed limits at this time. In presence of vehicles in the same lane that are not moving. When abrupt braking maneuvers are required. openpilot is designed to be limited in the amount of deceleration and acceleration that it can produce. When surrounding vehicles perform close cut-ins from neighbor lanes. Driving on hills, narrow, or winding roads. Extremely hot or cold temperatures. Bright light (due to oncoming headlights, direct sunlight, etc.). Interference from other equipment that generates radar waves. The list above does not represent an exhaustive list of situations that may interfere with proper operation of openpilot components. It is the driver\u0026rsquo;s responsibility to be in control of the vehicle at all times.\nLimitations of openpilot DM # openpilot DM should not be considered an exact measurements of the status of alertness of the driver.\nMany factors can impact the performance of openpilot DM, causing it to be unable to function as intended. These include, but are not limited to:\nLow light conditions, such as driving at night or in dark tunnels. Bright light (due to oncoming headlights, direct sunlight, etc.). The driver face is partially or completely outside field of view of the driver facing camera. Right hand driving vehicles. The driver facing camera is obstructed, covered, or damaged. The list above does not represent an exhaustive list of situations that may interfere with proper operation of openpilot components. A driver should not rely on openpilot DM to assess their level of attention.\nUser Data and comma Account # By default, openpilot uploads the driving data to our servers. You can also access your data by pairing with the comma connect app ( iOS, Android). We use your data to train better models and improve openpilot for everyone.\nopenpilot is open source software: the user is free to disable data collection if they wish to do so.\nopenpilot logs the road facing camera, CAN, GPS, IMU, magnetometer, thermal sensors, crashes, and operating system logs. The driver facing camera is only logged if you explicitly opt-in in settings. The microphone is not recorded.\nBy using openpilot, you agree to our Privacy Policy. You understand that use of this software or its related services will generate certain types of user data, which may be logged and stored at the sole discretion of comma. By accepting this agreement, you grant an irrevocable, perpetual, worldwide right to comma for the use of this data.\nSafety and Testing # openpilot observes ISO26262 guidelines, see SAFETY.md for more detail. openpilot has software in the loop tests that run on every commit. The safety model code lives in panda and is written in C, see code rigor for more details. panda has software in the loop safety tests. Internally, we have a hardware in the loop Jenkins test suite that builds and unit tests the various processes. panda has additional hardware in the loop tests. We run the latest openpilot in a testing closet containing 10 EONs continuously replaying routes. Testing on PC # Check out the tools directory in master: lots of tools you can use to replay driving data, test and develop openpilot from your pc.\nCommunity and Contributing # openpilot is developed by comma and by users like you. We welcome both pull requests and issues on GitHub. Bug fixes and new car ports are encouraged.\nYou can add support for your car by following guides we have written for Brand and Model ports. Generally, a car with adaptive cruise control and lane keep assist is a good candidate. Join our Discord to discuss car ports: most car makes have a dedicated channel.\nWant to get paid to work on openpilot? comma is hiring. We also have a bounty program.\nAnd follow us on Twitter.\nDirectory Structure # . ├── apk # The apk files used for the UI ├── cereal # The messaging spec and libs used for all logs on EON ├── common # Library like functionality we've developed here ├── installer/updater # Manages auto-updates of openpilot ├── opendbc # Files showing how to interpret data from cars ├── panda # Code used to communicate on CAN ├── phonelibs # Libraries used on EON ├── pyextra # Libraries used on EON └── selfdrive # Code needed to drive the car ├── assets # Fonts and images for UI ├── athena # Allows communication with the app ├── boardd # Daemon to talk to the board ├── camerad # Driver to capture images from the camera sensors ├── car # Car specific code to read states and control actuators ├── common # Shared C/C++ code for the daemons ├── controls # Perception, planning and controls ├── debug # Tools to help you debug and do car ports ├── locationd # Soon to be home of precise location ├── logcatd # Android logcat as a service ├── loggerd # Logger and uploader of car data ├── modeld # Driving and monitoring model runners ├── proclogd # Logs information from proc ├── sensord # IMU / GPS interface code ├── tests # Unit tests, system tests and a car simulator └── ui # The UI To understand how the services interact, see cereal/service_list.yaml.\nLicensing # openpilot is released under the MIT license. Some parts of the software are released under other licenses as specified.\nAny user of this software shall indemnify and hold harmless comma.ai, Inc. and its directors, officers, employees, agents, stockholders, affiliates, subcontractors and customers from and against all allegations, claims, actions, suits, demands, damages, liabilities, obligations, losses, settlements, judgments, costs and expenses (including without limitation attorneys’ fees and costs) which arise out of, relate to or result from any use of this software by user.\nTHIS IS ALPHA QUALITY SOFTWARE FOR RESEARCH PURPOSES ONLY. THIS IS NOT A PRODUCT. YOU ARE RESPONSIBLE FOR COMPLYING WITH LOCAL LAWS AND REGULATIONS. NO WARRANTY EXPRESSED OR IMPLIED.\n","date":"27 February 2020","permalink":"/projects/openpilot/","section":"Projects","summary":"","title":"openpilot"},{"content":"\nApollo-11 # 🎌 Bahasa Indonesia, Català, Deutsch, English, Español, Français, Italiano, Nederlands, Polski, Português, Română, Tiếng Việt, Türkçe, Русский, العربية, فارسی, हिंदी, বাংলা, မြန်မာ, 日本, 正體中文, 简体中文, 한국어\nOriginal Apollo 11 guidance computer (AGC) source code for Command Module (Comanche055) and Lunar Module (Luminary099). Digitized by the folks at Virtual AGC and MIT Museum. The goal is to be a repo for the original Apollo 11 source code. As such, PRs are welcome for any issues identified between the transcriptions in this repository and the original source scans for Luminary 099 and Comanche 055, as well as any files I may have missed.\nContributing # Please read CONTRIBUTING.md before opening a pull request.\nCompiling # If you are interested in compiling the original source code, check out Virtual AGC.\nAttribution # Copyright Public domain Comanche055 Part of the source code for Colossus 2A, the Command Module\u0026rsquo;s (CM) Apollo Guidance Computer (AGC) for Apollo 11\nAssemble revision 055 of AGC program Comanche by NASA\n2021113-051. 10:28 APR. 1, 1969 Luminary099 Part of the source code for Luminary 1A, the Lunar Module\u0026rsquo;s (LM) Apollo Guidance Computer (AGC) for Apollo 11\nAssemble revision 001 of AGC program LYM99 by NASA\n2021112-061. 16:27 JUL. 14, 1969 Assembler yaYUL Contact Ron Burkey info@sandroid.org Website www.ibiblio.org/apollo Digitalization This source code has been transcribed or otherwise adapted from digitized images of a hardcopy from the MIT Museum. The digitization was performed by Paul Fjeld, and arranged for by Deborah Douglas of the Museum. Many thanks to both. Contract and Approvals # Derived from CONTRACT_AND_APPROVALS.agc\nThis AGC program shall also be referred to as Colossus 2A.\nThis program is intended for use in the CM as specified in report R-577. This program was prepared under DSR project 55-23870, sponsored by the Manned Spacecraft Center of The National Aeronautics and Space Administration through contract NAS 9-4065 with the Instrumentation Laboratory, Massachusetts Institute of Technology, Cambridge, Mass.\nSubmitted by Role Date Margaret H. Hamilton Colossus Programming Leader\nApollo Guidance and Navigation 28 Mar 69 Approved by Role Date Daniel J. Lickly Director, Mission Program Development\nApollo Guidance and Navigation Program 28 Mar 69 Fred H. Martin Colossus Project Manager\nApollo Guidance and Navigation Program 28 Mar 69 Norman E. Sears Director, Mission Development\nApollo Guidance and Navigation Program 28 Mar 69 Richard H. Battin Director, Mission Development\nApollo Guidance and Navigation Program 28 Mar 69 David G. Hoag Director\nApollo Guidance and Navigation Program 28 Mar 69 Ralph R. Ragan Deputy Director\nInstrumentation Laboratory 28 Mar 69 ","date":"20 February 2020","permalink":"/projects/apollo-11/","section":"Projects","summary":"","title":"Apollo-11"},{"content":"\n404: Not Found\n","date":"17 February 2020","permalink":"/projects/scouting-scripts/","section":"Projects","summary":"","title":"scouting-scripts"},{"content":"\nCrypto-Chat # Setup # To get started with cryptochat you first need to have firebase installed To do so just run pip install --user firebase\nUse # The chat will prompt you with Mode de/en: This is asking if you are decrypting a message or encrypting a message Then if you are encrypting it will ask you for your message then a key If you are decrypting it will ask for a key then it will print out all the messages decrypted by your key. This means that it if you decrypt messages with the wrong key they will look line nonsense.\nAfter encrypting the message, the program sends the encrypting message to the firebase database. This will allow anyone else to be able to view the encrypted message in their terminal with the version of the program. This makes it so you can have private group chats using very basic encryption.\n","date":"25 January 2020","permalink":"/projects/crypto-chat/","section":"Projects","summary":"","title":"Crypto-Chat"},{"content":"\npwntools - CTF toolkit # Pwntools is a CTF framework and exploit development library. Written in Python, it is designed for rapid prototyping and development, and intended to make exploit writing as simple as possible.\nfrom pwn import * context(arch = \u0026#39;i386\u0026#39;, os = \u0026#39;linux\u0026#39;) r = remote(\u0026#39;exploitme.example.com\u0026#39;, 31337) # EXPLOIT CODE GOES HERE r.send(asm(shellcraft.sh())) r.interactive() Try It Now! # You can now do a live demo of Pwntools, right in your browser.\nDocumentation # Our documentation is available at docs.pwntools.com\nTo get you started, we\u0026rsquo;ve provided some example solutions for past CTF challenges in our write-ups repository.\nInstallation # Pwntools is best supported on 64-bit Ubuntu LTE releases (12.04, 14.04, 16.04 and 18.04). Most functionality should work on any Posix-like distribution (Debian, Arch, FreeBSD, OSX, etc.). Python \u0026gt;= 2.7 is required (Python 3 suggested as best).\nMost of the functionality of pwntools is self-contained and Python-only. You should be able to get running quickly with\napt-get update apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential python3 -m pip install --upgrade pip python3 -m pip install --upgrade git+https://github.com/Gallopsled/pwntools.git@dev3 However, some of the features (assembling/disassembling foreign architectures) require non-Python dependencies. For more information, see the complete installation instructions here.\nContribution # See CONTRIBUTING.md\nContact # If you have any questions not worthy of a bug report, feel free to ping us at #pwntools on Freenode and ask away. Click here to connect. There is also a mailing list for higher latency discussion.\n","date":"12 January 2020","permalink":"/projects/pwntools/","section":"Projects","summary":"","title":"pwntools"},{"content":"\nPogscript # Pogscript, Overtly, Great, Script # For syntax add @@PogScript to the top of the file\nFor each command use \u0026gt; in front\nCommands # v for value \u0026gt;v(2 This sets the value to 2 and writes it in memory to the first open location i.e. 0\no for output \u0026gt;o(0 This outputs memory location 0\ni for input \u0026gt;i(Prompt: This outputs memory location 0\nOperators # a for add; s for subtract m for multiply d for divide p for push For each operator the formate is consistent \u0026gt;a{0{1 This adds memory location 0 and 1 \u0026gt;m{0{1 This multiplies memory locations 0 and 1\n","date":"31 December 2019","permalink":"/projects/pogscript/","section":"Projects","summary":"","title":"pogscript"},{"content":"\nSodium: Vim 2.0 # Sodium is an editor inspired by Vim (but not a clone). It aims to be efficient, fast, and productive.\nLibrary Requirements # Sodium requires the sdl2 library in order to build. To install on Ubuntu, use the following command: sudo apt-get install libsdl2-dev\nBuild # Use cargo run --features orbital in order to build the program.\n","date":"27 December 2019","permalink":"/projects/sodium/","section":"Projects","summary":"","title":"sodium"},{"content":"\ncodinggames is a repo dedicated to all (simple) open-source games. Feel free to add your own, and make sure to do bug tests and/or make suggestions for existing games!\n","date":"23 December 2019","permalink":"/projects/codinggames/","section":"Projects","summary":"","title":"codinggames"},{"content":"\n404: Not Found\n","date":"18 December 2019","permalink":"/projects/polybot/","section":"Projects","summary":"","title":"Polybot"},{"content":"\nTermitebot # Copy and update termite configs.\n","date":"18 December 2019","permalink":"/projects/termitebot/","section":"Projects","summary":"","title":"Termitebot"},{"content":"\ntlib # Fork of Adam Hutchings\u0026rsquo; tlib\n","date":"13 December 2019","permalink":"/projects/tlib/","section":"Projects","summary":"","title":"tlib"},{"content":"\nRUSHNOTE # Take quick notes from command line when in a rush.\nInstall # git clone https://github.com/JakeRoggenbuck/RushNote.git cd RushNote sudo make \u0026amp;\u0026amp; sudo make install For more information # man rushnote\nSecurity # notes have very open privileges (777) all users can read, write and execute the save file\n","date":"23 November 2019","permalink":"/projects/rushnote/","section":"Projects","summary":"","title":"RushNote"},{"content":"\n404: Not Found\n","date":"15 November 2019","permalink":"/projects/inflector/","section":"Projects","summary":"","title":"inflector"},{"content":"\nRepository for 1678 Software General git lesson\n","date":"8 November 2019","permalink":"/projects/git-lesson/","section":"Projects","summary":"","title":"git-lesson"},{"content":"\nSeamonsters-2605.github.io # Seamonsters team Github Pages site\n","date":"5 November 2019","permalink":"/projects/seamonsters-2605.github.io/","section":"Projects","summary":"","title":"Seamonsters-2605.github.io"},{"content":"\nJake\u0026rsquo;s Auto Rice Bash Script # Configs for # bspwm\nsxhkd\npolybar\ndunst\nnvim\nvim\nrofi\ntermite\nalacritty\nbash aliases\nwallpapers\nand more\n","date":"3 November 2019","permalink":"/projects/jarbs/","section":"Projects","summary":"","title":"JARBS"},{"content":"\nLimeOS # Backgrounds images for LimeOS\n","date":"31 October 2019","permalink":"/projects/limeos/","section":"Projects","summary":"","title":"LimeOS"},{"content":"\n404: Not Found\n","date":"3 September 2019","permalink":"/projects/skyometer/","section":"Projects","summary":"","title":"Skyometer"},{"content":"\n404: Not Found\n","date":"25 July 2019","permalink":"/projects/highlight/","section":"Projects","summary":"","title":"Highlight"},{"content":"\n404: Not Found\n","date":"3 July 2019","permalink":"/projects/gnome-clocks/","section":"Projects","summary":"","title":"gnome-clocks"},{"content":"","date":"3 July 2019","permalink":"/tags/vala/","section":"Tags","summary":"","title":"Vala"},{"content":"\ngpt-2 # Code from the paper \u0026ldquo;Language Models are Unsupervised Multitask Learners\u0026rdquo;.\nWe have currently released small (117M parameter) and medium (345M parameter) versions of GPT-2. While we have not released the larger models, we have released a dataset for researchers to study their behaviors.\nSee more details in our blog post.\nUsage # This repository is meant to be a starting point for researchers and engineers to experiment with GPT-2.\nSome caveats # GPT-2 models\u0026rsquo; robustness and worst case behaviors are not well-understood. As with any machine-learned model, carefully evaluate GPT-2 for your use case, especially if used without fine-tuning or in safety-critical applications where reliability is important. The dataset our GPT-2 models were trained on contains many texts with biases and factual inaccuracies, and thus GPT-2 models are likely to be biased and inaccurate as well. To avoid having samples mistaken as human-written, we recommend clearly labeling samples as synthetic before wide dissemination. Our models are often incoherent or inaccurate in subtle ways, which takes more than a quick read for a human to notice. Work with us # Please let us know if you’re doing interesting research with or working on applications of GPT-2! We’re especially interested in hearing from and potentially working with those who are studying\nPotential malicious use cases and defenses against them (e.g. the detectability of synthetic text) The extent of problematic content (e.g. bias) being baked into the models and effective mitigations Development # See DEVELOPERS.md\nContributors # See CONTRIBUTORS.md\nCitation # Please use the following bibtex entry:\n@article{radford2019language, title={Language Models are Unsupervised Multitask Learners}, author={Radford, Alec and Wu, Jeff and Child, Rewon and Luan, David and Amodei, Dario and Sutskever, Ilya}, year={2019} } Future work # We may release code for evaluating the models on various benchmarks.\nWe are still considering release of the larger models.\nLicense # MIT\n","date":"25 June 2019","permalink":"/projects/gpt-2/","section":"Projects","summary":"","title":"gpt-2"},{"content":"\nspaceapp # Telescope Aiming tool ","date":"24 June 2019","permalink":"/projects/spaceapp/","section":"Projects","summary":"","title":"spaceapp"},{"content":"\njr0.org # Currently, Hugo to make this static website.\nNew # Recently (March 2022), I added a page for my new Dev Log, jr0.org/devlogs.\nHistory # This website has been up since May 26, 2019 in some form or another.\nCurrent # Prior # Prior # First # ","date":"27 May 2019","permalink":"/projects/jakeroggenbuck.github.io/","section":"Projects","summary":"","title":"JakeRoggenbuck.github.io"},{"content":"\nSignInWebApp # ","date":"15 May 2019","permalink":"/projects/signinwebapp/","section":"Projects","summary":"","title":"SignInWebApp"},{"content":"\ndcbankofcarter # ","date":"3 May 2019","permalink":"/projects/dcbankofcarter/","section":"Projects","summary":"","title":"dcbankofcarter"},{"content":"\nBest Next Step # Keep track of where you are on projects and what your Best Next Step is.\nWhy # Do you ever leave a project to focus on school, work, life, or other projects? The constant shifting from one project to another can lead to forgetting where to start up from. This app helps you keep track of your next steps and helps you plan ahead.\nHistory # This repository was created on Arpil 28th in 2019 but never was pushed to and no code was written. It remained empty for over three years. I still have concept art from that time and want to continue this project with the skills I have now.\nCurrent update: Now this project has a full backend and frontend written with Gin Gonic and Svelte\nBackend (Daft) # For the backend, I am using Gin Frontend (Impulse) # For the frontend, I am using svelte Old Concept Design # ","date":"28 April 2019","permalink":"/projects/bestnextstep/","section":"Projects","summary":"","title":"BestNextStep"},{"content":"\nGalapagosReefOctopus # ","date":"19 February 2019","permalink":"/projects/galapagosreefoctopus/","section":"Projects","summary":"","title":"GalapagosReefOctopus"},{"content":"\nChromeWebLauncher # ","date":"20 January 2019","permalink":"/projects/chromeweblauncher/","section":"Projects","summary":"","title":"ChromeWebLauncher"},{"content":"\ngit-training # Git(hub) training for Scouting Programmers\n","date":"2 January 2019","permalink":"/projects/git-training/","section":"Projects","summary":"","title":"git-training"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/tags/code/","section":"Tags","summary":"","title":"code"},{"content":"","date":"1 January 0001","permalink":"/tags/github/","section":"Tags","summary":"","title":"github"},{"content":"","date":"1 January 0001","permalink":"/tags/jake/","section":"Tags","summary":"","title":"Jake"},{"content":"","date":"1 January 0001","permalink":"/tags/machine-learning/","section":"Tags","summary":"","title":"machine learning"},{"content":"","date":"1 January 0001","permalink":"/tags/manager/","section":"Tags","summary":"","title":"manager"},{"content":"","date":"1 January 0001","permalink":"/tags/product/","section":"Tags","summary":"","title":"product"},{"content":"","date":"1 January 0001","permalink":"/tags/projects/","section":"Tags","summary":"","title":"projects"},{"content":"","date":"1 January 0001","permalink":"/tags/roggenbuck/","section":"Tags","summary":"","title":"Roggenbuck"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"1 January 0001","permalink":"/tags/software/","section":"Tags","summary":"","title":"software"}]